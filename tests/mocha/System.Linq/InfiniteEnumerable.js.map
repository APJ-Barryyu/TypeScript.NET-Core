{"version":3,"sources":["System.Linq/InfiniteEnumerable.ts"],"names":[],"mappings":"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","file":"InfiniteEnumerable.js","sourcesContent":["///<reference types=\"node\"/>\r\nimport * as assert from \"assert\";\r\nimport \"mocha\";\r\nimport Enumerable from \"../../../dist/commonjs/System.Linq/Linq\";\r\n\r\n\r\nconst source = Enumerable.toInfinity().asEnumerable();\r\n\r\ndescribe(\".doAction(...)\",()=>{\r\n\tit(\"should throw when disposed\",()=>{\r\n\t\tconst a = source.doAction(() => {});\r\n\t\ta.force();\r\n\t\tlet n = a.getEnumerator();\r\n\t\tassert.ok(n.moveNext());\r\n\t\tn.end();\r\n\t\tassert.ok(!n.moveNext());\r\n\t\tn = a.getEnumerator();\r\n\t\tassert.ok(n.moveNext());\r\n\t\ta.dispose();\r\n\t\tassert.throws(()=>n.moveNext());\r\n\t});\r\n});\r\n\r\ndescribe(\".elementAt(x)\", ()=>\r\n{\r\n\r\n\tit(\"the index should match the value\", ()=>\r\n\t{\r\n\t\tfor(let i = 0; i<10; i++)\r\n\t\t{\r\n\t\t\tassert.equal(source.elementAt(i), i);\r\n\t\t}\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".singleOrDefault()\", ()=>\r\n{\r\n\r\n\tit(\"should be defaulted\", ()=>\r\n\t{\r\n\t\tassert.equal(source.singleOrDefault(), null);\r\n\t\tassert.equal(source.singleOrDefault(-1), -1);\r\n\t});\r\n\r\n});\r\n\r\n\r\ndescribe(\".single()\", ()=>\r\n{\r\n\r\n\tit(\"should throw\", ()=>\r\n\t{\r\n\t\tassert.throws(()=>\r\n\t\t{\r\n\t\t\tsource.single();\r\n\t\t});\r\n\t});\r\n\r\n});\r\n\r\n\r\ndescribe(\".skip(count)\", ()=>\r\n{\r\n\tit(\"should return empty if Infinity\", ()=>\r\n\t{\r\n\t\tassert.equal(\r\n\t\t\tsource\r\n\t\t\t\t.skip(Infinity)\r\n\t\t\t\t.firstOrDefault(-1), -1);\r\n\t});\r\n\r\n});\r\n\r\n\r\ndescribe(\".take(count)\", ()=>\r\n{\r\n\tit(\"should return empty if zero less\", ()=>\r\n\t{\r\n\t\tassert.equal(\r\n\t\t\tsource\r\n\t\t\t\t.take(0)\r\n\t\t\t\t.defaultIfEmpty(-1)\r\n\t\t\t\t.first(), -1);\r\n\r\n\t\tassert.equal(\r\n\t\t\tsource\r\n\t\t\t\t.take(-1)\r\n\t\t\t\t.firstOrDefault(-1), -1);\r\n\r\n\t\tassert.throws(()=>\r\n\t\t{\r\n\t\t\tconst t = source.take(2);\r\n\t\t\tconst e = t.getEnumerator();\r\n\t\t\te.moveNext();\r\n\t\t\tt.dispose();\r\n\t\t\te.moveNext();\r\n\t\t});\r\n\r\n\t\tassert.doesNotThrow(()=>\r\n\t\t{\r\n\t\t\tlet e = false, f = false;\r\n\t\t\tassert.ok(\r\n\t\t\t\tsource\r\n\t\t\t\t\t.where(e=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(!e) throw \"Error\";\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catchError(error=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\te = error==\"Error\";\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.finallyAction(()=>{\r\n\t\t\t\t\t\tf = true;\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.isEmpty());\r\n\t\t\tassert.ok(e);\r\n\t\t\tassert.ok(f);\r\n\t\t});\r\n\r\n\t});\r\n\r\n\t// All .take operations should return a finite enumerable.\r\n\t// For other conditional take operations, like takeWhile, the isEndless property is indeterminate.\r\n\tit(\"should throw for Infinity\", ()=>\r\n\t{\r\n\t\tassert.throws(()=>\r\n\t\t{\r\n\t\t\tsource.take(Infinity);\r\n\t\t})\r\n\t});\r\n\r\n});\r\n\r\n\r\ndescribe(\".choose()\", ()=>\r\n{\r\n\r\n\tit(\"should filter non-null\", ()=>\r\n\t{\r\n\t\tassert.equal(source.choose().first(),0);\r\n\t\tassert.equal(source.choose(s=>s).first(),0);\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".except()\", ()=>\r\n{\r\n\r\n\tit(\"should skip values that are excepted\", ()=>\r\n\t{\r\n\t\tassert.equal(source.except([0,1]).first(),2);\r\n\t\tassert.equal(source.except([1,2]).elementAt(2),4);\r\n\t\tsource.except([1,2]).dispose();\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".pairwise(selector)\", ()=>\r\n{\r\n\r\n\tit(\"should produce pair selected values\", ()=>\r\n\t{\r\n\t\tconst s = Enumerable.toInfinity().pairwise((a, b) => \"\" + a + \"\" + b);\r\n\t\tassert.equal(s.elementAt(0),\"01\");\r\n\t\tassert.equal(s.elementAt(5),\"56\");\r\n\t\ts.dispose();\r\n\t});\r\n\r\n});\r\n"]}