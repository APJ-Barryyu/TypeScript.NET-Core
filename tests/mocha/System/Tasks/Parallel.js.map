{"version":3,"sources":["System/Tasks/Parallel.ts"],"names":[],"mappings":"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","file":"Parallel.js","sourcesContent":["///<reference types=\"node\"/>\r\nimport * as assert from \"assert\";\r\nimport Stopwatch from \"../../../../dist/commonjs/System/Diagnostics/Stopwatch\";\r\nimport {Parallel} from \"../../../../dist/commonjs/System/Threading/Tasks/Parallel\";\r\n\r\nit(\"should return the expected concatenation\", () =>\r\n{\r\n\treturn Parallel\r\n\t\t.startNew(\"there\", x => \"hello: \" + x)\r\n\t\t.then(\r\n\t\t\tresult => assert.equal(result, \"hello: there\"),\r\n\t\t\terror => assert.ok(false)\r\n\t\t);\r\n});\r\n\r\nfunction test(start:number):number\r\n{\r\n\tconst max = 3000000;\r\n\tfor(let i = start, stop = start + max; i<stop; i++)\r\n\t{\r\n\t\tstart += i;\r\n\t}\r\n\treturn start;\r\n}\r\n\r\nlet synchronousResult = 0;\r\nconst data:number[] = [];\r\nit(\"should work synchronously\", () =>\r\n{\r\n\t// console.log(\"\\nSynchronous time (ms):\",\r\n\tStopwatch.measure(\r\n\t\t() =>\r\n\t\t{\r\n\t\t\tfor(let i = 0; i<20; i++)\r\n\t\t\t{\r\n\t\t\t\tdata.push(i);\r\n\t\t\t\tsynchronousResult += test(i);\r\n\t\t\t}\r\n\t\t})\r\n\t// .total.milliseconds)\r\n\t;\r\n});\r\n\r\nfunction setupMap(maxCon:number):void\r\n{\r\n\tit(`should return the expected mapped sum (concurrency ${maxCon})`, function()\r\n\t{\r\n\t\t//this.timeout(3000);\r\n\t\t// var sw = Stopwatch.startNew();\r\n\t\treturn Parallel\r\n\t\t\t.maxConcurrency(maxCon)\r\n\t\t\t.map(data, test)\r\n\t\t\t.thenThis(result => assert.ok(true),\r\n\t\t\t\terror => assert.ok(false, \"mapping failed!\"))\r\n\t\t\t.reduce((p, c) => p + c, 0)\r\n\t\t\t.then(\r\n\t\t\t\tresult => assert.equal(result, synchronousResult),\r\n\t\t\t\terror => assert.ok(false, error)\r\n\t\t\t)\r\n\t\t\t// .finallyThis(\r\n\t\t\t// \t()=>console.log(`\\n(${maxCon}) Parallel map time (ms):`, sw.elapsedMilliseconds))\r\n\t\t\t;\r\n\r\n\t});\r\n}\r\n\r\n\r\nfunction setupPipe(maxCon:number):void\r\n{\r\n\tit(`should return the expected sum (concurrency ${maxCon})`, function()\r\n\t{\r\n\t\t//this.timeout(3000);\r\n\t\t// var sw = Stopwatch.startNew();\r\n\t\treturn Parallel\r\n\t\t\t.maxConcurrency(maxCon)\r\n\t\t\t.pipe(data, test)\r\n\t\t\t.reduce((p, c) => p + c, 0)\r\n\t\t\t.then(\r\n\t\t\t\tresult => assert.equal(result, synchronousResult),\r\n\t\t\t\terror => assert.ok(false, error)\r\n\t\t\t)\r\n\t\t\t// .finallyThis(\r\n\t\t\t// \t()=>console.log(`\\n(${maxCon}) Parallel pipe time (ms):`, sw.elapsedMilliseconds))\r\n\t\t\t;\r\n\r\n\t});\r\n}\r\n\r\nsetupPipe(1);\r\nsetupPipe(2);\r\n// setupPipe(3);\r\n\r\n// setup(15);\r\n// setup(10);\r\n//setup(7);\r\nsetupMap(1);\r\nsetupMap(2);\r\n// setupMap(3);"]}