{"version":3,"sources":["System/Time/ClockTime.ts"],"names":[],"mappings":";;AAAA,4BAA4B;AAC5B,+BAAiC;AACjC,iBAAe;AACf,6EAAwE;AAExE,kEAA+D;AAG/D,IACC,IAAI,GAAU,eAAM,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EACrC,IAAI,GAAU,eAAM,CAAC,OAAO,CAAC,EAAE,CAAC,EAChC,MAAM,GAAQ,eAAM,CAAC,OAAO,CAAC,EAAE,CAAC,EAChC,MAAM,GAAQ,eAAM,CAAC,OAAO,CAAC,EAAE,CAAC,EAChC,WAAW,GAAG,eAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAEpC,IAAM,EAAE,GAAG,IAAI,mBAAS,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;AAC5D,IAAM,EAAE,GAAG,IAAI,mBAAS,CACvB,IAAI,qBAAqB;MACvB,IAAI,qBAAsB;MAC1B,MAAM,qBAAwB;MAC9B,MAAM,oBAAwB;MAC9B,WAAW,CAAC,CAAC;AAEhB,QAAQ,CAAC,GAAG,EAAE;IAEb,EAAE,CAAC,iCAAiC,EAAE;QAErC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC5B,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAChC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAChC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE;QAEhC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC5B,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC5B,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAChC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAChC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,SAAS,EAAE;IAEnB,EAAE,CAAC,qBAAqB,EAAE;QAEzB,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2BAA2B,EAAE;QAE/B,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,EAAE,CAAC,GAAC,CAAC,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC","file":"ClockTime.js","sourcesContent":["///<reference types=\"node\"/>\r\nimport * as assert from \"assert\";\r\nimport \"mocha\";\r\nimport ClockTime from \"../../../../dist/commonjs/System/Time/ClockTime\";\r\nimport {Milliseconds} from \"../../../../dist/commonjs/System/Time/HowMany\";\r\nimport {Random} from \"../../../../dist/commonjs/System/Random\";\r\n\r\n\r\nconst\r\n\tdays        = Random.integer(364) + 1,\r\n\thour        = Random.integer(24),\r\n\tminute      = Random.integer(60),\r\n\tsecond      = Random.integer(60),\r\n\tmillisecond = Random.integer(1000);\r\n\r\nconst c1 = new ClockTime(hour, minute, second, millisecond);\r\nconst c2 = new ClockTime(\r\n\tdays*Milliseconds.Per.Day\r\n\t+ hour*Milliseconds.Per.Hour\r\n\t+ minute*Milliseconds.Per.Minute\r\n\t+ second*Milliseconds.Per.Second\r\n\t+ millisecond);\r\n\r\ndescribe(\".\", ()=>\r\n{\r\n\tit('should match constructor values', ()=>\r\n\t{\r\n\t\tassert.equal(c1.hour, hour);\r\n\t\tassert.equal(c1.minute, minute);\r\n\t\tassert.equal(c1.second, second);\r\n\t\tassert.equal(c1.millisecond, millisecond);\r\n\t});\r\n\r\n\tit('should match summed values', ()=>\r\n\t{\r\n\t\tassert.equal(c2.days, days);\r\n\t\tassert.equal(c2.hour, hour);\r\n\t\tassert.equal(c2.minute, minute);\r\n\t\tassert.equal(c2.second, second);\r\n\t\tassert.equal(c2.millisecond, millisecond);\r\n\t});\r\n});\r\n\r\ndescribe(\".equals\", ()=>\r\n{\r\n\tit('should not be equal', ()=>\r\n\t{\r\n\t\tassert.ok(!c1.equals(c2));\r\n\t});\r\n\r\n\tit('c1 should be less than c2', ()=>\r\n\t{\r\n\t\tassert.ok(c1.compareTo(c2)<0);\r\n\t});\r\n});"]}