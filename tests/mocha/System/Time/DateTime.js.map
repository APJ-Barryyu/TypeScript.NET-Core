{"version":3,"sources":["System/Time/DateTime.ts"],"names":[],"mappings":";;AAAA,4BAA4B;AAC5B,+BAAiC;AACjC,iBAAe;AACf,2EAAsE;AAGtE,QAAQ,CAAC,8CAA8C,EAAC;IAGvD,IAAM,SAAS,GAAG,IAAI,CAAC;IACvB,IAAM,YAAY,GAAG;QACpB,EAAE;QACF,EAAE;QACF,EAAE;QACF,EAAE;QACF,EAAE;QACF,EAAE;QACF,EAAE;QACF,EAAE;QACF,EAAE;QACF,EAAE;QACF,EAAE;QACF,EAAE,CAAA,UAAU;KACZ,CAAC;IAEF,EAAE,CAAC,uCAAuC,EAAE;QAE3C,GAAG,CAAA,CAAC,IAAI,CAAC,GAAC,SAAS,EAAC,CAAC,GAAC,IAAI,EAAC,CAAC,EAAE,EAAE,CAAC;YAChC,GAAG,CAAA,CAAC,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,EAAE,EAAC,CAAC,EAAE,EAAE,CAAC;gBACtB,EAAE,CAAA,CAAC,CAAC,KAAG,CAAC,IAAI,kBAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACpC,MAAM,CAAC,KAAK,CAAC,kBAAQ,CAAC,WAAW,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,EAAE,CAAC,CAAC;gBAC5C,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACP,MAAM,CAAC,KAAK,CAAC,kBAAQ,CAAC,WAAW,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;gBACzD,CAAC;YACF,CAAC;QACF,CAAC;IACF,CAAC,CAAC,CAAC;AAEJ,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,sBAAsB,EAAC;IAC/B,EAAE,CAAC,iDAAiD,EAAC;QACpD,MAAM,CAAC,EAAE,CAAC,kBAAQ,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,EAAC,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,GAAC,CAAC,CAAC,CAAC;IACjG,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,SAAS,EAAC;IAClB,IAAM,EAAE,GAAG,YAAY,EAAE,EAAE,GAAG,YAAY,CAAC;IAC3C,EAAE,CAAC,cAAc,EAAC;QACjB,IAAM,CAAC,GAAG,IAAI,kBAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,IAAI,kBAAQ,CAAC,EAAE,CAAC,CAAC;QACjD,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACxB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kBAAkB,EAAC;QACrB,IAAM,CAAC,GAAG,IAAI,kBAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,IAAI,kBAAQ,CAAC,EAAE,CAAC,CAAC;QACjD,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAM,IAAI,CAAC,CAAC,CAAC;QAChC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACzB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAC;QAC7B,IAAM,CAAC,GAAG,IAAI,kBAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,IAAI,kBAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,IAAI,kBAAQ,CAAC,EAAE,CAAC,CAAC;QACvE,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC;QAC5B,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC;QAC5B,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,KAAG,CAAC,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;AAGJ,CAAC,CAAC,CAAC","file":"DateTime.js","sourcesContent":["///<reference types=\"node\"/>\r\nimport * as assert from \"assert\";\r\nimport \"mocha\";\r\nimport DateTime from \"../../../../dist/commonjs/System/Time/DateTime\";\r\n\r\n\r\ndescribe(\".daysInMonth(year,month) & .isLeapYear(year)\",()=>{\r\n\r\n\r\n\tconst startYear = 2000;\r\n\tconst daysPerMonth = [\r\n\t\t31, //January,\r\n\t\t28,//February,\r\n\t\t31,//March,\r\n\t\t30,//April,\r\n\t\t31,//May,\r\n\t\t30,//June,\r\n\t\t31,//July,\r\n\t\t31,//August,\r\n\t\t30,//September,\r\n\t\t31,//October,\r\n\t\t30,//November,\r\n\t\t31//December\r\n\t];\r\n\r\n\tit('should match actual Gregorian values.', ()=>\r\n\t{\r\n\t\tfor(let y=startYear;y<2004;y++) {\r\n\t\t\tfor(let m=0;m<12;m++) {\r\n\t\t\t\tif(m===1 && DateTime.isLeapYear(y)) {\r\n\t\t\t\t\tassert.equal(DateTime.daysInMonth(y,m),29);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tassert.equal(DateTime.daysInMonth(y,m),daysPerMonth[m]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".between(first,last)\",()=>{\r\n\tit(\"should return a positive delta for proper dates\",()=>{\r\n\t\tassert.ok(DateTime.between(new Date(\"2016-06-06\"),new Date(\"2016-07-06\")).total.milliseconds>0);\r\n\t});\r\n});\r\n\r\ndescribe(\".equals\",()=>{\r\n\tconst d1 = \"2016-06-06\", d2 = \"2016-06-07\";\r\n\tit(\"should match\",()=>{\r\n\t\tconst x = new DateTime(d1), y = new DateTime(d1);\r\n\t\tassert.ok(x.equals(y));\r\n\t});\r\n\r\n\tit(\"should not match\",()=>{\r\n\t\tconst x = new DateTime(d1), y = new DateTime(d2);\r\n\t\tassert.ok(!x.equals(<any>null));\r\n\t\tassert.ok(!x.equals(y));\r\n\t});\r\n\r\n\tit(\"should compare correctly\",()=>{\r\n\t\tconst x = new DateTime(d1), y = new DateTime(d2), z = new DateTime(d2);\r\n\t\tassert.ok(x.compareTo(y)<0);\r\n\t\tassert.ok(y.compareTo(x)>0);\r\n\t\tassert.ok(y.compareTo(z)===0);\r\n\t});\r\n\r\n\r\n});\r\n"]}