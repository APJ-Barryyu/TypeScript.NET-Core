{"version":3,"sources":["System/Collections/Arrays/Sorting.ts"],"names":[],"mappings":"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","file":"Sorting.js","sourcesContent":["///<reference types=\"node\"/>\r\nimport * as assert from \"assert\";\r\nimport {Selector} from \"../../../../../dist/commonjs/System/FunctionTypes\";\r\nimport {areEqual} from \"../../../../../dist/commonjs/System/Collections/Array/Compare\";\r\nimport {compare} from \"../../../../../dist/commonjs/System/Compare\";\r\nimport {quickSort} from \"../../../../../dist/commonjs/System/Collections/Array/Sorting/quickSort\";\r\nimport {mergeSort} from \"../../../../../dist/commonjs/System/Collections/Array/Sorting/mergeSort\";\r\nimport {insertionSort} from \"../../../../../dist/commonjs/System/Collections/Array/Sorting/insertionSort\";\r\nimport {Random} from \"../../../../../dist/commonjs/System/Random\";\r\nimport {ArraySort} from \"../../../../../dist/commonjs/System/Collections/Array/Sort\";\r\n\r\nconst performanceCheck = false;  // Change to true to performance test/log\r\n\r\nfunction comparerSort(a:number[]):number[]\r\n{\r\n\treturn ArraySort.using(a, v => v);\r\n}\r\n\r\nfunction arraySort(a:number[]):number[]\r\n{\r\n\treturn a.sort(compare);\r\n}\r\n\r\nfunction nullSort(a:number[]):number[]\r\n{\r\n\treturn a;\r\n}\r\n\r\nconst sourceCount = 4, sourceMax = 200;\r\nconst source:number[][] = [];\r\nfor(let i = 0; i<sourceCount; i++)\r\n{\r\n\tsource.push(<any>Object.freeze(Random.integers(sourceMax, sourceMax/2)));\r\n}\r\nObject.freeze(source);\r\n\r\nfunction test(target:number[][], fn:Selector<number[],number[]>):void\r\n{\r\n\tfor(let i = 0; i<sourceCount; i++)\r\n\t{\r\n\t\ttarget[i] = fn(source[i].slice());\r\n\t}\r\n\r\n}\r\n\r\nfunction assertResults(result:number[][]):void\r\n{\r\n\tfor(let i = 0; i<sourceCount; i++)\r\n\t{\r\n\t\tlet ok = areEqual(arrayResults[i], result[i]);\r\n\t\tif(!ok) console.warn(result);\r\n\t\tassert.ok(ok);\r\n\t}\r\n}\r\n\r\n\r\nconst arrayResults:number[][] = [];\r\nfunction dummy()\r\n{\r\n\ttest(arrayResults, nullSort);\r\n}\r\nfunction array()\r\n{\r\n\ttest(arrayResults, arraySort);\r\n}\r\n\r\nconst insertionResults:number[][] = [];\r\nfunction insertion()\r\n{\r\n\ttest(insertionResults, insertionSort);\r\n}\r\n\r\nconst comparerResults:number[][] = [];\r\nfunction comparer()\r\n{\r\n\ttest(comparerResults, comparerSort);\r\n}\r\n\r\nconst quickResults:number[][] = [];\r\nfunction quick()\r\n{\r\n\ttest(quickResults, quickSort);\r\n}\r\n\r\nconst mergeResults:number[][] = [];\r\nfunction merge()\r\n{\r\n\ttest(mergeResults, mergeSort);\r\n}\r\n\r\nconst count = performanceCheck ? 100000 : 1;\r\nfunction measure(fn:Function):number\r\n{\r\n\tconst time = Date.now();\r\n\r\n\tfor(let i = 0; i<count; i++)\r\n\t{\r\n\t\tfn();\r\n\t}\r\n\r\n\treturn Date.now() - time;\r\n}\r\n\r\nfunction report(name:string, fn:Function):void\r\n{\r\n\tif(count>1)\r\n\t\tconsole.log(name, measure(fn), \"milliseconds\");\r\n}\r\n\r\nif(count>1)\r\n{\r\n\tconsole.log(count + \" iterations running...\");\r\n}\r\n\r\nreport(\"Dummy Sort (copy only):\", dummy);\r\nreport(\"Array Sort:\", array);\r\narray();\r\n\r\n\r\ndescribe(\"ArraySort.using()\", () =>\r\n{\r\n\tit(\"should match array sort\", () =>\r\n\t{\r\n\t\tcomparer();\r\n\t\tassertResults(comparerResults);\r\n\t});\r\n});\r\n\r\ndescribe(\"Insertion Sort\", () =>\r\n{\r\n\treport(\"Insertion Sort:\", insertion);\r\n\tit(\"should match array sort\", () =>\r\n\t{\r\n\t\tinsertion();\r\n\t\tassertResults(insertionResults);\r\n\t});\r\n});\r\n\r\ndescribe(\"Quick Sort\", () =>\r\n{\r\n\treport(\"Quick Sort:\", quick);\r\n\tit(\"should match array sort\", () =>\r\n\t{\r\n\t\tquick();\r\n\t\tassertResults(quickResults);\r\n\t});\r\n});\r\n\r\ndescribe(\"Merge Sort\", () =>\r\n{\r\n\treport(\"Merge Sort:\", merge);\r\n\tit(\"should match array sort\", () =>\r\n\t{\r\n\t\tmerge();\r\n\t\tassertResults(mergeResults);\r\n\t});\r\n});\r\n\r\n\r\n\r\n"]}