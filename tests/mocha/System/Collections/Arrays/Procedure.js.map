{"version":3,"sources":["System/Collections/Arrays/Procedure.ts"],"names":[],"mappings":"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","file":"Procedure.js","sourcesContent":["///<reference types=\"node\"/>\r\nimport * as assert from \"assert\";\r\nimport * as ArrayProcedure from \"../../../../../dist/commonjs/System/Collections/Array/Procedure\";\r\n\r\n\r\nconst\r\n\tminA     = -10,\r\n\tmaxA     = 2000,\r\n\tminB     = -Infinity,\r\n\tmaxB     = Infinity,\r\n\ta        = [5, minA, -1, maxA, -2, NaN, 20],\r\n\tb        = [5, 2000, maxB, -1, NaN, -10, minB, -2, 20],\r\n\tsum      = 5 + minA + (-1) + maxA + (-2) + 20,\r\n\taverage  = sum/6, // Not including NaN\r\n\tproduct  = 5*minA*(-1)*maxA*(-2)*20,\r\n\tquotient = 5/minA/(-1)/maxA/(-2)/20;\r\n\r\n\r\nfunction procedureShouldBe(\r\n\tsource:number[],\r\n\tvalue:number,\r\n\tp:(array:number[], ignoreNaN?:boolean)=>number)\r\n{\r\n\tit('should be NaN', ()=>\r\n\t{\r\n\t\tassert.ok(isNaN(p(source)));\r\n\t});\r\n\tit('should be ' + value, ()=>\r\n\t{\r\n\t\tassert.equal(p(source, true), value);\r\n\t});\r\n}\r\n\r\ndescribe(\".sum(source)\", ()=>\r\n{\r\n\tprocedureShouldBe(a, sum, ArrayProcedure.sum);\r\n\tit('should be 0', ()=>\r\n\t{\r\n\t\tassert.equal(ArrayProcedure.sum([]), 0);\r\n\t});\r\n});\r\n\r\ndescribe(\".average(source)\", ()=>\r\n{\r\n\tprocedureShouldBe(a, average, ArrayProcedure.average);\r\n\tit('should be NaN', ()=>\r\n\t{\r\n\t\tassert.ok(isNaN(ArrayProcedure.average([])));\r\n\t});\r\n\r\n});\r\n\r\n\r\ndescribe(\".product(source)\", ()=>\r\n{\r\n\tprocedureShouldBe(a, product, ArrayProcedure.product);\r\n\tit('should be NaN', ()=>\r\n\t{\r\n\t\tassert.ok(isNaN(ArrayProcedure.product([])));\r\n\t\tassert.ok(isNaN(ArrayProcedure.product([NaN], true)));\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".quotient(source)\", ()=>\r\n{\r\n\tprocedureShouldBe(a, quotient, ArrayProcedure.quotient);\r\n\tit('should be NaN', ()=>\r\n\t{\r\n\t\tassert.ok(isNaN(ArrayProcedure.quotient([])));\r\n\t\tassert.ok(isNaN(ArrayProcedure.quotient([1])));\r\n\t\tassert.ok(isNaN(ArrayProcedure.quotient([3,2,1,0])));\r\n\t\tassert.ok(isNaN(ArrayProcedure.quotient([NaN], true)));\r\n\t\tassert.ok(isNaN(ArrayProcedure.quotient([NaN,NaN,NaN])));\r\n\t});\r\n\r\n});\r\n\r\n\r\ndescribe(\".min(source)\", ()=>\r\n{\r\n\tdescribe(\"a\", ()=>\r\n\t{\r\n\t\tprocedureShouldBe(a, minA, ArrayProcedure.min);\r\n\t});\r\n\r\n\tdescribe(\"b\", ()=>\r\n\t{\r\n\t\tprocedureShouldBe(b, minB, ArrayProcedure.min);\r\n\t});\r\n\r\n\tit(\"should be NaN\",()=>{\r\n\t\tassert.ok(isNaN(ArrayProcedure.min(<any>null)));\r\n\t\tassert.ok(isNaN(ArrayProcedure.min([NaN],true)));\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".max(source)\", ()=>\r\n{\r\n\tdescribe(\"a\", ()=>\r\n\t{\r\n\t\tprocedureShouldBe(a, maxA, ArrayProcedure.max);\r\n\t});\r\n\r\n\tdescribe(\"b\", ()=>\r\n\t{\r\n\t\tprocedureShouldBe(b, maxB, ArrayProcedure.max);\r\n\t});\r\n\r\n\tit(\"should be NaN\",()=>{\r\n\t\tassert.ok(isNaN(ArrayProcedure.max(<any>null)));\r\n\t\tassert.ok(isNaN(ArrayProcedure.max([NaN],true)));\r\n\t});\r\n});\r\n"]}