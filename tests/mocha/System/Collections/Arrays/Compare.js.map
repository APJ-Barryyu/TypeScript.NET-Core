{"version":3,"sources":["System/Collections/Arrays/Compare.ts"],"names":[],"mappings":"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","file":"Compare.js","sourcesContent":["///<reference types=\"node\"/>\r\nimport * as assert from \"assert\";\r\nimport * as ArrayCompare from \"../../../../../dist/commonjs/System/Collections/Array/Compare\";\r\n\r\nconst a1 = [1,2,3];\r\nconst a2 = [1,2,3];\r\nconst b = [4,5,6];\r\nconst c = [7,8,9,10];\r\nconst d = b.slice();\r\nconst e = c.slice();\r\nd.length = e.length = 200000;\r\n\r\ndescribe(\".areEqual()\",()=>{\r\n\r\n\tit(\"should be equal\",()=>{\r\n\t\tassert.ok(ArrayCompare.areEqual([],[]));\r\n\t\tassert.ok(ArrayCompare.areEqual(a1,a1));\r\n\t\tassert.ok(ArrayCompare.areEqual(a1,a2));\r\n\t});\r\n\r\n\tit(\"should not be equal\",()=>{\r\n\t\tassert.ok(!ArrayCompare.areEqual(<any>null,a1));\r\n\t\tassert.ok(!ArrayCompare.areEqual(a1,<any>null));\r\n\t\tassert.ok(!ArrayCompare.areEqual(a1,b));\r\n\t\tassert.ok(!ArrayCompare.areEqual(b,c));\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".areAllEqual()\",()=>{\r\n\r\n\tit(\"should be equal\",()=>{\r\n\t\tassert.ok(ArrayCompare.areAllEqual([[],[],[]]));\r\n\t\tassert.ok(ArrayCompare.areAllEqual([a1,a1,a2]));\r\n\t});\r\n\r\n\tit(\"should not be equal\",()=>{\r\n\t\tassert.ok(!ArrayCompare.areAllEqual([a1,<any>null]));\r\n\t\tassert.ok(!ArrayCompare.areAllEqual([a1,b,c]));\r\n\t\tassert.ok(!ArrayCompare.areAllEqual([a1,b],true,()=>false));\r\n\t});\r\n\r\n\tit(\"should error for invalid\",()=>{\r\n\t\tassert.throws(()=>ArrayCompare.areAllEqual(<any>null));\r\n\t\tassert.throws(()=>ArrayCompare.areAllEqual([]));\r\n\t\tassert.throws(()=>ArrayCompare.areAllEqual([a1]));\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".areEquivalent()\",()=>{\r\n\r\n\tit(\"should be equivalent\",()=>{\r\n\t\tassert.ok(ArrayCompare.areEquivalent([1],[1]));\r\n\t\tassert.ok(ArrayCompare.areEquivalent(a1,a1));\r\n\t\tassert.ok(ArrayCompare.areEquivalent(a1,a2));\r\n\t\tassert.ok(ArrayCompare.areEquivalent(a1,a1.slice().reverse()));\r\n\t});\r\n\r\n\tit(\"should not be equivalent\",()=>{\r\n\t\tassert.ok(!ArrayCompare.areEquivalent([1],[2]));\r\n\t\tassert.ok(!ArrayCompare.areEquivalent(a1,b,()=>1));\r\n\t\tassert.ok(!ArrayCompare.areEquivalent(a1,b));\r\n\t\tassert.ok(!ArrayCompare.areEquivalent(d,e));\r\n\t});\r\n\r\n});"]}