{"version":3,"sources":["System/Collections/LinkedList.ts"],"names":[],"mappings":"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","file":"LinkedList.js","sourcesContent":["///<reference types=\"node\"/>\r\nimport * as assert from \"assert\";\r\nimport \"mocha\";\r\nimport * as ICollectionTests from \"./ICollection\";\r\nimport LinkedList from \"../../../../dist/commonjs/System/Collections/LinkedList\";\r\nimport {areEqual} from \"../../../../dist/commonjs/System/Collections/Array/Compare\";\r\n\r\n\r\nconst CLASS_NAME = 'LinkedList';\r\nICollectionTests.StringCollection(CLASS_NAME, new LinkedList<string>());\r\nICollectionTests.NumberCollection(CLASS_NAME, new LinkedList<number>());\r\nICollectionTests.InstanceCollection(CLASS_NAME, new LinkedList<Object>());\r\n\r\ndescribe('.addAfter & .addBefore', ()=>\r\n{\r\n\tconst part1:number[] = [1, 2, 3], part2:number[] = [5, 6, 7];\r\n\tconst parts = part1.concat(part2), len1 = parts.length;\r\n\tconst list = new LinkedList<number>(parts);\r\n\tconst list1 = list.toArray();\r\n\tconst count1 = list.count;\r\n\r\n\tconst partsSpliced = part1.concat([4]).concat(part2);\r\n\tconst len2 = partsSpliced.length;\r\n\tlist.find(5)!.addBefore(4);\r\n\tconst count2 = list.count;\r\n\tconst list2 = list.toArray();\r\n\tlist.find(6)!.addAfter(6.5);\r\n\tconst count3 = list.count;\r\n\tconst list3 = list.toArray();\r\n\r\n\r\n\tit('should match expected initial count', ()=>\r\n\t{\r\n\t\tassert.equal(len1, count1);\r\n\t\tassert.ok(areEqual(parts, list1));\r\n\t});\r\n\r\n\tit('should match expected count after inserting before', ()=>\r\n\t{\r\n\t\tassert.equal(len2, count2);\r\n\t\tassert.ok(areEqual(partsSpliced, list2), partsSpliced.join(',') + \" != \" + list2.join(','));\r\n\t});\r\n\r\n\tit('should match expected count after inserting after', ()=>\r\n\t{\r\n\t\tassert.equal(len2 + 1, count3);\r\n\t\tassert.ok(areEqual(partsSpliced, list2), list3.join(','));\r\n\t});\r\n\r\n\r\n});\r\n\r\ndescribe(\"Validate external node detachment\", ()=>\r\n{\r\n\r\n\tit(\"should assert if node detached\", ()=>\r\n\t{\r\n\t\tconst list = new LinkedList<number>();\r\n\t\tlist.add(1).add(2);\r\n\t\tassert.equal(list.count, 2);\r\n\r\n\t\tassert.equal(list.findLast(1)!.value,1);\r\n\t\tassert.equal(list.firstValue,1);\r\n\t\tassert.equal(list.find(2)!.value,2);\r\n\t\tassert.equal(list.lastValue,2);\r\n\t\tlist.last!.value = 3;\r\n\t\tassert.equal(list.find(3)!.value,3);\r\n\t\tassert.equal(list.lastValue,3);\r\n\r\n\t\tlist.addAfter(list.first!,5)\r\n\t\t\t.addFirst(0)\r\n\t\t\t.addLast(10);\r\n\r\n\t\tassert.equal(list.first!.value,0);\r\n\t\tassert.equal(list.getNodeAt(0)!.value,0);\r\n\t\tassert.equal(list.getValueAt(0),0);\r\n\t\tassert.equal(list!.getNodeAt(2)!.value,5);\r\n\t\tassert.equal(list.getValueAt(2),5);\r\n\t\tassert.equal(list!.getNodeAt(4)!.value,10);\r\n\t\tassert.equal(list.getValueAt(4),10);\r\n\t\tassert.ok(list.removeLast());\r\n\t\tassert.ok(list.removeFirst());\r\n\t\tconst n = list.getNodeAt(1)!;\r\n\t\tassert.ok(list.removeAt(1));\r\n\t\tassert.throws(()=>n.value);\r\n\r\n\t\tconst last = list.last!;\r\n\t\tassert.equal(last.previous!.value,1);\r\n\t\tassert.equal(last.previous!.next,last);\r\n\t\tlast.remove();\r\n\t\tassert.ok(!last.list);\r\n\t\tassert.equal(list.count, 1);\r\n\r\n\t\tassert.doesNotThrow(()=>last.remove());\r\n\t\tassert.throws(()=>last.value);\r\n\t\tassert.throws(()=>last.next);\r\n\t\tassert.throws(()=>last.previous);\r\n\r\n\t\tconst first = list.first!;\r\n\t\tlist.dispose();\r\n\t\tassert.ok(!first.list);\r\n\t\tassert.throws(()=>first.value);\r\n\r\n\t})\r\n\r\n});"]}