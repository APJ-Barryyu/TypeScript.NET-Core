{"version":3,"sources":["System/Collections/LazyList.ts"],"names":[],"mappings":";;AAAA;;;GAGG;AACH,4BAA4B;AAC5B,+BAAiC;AACjC,iBAAe;AACf,kFAA+E;AAC/E,mEAAsE;AAEtE,IAAM,MAAM,GAAG,EAAE,CAAC;AAElB,QAAQ,CAAC,SAAS,EAAE;IAEnB,IAAI,MAAM,GAAG,IAAI,mBAAQ,CAAC,iBAAU,CAAC,KAAK,CAAC,CAAC,EAAC,MAAM,CAAC,CAAC,CAAC;IACtD,EAAE,CAAC,gCAAgC,EAAC;QAEnC,MAAM,CAAC,MAAM,CAAC,cAAM,OAAA,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,EAAf,CAAe,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAC;QAE/B,MAAM,CAAC,MAAM,CAAC,cAAM,OAAA,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,EAAf,CAAe,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAC;QACzC,GAAG,CAAA,CAAC,IAAI,CAAC,GAAG,CAAC,EAAC,CAAC,GAAC,MAAM,EAAC,CAAC,EAAE,EAC1B,CAAC;YACA,MAAM,CAAC,KAAK,CAAC,CAAC,EAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/B,CAAC;IACF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAC;QAExC,MAAM,CAAC,MAAM,CAAC,cAAI,OAAA,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,EAAd,CAAc,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,QAAQ,EAAE;IAElB,EAAE,CAAC,+BAA+B,EAAC;QAElC,IAAI,OAAO,GAAG,IAAI,mBAAQ,CAAC,iBAAU,CAAC,KAAK,CAAC,CAAC,EAAC,MAAM,CAAC,CAAC,CAAC;QACvD,IAAI,OAAO,GAAG,IAAI,mBAAQ,CAAC,iBAAU,CAAC,KAAK,CAAC,CAAC,EAAC,MAAM,CAAC,CAAC,CAAC;QAEvD,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAC;QAEhD,IAAI,MAAM,GAAG,IAAI,mBAAQ,CAAC,iBAAU,CAAC,KAAK,CAAC,CAAC,EAAC,MAAM,CAAC,CAAC,CAAC;QACtD,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAC;QAEhD,IAAI,MAAM,GAAG,IAAI,mBAAQ,CAAC,iBAAU,CAAC,KAAK,CAAC,CAAC,EAAC,MAAM,CAAC,CAAC,CAAC;QACtD,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC","file":"LazyList.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT\r\n */\r\n///<reference types=\"node\"/>\r\nimport * as assert from \"assert\";\r\nimport \"mocha\";\r\nimport {LazyList} from \"../../../../dist/commonjs/System/Collections/LazyList\";\r\nimport {Enumerable} from \"../../../../dist/commonjs/System.Linq/Linq\";\r\n\r\nconst LENGTH = 10;\r\n\r\ndescribe('.get(i)', ()=>\r\n{\r\n\tlet source = new LazyList(Enumerable.range(0,LENGTH));\r\n\tit(\"should reject negative indexes\",()=>\r\n\t{\r\n\t\tassert.throws(() => source.get(0.5));\r\n\t});\r\n\r\n\tit(\"should reject non-integers\",()=>\r\n\t{\r\n\t\tassert.throws(() => source.get(0.5));\r\n\t});\r\n\r\n\tit(\"should be able to access all entries\",()=>{\r\n\t\tfor(let i = 0;i<LENGTH;i++)\r\n\t\t{\r\n\t\t\tassert.equal(i,source.get(i));\r\n\t\t}\r\n\t});\r\n\r\n\tit(\"should reject out of bounds indexes\",()=>\r\n\t{\r\n\t\tassert.throws(()=>source.get(10));\r\n\t});\r\n});\r\n\r\ndescribe('.count', ()=>\r\n{\r\n\tit(\"should match enumerable count\",()=>\r\n\t{\r\n\t\tlet source1 = new LazyList(Enumerable.range(0,LENGTH));\r\n\t\tlet source2 = new LazyList(Enumerable.range(0,LENGTH));\r\n\r\n\t\tassert.equal(source1.count, source2.linq.count());\r\n\t});\r\n\r\n\tit(\"should match enumerable count with same (1)\",()=>\r\n\t{\r\n\t\tlet source = new LazyList(Enumerable.range(0,LENGTH));\r\n\t\tassert.equal(source.count, source.linq.count());\r\n\t});\r\n\r\n\tit(\"should match enumerable count with same (2)\",()=>\r\n\t{\r\n\t\tlet source = new LazyList(Enumerable.range(0,LENGTH));\r\n\t\tassert.equal(source.linq.count(), source.count);\r\n\t});\r\n});\r\n"]}