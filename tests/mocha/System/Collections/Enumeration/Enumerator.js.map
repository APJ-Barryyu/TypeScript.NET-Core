{"version":3,"sources":["System/Collections/Enumeration/Enumerator.ts"],"names":[],"mappings":"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","file":"Enumerator.js","sourcesContent":["///<reference types=\"node\"/>\r\nimport * as assert from \"assert\";\r\nimport \"mocha\";\r\nimport {TypeInfo} from \"../../../../../dist/commonjs/System/Types\";\r\nimport Queue from \"../../../../../dist/commonjs/System/Collections/Queue\";\r\nimport * as Enumerator from \"../../../../../dist/commonjs/System/Collections/Enumeration/Enumerator\";\r\nimport {IEnumerator} from \"../../../../../dist/commonjs/System/Collections/Enumeration/IEnumerator\";\r\n\r\nconst VOID0:undefined = void 0;\r\n\r\ndescribe(\".from(source)\",()=>{\r\n\r\n\tit(\"null should use an empty enumerator\",()=>{\r\n\t\tconst test = Enumerator.from(<any>null);\r\n\t\tlet count = 0;\r\n\t\twhile(test.moveNext()) {\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassert.equal(test.current,VOID0);\r\n\t\tassert.equal(test.nextValue(),VOID0);\r\n\t\tassert.equal(test.next().done,true);\r\n\t\tassert.equal(count,0);\r\n\t\ttest.reset();\r\n\t\ttest.dispose();\r\n\t});\r\n\r\n\tit(\"primitive values should throw\",()=>{\r\n\t\tassert.throws(()=>Enumerator.from(<any>1));\r\n\t});\r\n\r\n\tit(\"non enumerable objects should throw\",()=>{\r\n\t\tassert.throws(()=>Enumerator.from(<any>{}));\r\n\t});\r\n\r\n\tit(\"functions should be treated as generators\",()=>{\r\n\t\tconst e = Enumerator.from((prev:number, i:number) => (prev || 1) + i);\r\n\t\tfunction pass(e:IEnumerator<number>){\r\n\t\t\tassert.equal(e.nextValue(),1);\r\n\t\t\tassert.equal(e.nextValue(),2);\r\n\t\t\tassert.equal(e.nextValue(),4);\r\n\t\t\tassert.equal(e.nextValue(),7);\r\n\t\t\tassert.equal(e.nextValue(),11);\r\n\t\t\tassert.equal(e.nextValue(),16);\r\n\t\t}\r\n\t\tpass(e);\r\n\t\te.reset();\r\n\t\tpass(e);\r\n\t\te.dispose();\r\n\t\tassert.ok(!e.moveNext());\r\n\t\tassert.equal(e.nextValue(),void 0);\r\n\t});\r\n\r\n\tit(\"IEnumerable should enumerate\",()=>{\r\n\t\tconst a = [0, 1, 2, 3, 4];\r\n\t\tconst len = a.length;\r\n\t\tlet count = 0;\r\n\t\tconst q = new Queue(a);\r\n\t\tconst type = new TypeInfo(q);\r\n\t\ttype.member(\"getEnumerator\");\r\n\t\t// Creates an enumerable.\r\n\t\tconst test = Enumerator.from({getEnumerator: () => Enumerator.from(a)});\r\n\t\twhile(test.moveNext()) {\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassert.equal(count,len);\r\n\t});\r\n\r\n\tit(\"arrays should enumerate\",()=>{\r\n\t\tconst a = [0, 1, 2, 3, 4];\r\n\t\tconst type = new TypeInfo(a);\r\n\t\ttype.member(\"length\");\r\n\t\tconst len = a.length;\r\n\t\tlet count = 0;\r\n\t\tconst test = Enumerator.from(a);\r\n\t\twhile(test.moveNext()) {\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassert.equal(count,len);\r\n\t});\r\n\r\n\tit(\"strings should enumerate\",()=>{\r\n\t\tconst a = \"01234\";\r\n\t\tconst type = new TypeInfo(a);\r\n\t\ttype.member(\"length\");\r\n\t\tconst len = a.length;\r\n\t\tlet count = 0;\r\n\t\tconst test = Enumerator.from(a);\r\n\t\twhile(test.moveNext()) {\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassert.equal(count,len);\r\n\t});\r\n\r\n\tit(\"array like objects should enumerate\",()=>{\r\n\t\tconst a:ArrayLike<number> = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, length: 5};\r\n\t\tconst type = new TypeInfo(a);\r\n\t\ttype.member(\"length\");\r\n\t\tconst len = a.length;\r\n\t\tlet count = 0;\r\n\t\tconst test = Enumerator.from(a);\r\n\t\twhile(test.moveNext()) {\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassert.equal(count,len);\r\n\t});\r\n\r\n});\r\n\r\n\r\ndescribe(\".forEach(source)\",()=>\r\n{\r\n\tconst blankAction:(n:any,i:number)=>void = ()=>{};\r\n\r\n\tit(\"null values ignored\", ()=>\r\n\t{\r\n\t\tassert.doesNotThrow(()=>{\r\n\t\t\tassert.equal(Enumerator.forEach(<any>null,blankAction),-1);\r\n\t\t});\r\n\t});\r\n\r\n\tit(\"non-enumerable values ignored\", ()=>\r\n\t{\r\n\t\tassert.doesNotThrow(()=>{\r\n\t\t\tassert.equal(Enumerator.forEach(<any>{},blankAction),-1);\r\n\t\t});\r\n\t\tassert.doesNotThrow(()=>{\r\n\t\t\tassert.equal(Enumerator.forEach(<any>1,blankAction),-1);\r\n\t\t});\r\n\t});\r\n\r\n});\r\n"]}