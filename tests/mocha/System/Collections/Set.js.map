{"version":3,"sources":["System/Collections/Set.ts"],"names":[],"mappings":";;AAAA,4BAA4B;AAC5B,+BAAiC;AACjC,gDAAkD;AAClD,wEAAmE;AAInE,sCAAsC;AACtC,gBAAgB,CAAC,UAAU,CAAC,MAAM,GAAG,SAAS,EAAE,IAAI,aAAG,EAAU,EAAE;IAClE,EAAE;IACF,OAAO;IACP,OAAO;IACP,OAAO;CACP,CAAC,CAAC;AAEH,gBAAgB,CAAC,UAAU,CAAC,MAAM,GAAG,SAAS,EAAE,IAAI,aAAG,EAAU,EAAE;IAClE,CAAC;IACD,CAAC;IACD,CAAC;IACD,CAAC;IACD,CAAC;IACD,CAAC;IACD,EAAE;IACF,EAAE;CACF,CAAC,CAAC;AAGH,gBAAgB,CAAC,UAAU,CAAC,MAAM,GAAG,YAAY,EAAE,IAAI,aAAG,EAAa,EAAE;IACxE,CAAC;IACD,CAAC;IACD,CAAC;IACD,CAAC;IACD,CAAC;IACD,CAAC;IACD,EAAE;IACF,EAAE;IACF,EAAE;IACF,GAAG;IACH,GAAG;IACH,GAAG;IACH,GAAG;IACH,GAAG;IACH,GAAG;IACH,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,KAAK;CAEL,CAAC,CAAC;AAEH,IAAM,gBAAgB,GAAG;IACxB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI;CACvD,CAAC;AACF,IAAM,MAAM,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACzC,IAAM,QAAQ,GAAG,gBAAgB,CAAC,KAAK,EAAE,CAAC;AAC1C,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACpB,IAAM,kBAAkB,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;AAGrD,EAAE,CAAC,2BAA2B,EAAE;IAE/B,IAAM,CAAC,GAAG,IAAI,aAAG,CAAY,gBAAgB,CAAC,CAAC;IAE/C,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;AAE1B,CAAC,CAAC,CAAC;AAGH,QAAQ,CAAC,cAAc,EAAE;IAGxB,EAAE,CAAC,+EAA+E,EAAE;QAEnF,IAAM,CAAC,GAAG,IAAI,aAAG,CAAY,gBAAgB,CAAC,CAAC;QAC/C,IAAM,CAAC,GAAG,gBAAgB,CAAC,KAAK,EAAE,CAAC;QACnC,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;QAEd,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,gBAAgB,CAAC,EAAE,IAAI,EAAE,iCAAiC,CAAC,CAAC;QACrF,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,kCAAkC,CAAC,CAAC;QAC7E,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,mCAAmC,CAAC,CAAC;QAChF,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,oCAAoC,CAAC,CAAC;IAC3E,CAAC,CAAC,CAAC;AAEJ,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,iBAAiB,EAAE;IAG3B,EAAE,CAAC,mEAAmE,EAAE;QAEvE,IAAM,CAAC,GAAG,IAAI,aAAG,CAAY,gBAAgB,CAAC,CAAC;QAE/C,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC,gBAAgB,CAAC,EAAE,IAAI,EAAE,iDAAiD,CAAC,CAAC;QACxG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,iCAAiC,CAAC,CAAC;QAC9E,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,oCAAoC,CAAC,CAAC;IACrF,CAAC,CAAC,CAAC;AAEJ,CAAC,CAAC,CAAC;AAGH,QAAQ,CAAC,uBAAuB,EAAE;IAGjC,EAAE,CAAC,mEAAmE,EAAE;QAEvE,IAAM,CAAC,GAAG,IAAI,aAAG,CAAY,gBAAgB,CAAC,CAAC;QAE/C,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,EAAE,KAAK,EAAE,2DAA2D,CAAC,CAAC;QACzH,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,kBAAkB,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,iCAAiC,CAAC,CAAC;QACpF,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,kBAAkB,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,oCAAoC,CAAC,CAAC;IAC3F,CAAC,CAAC,CAAC;AAEJ,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,eAAe,EAAE;IAGzB,EAAE,CAAC,yEAAyE,EAAE;QAE7E,IAAM,CAAC,GAAG,IAAI,aAAG,CAAY,gBAAgB,CAAC,CAAC;QAE/C,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC,gBAAgB,CAAC,EAAE,IAAI,EAAE,iDAAiD,CAAC,CAAC;QACtG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,iCAAiC,CAAC,CAAC;QAC7E,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,kCAAkC,CAAC,CAAC;IAChF,CAAC,CAAC,CAAC;AAEJ,CAAC,CAAC,CAAC;AAGH,QAAQ,CAAC,qBAAqB,EAAE;IAG/B,EAAE,CAAC,gEAAgE,EAAE;QAEpE,IAAM,CAAC,GAAG,IAAI,aAAG,CAAY,gBAAgB,CAAC,CAAC;QAE/C,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,EAAE,KAAK,EAAE,2DAA2D,CAAC,CAAC;QACvH,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,iCAAiC,CAAC,CAAC;QACnF,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,kCAAkC,CAAC,CAAC;IACtF,CAAC,CAAC,CAAC;AAEJ,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,eAAe,EAAE;IAGzB,EAAE,CAAC,iDAAiD,EAAE;QAErD,IAAM,CAAC,GAAG,IAAI,aAAG,CAAY,gBAAgB,CAAC,CAAC;QAC/C,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAC,GAAG,CAAC,CAAC,CAAC;QAEtB,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACzB,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QACnC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;QACrC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;AAEJ,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,kBAAkB,EAAE;IAG5B,EAAE,CAAC,iDAAiD,EAAE;QAErD,IAAM,CAAC,GAAG,IAAI,aAAG,CAAY,gBAAgB,CAAC,CAAC;QAC/C,CAAC,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC;QAEpC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACzB,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QAClC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;QACpC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,KAAK,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;AAEJ,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,cAAc,EAAE;IAGxB,EAAE,CAAC,iDAAiD,EAAE;QAErD,IAAM,CAAC,GAAG,IAAI,aAAG,CAAY,gBAAgB,CAAC,CAAC;QAC/C,IAAM,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;QAClB,CAAC,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC;QAEhC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,GAAC,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;QACrC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;AAEJ,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,wBAAwB,EAAE;IAGlC,EAAE,CAAC,uCAAuC,EAAE;QAE3C,IAAM,CAAC,GAAG,IAAI,aAAG,CAAY,gBAAgB,CAAC,CAAC;QAC/C,IAAM,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;QAClB,CAAC,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,CAAC;QAE1C,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,GAAC,CAAC,GAAC,CAAC,CAAC,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;QACrC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,CAAC;QAC1C,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QACnC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;AAEJ,CAAC,CAAC,CAAC","file":"Set.js","sourcesContent":["///<reference types=\"node\"/>\r\nimport * as assert from \"assert\";\r\nimport * as ICollectionTests from \"./ICollection\";\r\nimport Set from \"../../../../dist/commonjs/System/Collections/Set\";\r\nimport {Primitive} from \"../../../../dist/commonjs/System/Primitive\";\r\n\r\n\r\n//noinspection SpellCheckingInspection\r\nICollectionTests.Collection('Set<' + 'string>', new Set<string>(), [\r\n\t\"\",\r\n\t\"lorem\",\r\n\t\"ipsum\",\r\n\t\"dolem\"\r\n]);\r\n\r\nICollectionTests.Collection('Set<' + 'number>', new Set<number>(), [\r\n\t0,\r\n\t1,\r\n\t2,\r\n\t3,\r\n\t5,\r\n\t7,\r\n\t11,\r\n\t13\r\n]);\r\n\r\n\r\nICollectionTests.Collection('Set<' + 'Primitive>', new Set<Primitive>(), [\r\n\t0,\r\n\t1,\r\n\t2,\r\n\t3,\r\n\t5,\r\n\t7,\r\n\t11,\r\n\t13,\r\n\t\"\",\r\n\t\"0\",\r\n\t\"1\",\r\n\t\"2\",\r\n\t\"3\",\r\n\t\"5\",\r\n\t\"7\",\r\n\t\"11\",\r\n\t\"13\",\r\n\ttrue,\r\n\tfalse\r\n\r\n]);\r\n\r\nconst sourcePrimitives = [\r\n\t1, 2, 1, \"1\", true, false, \"hello\", \"hello\", \"hi\", true\r\n];\r\nconst subset = sourcePrimitives.slice(4);\r\nconst superset = sourcePrimitives.slice();\r\nsuperset.push(\"NO\");\r\nconst otherWithIntersect = [1, \"1\", 4000, \"goodbye\"];\r\n\r\n\r\nit(\"should not repeat entries\", ()=>\r\n{\r\n\tconst s = new Set<Primitive>(sourcePrimitives);\r\n\r\n\tassert.equal(s.count, 7);\r\n\r\n});\r\n\r\n\r\ndescribe(\".setEquals()\", ()=>\r\n{\r\n\r\n\tit(\"the current set should equal to the same set and not equal for different sets\", ()=>\r\n\t{\r\n\t\tconst s = new Set<Primitive>(sourcePrimitives);\r\n\t\tconst v = sourcePrimitives.slice();\r\n\t\tv[8] = \"hola\";\r\n\r\n\t\tassert.equal(s.setEquals(sourcePrimitives), true, \"Exact same set should be equal.\");\r\n\t\tassert.equal(s.setEquals(subset), false, \"Smaller set should not be equal.\");\r\n\t\tassert.equal(s.setEquals(superset), false, \"Larger set should not be a equal.\");\r\n\t\tassert.equal(s.setEquals(v), false, \"Similar set should not be a equal.\");\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".isSupersetOf()\", ()=>\r\n{\r\n\r\n\tit(\"the current set should be a super set of any equal or smaller set\", ()=>\r\n\t{\r\n\t\tconst s = new Set<Primitive>(sourcePrimitives);\r\n\r\n\t\tassert.equal(s.isSupersetOf(sourcePrimitives), true, \"Exact same set should be a superset and subset.\");\r\n\t\tassert.equal(s.isSupersetOf(subset), true, \"Smaller set should be a subset.\");\r\n\t\tassert.equal(s.isSupersetOf(superset), false, \"Larger set should not be a subset.\");\r\n\t});\r\n\r\n});\r\n\r\n\r\ndescribe(\".isProperSupersetOf()\", ()=>\r\n{\r\n\r\n\tit(\"the current set should be a super set of any smaller matching set\", ()=>\r\n\t{\r\n\t\tconst s = new Set<Primitive>(sourcePrimitives);\r\n\r\n\t\tassert.equal(s.isProperSupersetOf(sourcePrimitives), false, \"Exact same set should not be a proper superset or subset.\");\r\n\t\tassert.equal(s.isProperSupersetOf(subset), true, \"Smaller set should be a subset.\");\r\n\t\tassert.equal(s.isProperSupersetOf(superset), false, \"Larger set should not be a subset.\");\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".isSubsetOf()\", ()=>\r\n{\r\n\r\n\tit(\"the current set should be a sub set of any equal or larger matching set\", ()=>\r\n\t{\r\n\t\tconst s = new Set<Primitive>(sourcePrimitives);\r\n\r\n\t\tassert.equal(s.isSubsetOf(sourcePrimitives), true, \"Exact same set should be a superset and subset.\");\r\n\t\tassert.equal(s.isSubsetOf(subset), false, \"Smaller set should be a subset.\");\r\n\t\tassert.equal(s.isSubsetOf(superset), true, \"Larger set should be a superset.\");\r\n\t});\r\n\r\n});\r\n\r\n\r\ndescribe(\".isProperSubsetOf()\", ()=>\r\n{\r\n\r\n\tit(\"the current set should be a sub set of any larger matching set\", ()=>\r\n\t{\r\n\t\tconst s = new Set<Primitive>(sourcePrimitives);\r\n\r\n\t\tassert.equal(s.isProperSubsetOf(sourcePrimitives), false, \"Exact same set should not be a proper superset or subset.\");\r\n\t\tassert.equal(s.isProperSubsetOf(subset), false, \"Smaller set should be a subset.\");\r\n\t\tassert.equal(s.isProperSubsetOf(superset), true, \"Larger set should be a superset.\");\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".exceptWith()\", ()=>\r\n{\r\n\r\n\tit(\"should remove the specified items front the set\", ()=>\r\n\t{\r\n\t\tconst s = new Set<Primitive>(sourcePrimitives);\r\n\t\ts.exceptWith([1,\"1\"]);\r\n\r\n\t\tassert.equal(s.count, 5);\r\n\t\tassert.equal(s.contains(1), false);\r\n\t\tassert.equal(s.contains(\"1\"), false);\r\n\t\tassert.equal(s.contains(\"hello\"), true);\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".intersectWith()\", ()=>\r\n{\r\n\r\n\tit(\"should only leave the intersecting items behind\", ()=>\r\n\t{\r\n\t\tconst s = new Set<Primitive>(sourcePrimitives);\r\n\t\ts.intersectWith(otherWithIntersect);\r\n\r\n\t\tassert.equal(s.count, 2);\r\n\t\tassert.equal(s.contains(1), true);\r\n\t\tassert.equal(s.contains(\"1\"), true);\r\n\t\tassert.equal(s.contains(\"hello\"), false);\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".unionWith()\", ()=>\r\n{\r\n\r\n\tit(\"should only leave the intersecting items behind\", ()=>\r\n\t{\r\n\t\tconst s = new Set<Primitive>(sourcePrimitives);\r\n\t\tconst c = s.count;\r\n\t\ts.unionWith(otherWithIntersect);\r\n\r\n\t\tassert.equal(s.count, c+2);\r\n\t\tassert.equal(s.contains(4000), true);\r\n\t\tassert.equal(s.contains(\"goodbye\"), true);\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".symmetricExceptWith()\", ()=>\r\n{\r\n\r\n\tit(\"should only leave unique items behind\", ()=>\r\n\t{\r\n\t\tconst s = new Set<Primitive>(sourcePrimitives);\r\n\t\tconst c = s.count;\r\n\t\ts.symmetricExceptWith(otherWithIntersect);\r\n\r\n\t\tassert.equal(s.count, c-2+2);\r\n\t\tassert.equal(s.contains(4000), true);\r\n\t\tassert.equal(s.contains(\"goodbye\"), true);\r\n\t\tassert.equal(s.contains(1), false);\r\n\t\tassert.equal(s.contains(\"1\"), false);\r\n\t});\r\n\r\n});"]}