{"version":3,"sources":["System/Integer.ts"],"names":[],"mappings":"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","file":"Integer.js","sourcesContent":["///<reference types=\"node\"/>\r\nimport * as assert from \"assert\";\r\nimport \"mocha\";\r\nimport Integer from \"../../../dist/commonjs/System/Integer\";\r\n\r\n\r\nconst TEST_FLOAT = 10.915, TEST_INT = 10, MAX = 9007199254740991;\r\n\r\ndescribe('(value)', ()=>\r\n{\r\n\tit('should convert float number to integer without rounding', ()=>\r\n\t{\r\n\t\tassert.equal(\r\n\t\t\tInteger(TEST_FLOAT),\r\n\t\t\tTEST_INT);\r\n\t});\r\n});\r\n\r\ndescribe('.as32Bit(value)', ()=>\r\n{\r\n\tit('should convert float number to integer without rounding', ()=>\r\n\t{\r\n\t\tassert.equal(\r\n\t\t\tInteger.as32Bit(TEST_FLOAT),\r\n\t\t\tTEST_INT);\r\n\t});\r\n\r\n\tit('should throw not possible to convert', ()=>\r\n\t{\r\n\t\tassert.throws(()=>Integer.as32Bit(MAX));\r\n\t});\r\n});\r\n\r\ndescribe('.is(value)', ()=>\r\n{\r\n\tit('should detect a number that is not an integer', ()=>\r\n\t{\r\n\t\tfunction baseTests(fn:(n:number)=>boolean):void\r\n\t\t{\r\n\r\n\t\t\tassert.equal(\r\n\t\t\t\tfn(<any>\"1\"),\r\n\t\t\t\tfalse);\r\n\r\n\t\t\tassert.equal(\r\n\t\t\t\tfn(<any>\"test\"),\r\n\t\t\t\tfalse);\r\n\r\n\t\t\tassert.equal(\r\n\t\t\t\tfn(NaN),\r\n\t\t\t\tfalse);\r\n\r\n\t\t\tassert.equal(\r\n\t\t\t\tfn(Infinity),\r\n\t\t\t\tfalse);\r\n\r\n\t\t\tassert.equal(\r\n\t\t\t\tfn(-Infinity),\r\n\t\t\t\tfalse);\r\n\r\n\t\t\tassert.equal(\r\n\t\t\t\tfn(TEST_FLOAT),\r\n\t\t\t\tfalse);\r\n\r\n\t\t\tassert.equal(\r\n\t\t\t\tfn(-TEST_FLOAT),\r\n\t\t\t\tfalse);\r\n\t\t}\r\n\r\n\t\tbaseTests(Integer.is);\r\n\t\tbaseTests(Integer.is32Bit);\r\n\r\n\t\tassert.equal(\r\n\t\t\tInteger.is32Bit(Integer.MAX_32_BIT + 1),\r\n\t\t\tfalse);\r\n\t});\r\n\r\n\tit('should detect a number that is an integer', ()=>\r\n\t{\r\n\t\tfunction baseTests(fn:(n:number)=>boolean):void\r\n\t\t{\r\n\r\n\t\t\tassert.equal(\r\n\t\t\t\tfn(-0),\r\n\t\t\t\ttrue);\r\n\r\n\t\t\tassert.equal(\r\n\t\t\t\tfn(-TEST_INT),\r\n\t\t\t\ttrue);\r\n\r\n\t\t\tassert.equal(\r\n\t\t\t\tfn(TEST_INT),\r\n\t\t\t\ttrue);\r\n\r\n\t\t\tassert.equal(\r\n\t\t\t\tfn(Integer.MAX_32_BIT),\r\n\t\t\t\ttrue);\r\n\r\n\t\t\tassert.equal(\r\n\t\t\t\tfn(-Integer.MAX_32_BIT),\r\n\t\t\t\ttrue);\r\n\t\t}\r\n\r\n\t\tbaseTests(Integer.is);\r\n\t\tbaseTests(Integer.is32Bit);\r\n\r\n\t\tassert.equal(\r\n\t\t\tInteger.is(Integer.MAX_32_BIT + 1),\r\n\t\t\ttrue);\r\n\r\n\t\tassert.equal(\r\n\t\t\tInteger.is(-MAX),\r\n\t\t\ttrue);\r\n\r\n\t\tassert.equal(\r\n\t\t\tInteger.is(MAX),\r\n\t\t\ttrue);\r\n\r\n\t});\r\n});\r\n\r\n\r\ndescribe('.assert(value)', ()=>\r\n{\r\n\tit('should detect a number that is not an integer', ()=>\r\n\t{\r\n\t\tassert.throws(()=>\r\n\t\t{\r\n\t\t\tInteger.assert(TEST_FLOAT);\r\n\t\t});\r\n\t});\r\n\r\n\tit('should detect a number that is an integer', ()=>\r\n\t{\r\n\t\tassert.equal(\r\n\t\t\tInteger.assert(TEST_INT),\r\n\t\t\ttrue);\r\n\t});\r\n});\r\n\r\n"]}