{"version":3,"sources":["System/Observable/ObservableNodeBase.ts"],"names":[],"mappings":";;AAAA,4BAA4B;AAC5B,+BAAiC;AACjC,qGAAgG;AAGhG,EAAE,CAAC,6CAA6C,EAAE;IAEjD,IAAM,GAAG,GAAG,KAAK,CAAC;IAClB,IAAM,CAAC,GAAG,IAAI,4BAAkB,EAAU,CAAC;IAE3C,IAAI,SAAS,GAAG,KAAK,CAAC;IACtB,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,IAAI,EAAE,GAAG,CAAC,CAAC,SAAS,CACnB,UAAA,CAAC;QAEA,MAAM,CAAC,KAAK,CAAC,SAAS,EAAC,KAAK,CAAC,CAAC;QAC9B,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACpB,CAAC,EACD,UAAA,GAAG;QAEF,MAAM,CAAC,KAAK,CAAC,SAAS,EAAC,KAAK,CAAC,CAAC;QAC9B,MAAM,CAAC,KAAK,CAAC,GAAG,EAAC,GAAG,CAAC,CAAC;IACvB,CAAC,CACD,CAAC;IACF,CAAC,CAAC,SAAS,CAAC;QACX,MAAM,EAAE,UAAA,CAAC;YAER,MAAM,CAAC,KAAK,CAAC,SAAS,EAAC,KAAK,CAAC,CAAC;YAC9B,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QACxB,CAAC;QACD,WAAW,EAAC;YAEX,SAAS,GAAG,IAAI,CAAC;QAClB,CAAC;KACD,CAAC,CAAC;IAEH,CAAC,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,CAAC;IAClB,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAEf,EAAE,CAAC,OAAO,EAAE,CAAC;IAEb,MAAM,CAAC,KAAK,CAAC,SAAS,EAAC,KAAK,CAAC,CAAC;IAC9B,CAAC,CAAC,WAAW,EAAE,CAAC;IAChB,MAAM,CAAC,KAAK,CAAC,SAAS,EAAC,IAAI,CAAC,CAAC;IAE7B,CAAC,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,CAAC;IAClB,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAIf,CAAC,CAAC,OAAO,EAAE,CAAC;IAEZ,MAAM,CAAC,MAAM,CAAC;QAEb,CAAC,CAAC,SAAS,CAAC;YAEX,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAGH,MAAM,CAAC,YAAY,CAAC;QAEnB,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACb,CAAC,CAAC,CAAC;AAGJ,CAAC,CAAC,CAAC","file":"ObservableNodeBase.js","sourcesContent":["///<reference types=\"node\"/>\r\nimport * as assert from \"assert\";\r\nimport ObservableNodeBase from \"../../../../dist/commonjs/System/Observable/ObservableNodeBase\";\r\n\r\n\r\nit(\"should receive signals only when subscribed\", ()=>\r\n{\r\n\tconst ERR = \"err\";\r\n\tconst o = new ObservableNodeBase<number>();\r\n\r\n\tlet completed = false;\r\n\tlet count = 0;\r\n\tlet s1 = o.subscribe(\r\n\t\tv=>\r\n\t\t{\r\n\t\t\tassert.equal(completed,false);\r\n\t\t\tassert.equal(v, 1);\r\n\t\t},\r\n\t\terr=>\r\n\t\t{\r\n\t\t\tassert.equal(completed,false);\r\n\t\t\tassert.equal(err,ERR);\r\n\t\t}\r\n\t);\r\n\to.subscribe({\r\n\t\tonNext: v=>\r\n\t\t{\r\n\t\t\tassert.equal(completed,false);\r\n\t\t\tassert.equal(v, count);\r\n\t\t},\r\n\t\tonCompleted:()=>\r\n\t\t{\r\n\t\t\tcompleted = true;\r\n\t\t}\r\n\t});\r\n\r\n\to.onNext(++count);\r\n\to.onError(ERR);\r\n\r\n\ts1.dispose();\r\n\r\n\tassert.equal(completed,false);\r\n\to.onCompleted();\r\n\tassert.equal(completed,true);\r\n\r\n\to.onNext(++count);\r\n\to.onError(ERR);\r\n\r\n\r\n\r\n\to.dispose();\r\n\r\n\tassert.throws(()=>\r\n\t{\r\n\t\to.subscribe(()=>\r\n\t\t{\r\n\t\t\tassert.ok(false);\r\n\t\t});\r\n\t});\r\n\r\n\r\n\tassert.doesNotThrow(()=>\r\n\t{\r\n\t\to.onNext(0);\r\n\t});\r\n\r\n\r\n});\r\n"]}