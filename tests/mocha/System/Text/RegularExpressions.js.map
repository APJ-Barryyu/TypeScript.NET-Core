{"version":3,"sources":["System/Text/RegularExpressions.ts"],"names":[],"mappings":"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","file":"RegularExpressions.js","sourcesContent":["///<reference types=\"node\"/>\r\nimport * as assert from \"assert\";\r\nimport RegexMatchEnumerator from \"../../../../dist/commonjs/System/Text/RegexMatchEnumerator\";\r\nimport Regex, {Match} from \"../../../../dist/commonjs/System/Text/RegularExpressions\";\r\n\r\nconst str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r\nconst regex = new Regex(\"(?<\"+\"first>[A-E]+)\", [\"i\"]);\r\n//noinspection JSUnusedLocalSymbols\r\nconst regex2 = new Regex(/([A-E]+)/im);\r\n//noinspection JSUnusedLocalSymbols\r\nconst regex3 = new Regex(/([A-E]+)/);\r\nconst regex4 = new Regex(/A\tB C D  E/,\"i\",\"w\");\r\nconst pattern = \"([A-E]+)\";\r\n\r\ndescribe(\"Regex\", ()=>\r\n{\r\n\r\n\tdescribe(\"new\", ()=>\r\n\t{\r\n\t\tit(\"should throw\", ()=>\r\n\t\t{\r\n\t\t\tassert.throws(()=>new Regex(<any>null));\r\n\t\t});\r\n\t});\r\n\r\n\tdescribe(\".isMatch(input)\", ()=>\r\n\t{\r\n\r\n\t\tit(\"should indicate true for match\", ()=>\r\n\t\t{\r\n\t\t\tassert.ok(regex.isMatch(str));\r\n\t\t\tassert.ok(Regex.isMatch(str, pattern, [\"i\"]));\r\n\t\t});\r\n\r\n\t\tit(\"should indicate false for non-match\", ()=>\r\n\t\t{\r\n\t\t\tassert.ok(!regex.isMatch(\"ZYXWV\"));\r\n\t\t\tassert.ok(!Regex.isMatch(\"ZYXWV\", pattern, [\"i\"]));\r\n\t\t});\r\n\r\n\t});\r\n\r\n\tdescribe(\".match(input)\", ()=>\r\n\t{\r\n\r\n\t\tit(\"should match correctly\", ()=>\r\n\t\t{\r\n\r\n\t\t\tlet m = regex.match(str);\r\n\t\t\tassert.equal(m.value, \"ABCDE\");\r\n\t\t\tassert.equal(m.index, 0);\r\n\t\t\tassert.equal(m.namedGroups[\"first\"].value, \"ABCDE\");\r\n\r\n\t\t\tm = regex.match(str, 20);\r\n\t\t\tassert.equal(m.value, \"abcde\");\r\n\t\t\tassert.equal(m.index, 26);\r\n\t\t\tassert.equal(m.namedGroups[\"first\"].value, \"abcde\");\r\n\t\t});\r\n\r\n\t});\r\n\r\n\tdescribe(\".matches(input)\", ()=>\r\n\t{\r\n\r\n\t\tit(\"should capture all instances\", ()=>\r\n\t\t{\r\n\t\t\tfunction check(m:Match[]):void {\r\n\t\t\t\tassert.equal(m.length, 2);\r\n\t\t\t\tassert.equal(m[0].value, \"ABCDE\");\r\n\t\t\t\tassert.equal(m[0].index, 0);\r\n\t\t\t\tassert.equal(m[1].value, \"abcde\");\r\n\t\t\t\tassert.equal(m[1].index, 26);\r\n\t\t\t}\r\n\t\t\tcheck(regex.matches(str));\r\n\t\t\tcheck(regex4.matches(str));\r\n\t\t});\r\n\r\n\t});\r\n\r\n\tdescribe(\".replace(input, x)\", ()=>\r\n\t{\r\n\r\n\t\tit(\"should replace requested instances\", ()=>\r\n\t\t{\r\n\t\t\t//noinspection SpellCheckingInspection\r\n\t\t\tassert.equal(regex.replace(str, \"XXX\"), \"XXXFGHIJKLMNOPQRSTUVWXYZXXXfghijklmnopqrstuvwxyz\");\r\n\t\t\tassert.equal(Regex.replace(str, pattern, \"XXX\",['i']), \"XXXFGHIJKLMNOPQRSTUVWXYZXXXfghijklmnopqrstuvwxyz\");\r\n\t\t\t//noinspection SpellCheckingInspection\r\n\t\t\tassert.equal(regex.replace(str, \"\"), \"FGHIJKLMNOPQRSTUVWXYZfghijklmnopqrstuvwxyz\");\r\n\t\t\tassert.equal(regex.replace(str, <any>null), str);\r\n\t\t\t//noinspection SpellCheckingInspection\r\n\t\t\tassert.equal(regex.replace(str, ()=>\"*\"), \"*FGHIJKLMNOPQRSTUVWXYZ*fghijklmnopqrstuvwxyz\");\r\n\t\t\tassert.equal(regex.replace(str, (x)=>x.value+\"*\"), \"ABCDE*FGHIJKLMNOPQRSTUVWXYZabcde*fghijklmnopqrstuvwxyz\");\r\n\t\t\tassert.equal(regex.replace(str, (x,i)=>i), \"0FGHIJKLMNOPQRSTUVWXYZ1fghijklmnopqrstuvwxyz\");\r\n\t\t});\r\n\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\"RegexMatchEnumerator\",()=>{\r\n\tit(\"should enumerate properly\",()=>{\r\n\t\tconst m = RegexMatchEnumerator(str, regex);\r\n\t\tfunction check(v:Match, value:string, index:number):void{\r\n\t\t\tassert.equal(v.value, value);\r\n\t\t\tassert.equal(v.index, index);\r\n\t\t}\r\n\t\t//noinspection SpellCheckingInspection\r\n\t\tcheck(m.nextValue()!,\"ABCDE\",0);\r\n\t\t//noinspection SpellCheckingInspection\r\n\t\tcheck(m.nextValue()!,\"abcde\",26);\r\n\t\tassert.ok(!m.moveNext());\r\n\t})\r\n});\r\n"]}