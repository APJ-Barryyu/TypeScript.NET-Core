{"version":3,"sources":["System/Text/Utility.ts"],"names":[],"mappings":";;AAAA,4BAA4B;AAC5B,+BAAiC;AACjC,2EAA6E;AAE7E,IAAM,EAAE,GAAG,QAAQ,CAAC;AACpB,IAAM,EAAE,GAAG,cAAc,CAAC;AAC1B,QAAQ,CAAC,SAAS,EAAC;IAClB,EAAE,CAAC,8DAA8D,EAAC;QACjE,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,EAAC,IAAI,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,4EAA4E,EAAC;QAC/E,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,EAAC,QAAQ,EAAC,IAAI,CAAC,EAAC,IAAI,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2EAA2E,EAAC;QAC9E,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,EAAC,CAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,GAAG,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC;IACpE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uDAAuD,EAAC;QAC1D,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,EAAC,EAAE,CAAC,EAAC,EAAE,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,wBAAwB,EAAC;IACjC,EAAE,CAAC,qCAAqC,EAAC;QACxC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,CAC9B,gDAAgD,EAAC,QAAQ,EAAC,CAAC,CAAC,EAC5D,4CAA4C,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,0BAA0B,EAAC;IACnC,EAAE,CAAC,qCAAqC,EAAC;QACxC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,CAChC,qDAAqD,EAAC,EAAC,IAAI,EAAC,QAAQ,EAAC,IAAI,EAAC,QAAQ,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EACzF,iEAAiE,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC","file":"Utility.js","sourcesContent":["///<reference types=\"node\"/>\r\nimport * as assert from \"assert\";\r\nimport * as TextUtility from \"../../../../dist/commonjs/System/Text/Utility\";\r\n\r\nconst s1 = \"\t HI  \";\r\nconst s2 = \".-.-xHIX//\\\\\";\r\ndescribe('.trim()',()=>{\r\n\tit(\"should leave a string without leading or trailing whitespace\",()=>{\r\n\t\tassert.equal(TextUtility.trim(s1),\"HI\");\r\n\t});\r\n\tit(\"should leave a string without leading or trailing trim characters (string)\",()=>{\r\n\t\tassert.equal(TextUtility.trim(s2,\".-/\\\\x\",true),\"HI\");\r\n\t});\r\n\r\n\tit(\"should leave a string without leading or trailing trim characters (array)\",()=>{\r\n\t\tassert.equal(TextUtility.trim(s2,[\".\",\"-\",\"/\",\"\\\\\",\"x\",\"X\"]),\"HI\");\r\n\t});\r\n\r\n\tit(\"should leave a string untouched if no trim characters\",()=>{\r\n\t\tassert.equal(TextUtility.trim(s2,\"\"),s2);\r\n\t});\r\n});\r\n\r\ndescribe(\".format(source,..args)\",()=>{\r\n\tit(\"should replace contents of a string\",()=>{\r\n\t\tassert.equal(TextUtility.format(\r\n\t\t\t\"Hello, my name is {0} and I'm number {length}.\",\"George\",2),\r\n\t\t\t\"Hello, my name is George and I'm number 2.\");\r\n\t});\r\n});\r\n\r\ndescribe(\".supplant(source,..args)\",()=>{\r\n\tit(\"should replace contents of a string\",()=>{\r\n\t\tassert.equal(TextUtility.supplant(\r\n\t\t\t\"Hello, my name is {name} and I like {like}. {x} {y}\",{name:\"George\",like:\"cheese\",x:{}}),\r\n\t\t\t\"Hello, my name is George and I like cheese. [object Object] {y}\");\r\n\t});\r\n});"]}