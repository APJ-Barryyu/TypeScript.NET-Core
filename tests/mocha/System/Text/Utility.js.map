{"version":3,"sources":["System/Text/Utility.ts"],"names":[],"mappings":";;AAAA,4BAA4B;AAC5B,+BAAiC;AACjC,2EAA6E;AAE7E,IAAM,EAAE,GAAG,QAAQ,CAAC;AACpB,IAAM,EAAE,GAAG,cAAc,CAAC;AAC1B,QAAQ,CAAC,SAAS,EAAE;IACnB,EAAE,CAAC,8DAA8D,EAAE;QAClE,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,4EAA4E,EAAE;QAChF,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2EAA2E,EAAE;QAC/E,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IAC3E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uDAAuD,EAAE;QAC3D,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,wBAAwB,EAAE;IAClC,EAAE,CAAC,qCAAqC,EAAE;QACzC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,CAC9B,gDAAgD,EAAE,QAAQ,EAAE,CAAC,CAAC,EAC9D,4CAA4C,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,0BAA0B,EAAE;IACpC,EAAE,CAAC,qCAAqC,EAAE;QACzC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,CAChC,qDAAqD,EAAE;YACtD,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,QAAQ;YACd,CAAC,EAAE,EAAE;SACL,CAAC,EACF,iEAAiE,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,6BAA6B,EAAE;IACvC,EAAE,CAAC,oCAAoC,EAAE;QACxC,OAAA,MAAM,CAAC,EAAE,CAAC,WAAW,CAAC,UAAU,CAC/B,mBAAmB,EACnB,OAAO,CAAC,CAAC;IAFV,CAEU,CACV,CAAC;IACF,EAAE,CAAC,wCAAwC,EAAE;QAC5C,OAAA,MAAM,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,UAAU,CAChC,mBAAmB,EACnB,IAAI,CAAC,CAAC;IAFP,CAEO,CACP,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,2BAA2B,EAAE;IACrC,EAAE,CAAC,oCAAoC,EAAE;QACxC,OAAA,MAAM,CAAC,EAAE,CAAC,WAAW,CAAC,QAAQ,CAC7B,mBAAmB,EACnB,IAAI,CAAC,CAAC;IAFP,CAEO,CACP,CAAC;IACF,EAAE,CAAC,wCAAwC,EAAE;QAC5C,MAAM,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,QAAQ,CAC9B,mBAAmB,EACnB,OAAO,CAAC,CAAC,CAAC;QAEX,MAAM,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,QAAQ,CAC9B,mBAAmB,EACnB,KAAK,CAAC,CAAC,CAAA;IACR,CAAC,CACD,CAAC;AACH,CAAC,CAAC,CAAC","file":"Utility.js","sourcesContent":["///<reference types=\"node\"/>\r\nimport * as assert from \"assert\";\r\nimport * as TextUtility from \"../../../../dist/commonjs/System/Text/Utility\";\r\n\r\nconst s1 = \"\t HI  \";\r\nconst s2 = \".-.-xHIX//\\\\\";\r\ndescribe('.trim()', () => {\r\n\tit(\"should leave a string without leading or trailing whitespace\", () => {\r\n\t\tassert.equal(TextUtility.trim(s1), \"HI\");\r\n\t});\r\n\tit(\"should leave a string without leading or trailing trim characters (string)\", () => {\r\n\t\tassert.equal(TextUtility.trim(s2, \".-/\\\\x\", true), \"HI\");\r\n\t});\r\n\r\n\tit(\"should leave a string without leading or trailing trim characters (array)\", () => {\r\n\t\tassert.equal(TextUtility.trim(s2, [\".\", \"-\", \"/\", \"\\\\\", \"x\", \"X\"]), \"HI\");\r\n\t});\r\n\r\n\tit(\"should leave a string untouched if no trim characters\", () => {\r\n\t\tassert.equal(TextUtility.trim(s2, \"\"), s2);\r\n\t});\r\n});\r\n\r\ndescribe(\".format(source,..args)\", () => {\r\n\tit(\"should replace contents of a string\", () => {\r\n\t\tassert.equal(TextUtility.format(\r\n\t\t\t\"Hello, my name is {0} and I'm number {length}.\", \"George\", 2),\r\n\t\t\t\"Hello, my name is George and I'm number 2.\");\r\n\t});\r\n});\r\n\r\ndescribe(\".supplant(source,..args)\", () => {\r\n\tit(\"should replace contents of a string\", () => {\r\n\t\tassert.equal(TextUtility.supplant(\r\n\t\t\t\"Hello, my name is {name} and I like {like}. {x} {y}\", {\r\n\t\t\t\tname: \"George\",\r\n\t\t\t\tlike: \"cheese\",\r\n\t\t\t\tx: {}\r\n\t\t\t}),\r\n\t\t\t\"Hello, my name is George and I like cheese. [object Object] {y}\");\r\n\t});\r\n});\r\n\r\ndescribe(\".startsWith(source,pattern)\", () => {\r\n\tit(\"should detect pattern at beginning\", () =>\r\n\t\tassert.ok(TextUtility.startsWith(\r\n\t\t\t\"Hello, my name is\",\r\n\t\t\t\"Hello\"))\r\n\t);\r\n\tit(\"should not detect pattern at beginning\", () =>\r\n\t\tassert.ok(!TextUtility.startsWith(\r\n\t\t\t\"Hello, my name is\",\r\n\t\t\t\"is\"))\r\n\t);\r\n});\r\n\r\ndescribe(\".endsWith(source,pattern)\", () => {\r\n\tit(\"should detect pattern at beginning\", () =>\r\n\t\tassert.ok(TextUtility.endsWith(\r\n\t\t\t\"Hello, my name is\",\r\n\t\t\t\"is\"))\r\n\t);\r\n\tit(\"should not detect pattern at beginning\", () => {\r\n\t\tassert.ok(!TextUtility.endsWith(\r\n\t\t\t\"Hello, my name is\",\r\n\t\t\t\"Hello\"));\r\n\r\n\t\tassert.ok(!TextUtility.endsWith(\r\n\t\t\t\"Hello, my name is\",\r\n\t\t\t\"is \"))\r\n\t\t}\r\n\t);\r\n});"]}