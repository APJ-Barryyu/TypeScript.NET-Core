{"version":3,"sources":["System/Diagnostics/Stopwatch.ts"],"names":[],"mappings":";;AAAA,4BAA4B;AAC5B,+BAAiC;AACjC,oFAA+E;AAG/E,EAAE,CAAC,0BAA0B,EAAC;IAC7B,MAAM,CAAC,EAAE,CAAC,mBAAS,CAAC,OAAO,CAAC;QAC3B,GAAG,CAAA,CAAC,IAAI,CAAC,GAAG,CAAC,EAAC,CAAC,GAAC,MAAM,EAAC,CAAC,EAAE,EAAC,CAAC;YAC3B,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;QAChB,CAAC;IACF,CAAC,CAAC,CAAC,YAAY,GAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,kEAAkE,EAAC;IAErE,MAAM,CAAC,EAAE,CAAC,mBAAS,CAAC,wBAAwB,EAAE,GAAC,CAAC,CAAC,CAAC;IAClD,IAAI,EAAE,GAAG,IAAI,mBAAS,EAAE,CAAC;IACzB,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,YAAY,EAAC,CAAC,CAAC,CAAC;IACxC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,YAAY,EAAC,CAAC,CAAC,CAAC;IACtC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,UAAU,CAAC,YAAY,EAAC,CAAC,CAAC,CAAC;IAC3C,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,sBAAsB,EAAC,CAAC,CAAC,CAAC;IAC1C,EAAE,GAAG,mBAAS,CAAC,QAAQ,EAAE,CAAC;IAC1B,EAAE,CAAC,KAAK,EAAE,CAAC;IACX,EAAE,CAAC,GAAG,EAAE,CAAC;IACT,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,mBAAmB,IAAE,CAAC,CAAC,CAAC;IACrC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,YAAY,IAAE,CAAC,CAAC,CAAC;IACzC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;IACxB,EAAE,CAAC,IAAI,EAAE,CAAC;IACV,EAAE,CAAC,IAAI,EAAE,CAAC;IACV,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;IACzB,EAAE,CAAC,KAAK,EAAE,CAAC;IACX,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;IACxB,EAAE,CAAC,KAAK,EAAE,CAAC;IACX,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC","file":"Stopwatch.js","sourcesContent":["///<reference types=\"node\"/>\r\nimport * as assert from \"assert\";\r\nimport Stopwatch from \"../../../../dist/commonjs/System/Diagnostics/Stopwatch\";\r\n\r\n\r\nit(\"should measure a closure\",()=>{\r\n\tassert.ok(Stopwatch.measure(()=>{\r\n\t\tfor(let i = 0;i<100000;i++){\r\n\t\t\tnew Array(100);\r\n\t\t}\r\n\t}).milliseconds>0);\r\n});\r\n\r\nit(\"should start, stop, and reset with isRunning correctly reflected\",()=>\r\n{\r\n\tassert.ok(Stopwatch.getTimestampMilliseconds()>0);\r\n\tlet sw = new Stopwatch();\r\n\tassert.equal(sw.elapsed.milliseconds,0);\r\n\tassert.equal(sw.lap().milliseconds,0);\r\n\tassert.equal(sw.currentLap.milliseconds,0);\r\n\tassert.equal(sw.currentLapMilliseconds,0);\r\n\tsw = Stopwatch.startNew();\r\n\tsw.start();\r\n\tsw.lap();\r\n\tassert.ok(sw.elapsedMilliseconds>=0);\r\n\tassert.ok(sw.currentLap.milliseconds>=0);\r\n\tassert.ok(sw.isRunning);\r\n\tsw.stop();\r\n\tsw.stop();\r\n\tassert.ok(!sw.isRunning);\r\n\tsw.start();\r\n\tassert.ok(sw.isRunning);\r\n\tsw.reset();\r\n\tassert.ok(!sw.isRunning);\r\n});\r\n"]}