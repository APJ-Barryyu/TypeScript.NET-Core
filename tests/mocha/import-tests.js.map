{"version":3,"sources":["import-tests.ts"],"names":[],"mappings":";;AAAA,uBAAyB;AAEzB,IAAM,IAAI,GAAG,gBAAgB,CAAC;AAE9B,oBAAoB,IAAW,EAAE,GAAW;IAE3C,MAAM,CAAC,EAAE;SACP,WAAW,CAAC,IAAI,CAAC;SACjB,MAAM,CAAC,UAAC,IAAI;QACb,OAAA,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAE,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;eACtD,EAAE,CAAC,QAAQ,CAAC,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC,MAAM,EAAE;IAD1C,CAC0C,CAAC,CAAC;AAC9C,CAAC;AAED,0BAA0B,IAAW;IAEpC,MAAM,CAAC,EAAE;SACP,WAAW,CAAC,IAAI,CAAC;SACjB,MAAM,CAAC,UAAC,IAAI,IAAG,OAAA,EAAE,CAAC,QAAQ,CAAC,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC,WAAW,EAAE,EAA5C,CAA4C,CAAC,CAAC;AAChE,CAAC;AAED,yBAAyB,IAAgB,EAAE,WAA2B,EAAE,IAAgB;IAA/D,qBAAA,EAAA,SAAgB;IAAE,4BAAA,EAAA,mBAA2B;IAAE,qBAAA,EAAA,SAAgB;IAEvF,IAAM,OAAO,GAAG,IAAI,GAAG,IAAI,CAAC;IAC5B,EAAE,CAAA,CAAC,WAAW,CAAC;QAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACrC,gBAAgB,CAAC,IAAI,GAAG,OAAO,CAAC;SAC9B,IAAI,EAAE;SACN,OAAO,CAAC,UAAC,OAAO;QAEhB,QAAQ,CAAC,OAAO,GAAG,GAAG,EAAE;YAEvB,eAAe,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,GAAG,GAAG,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEJ,EAAE,CAAA,CAAC,WAAW,CAAC,CACf,CAAC;QACA,IAAM,KAAK,GAAG,UAAU,CAAC,IAAI,GAAG,OAAO,EAAE,KAAK,CAAC,EAAE,OAAK,GAAG,KAAK,CAAC,MAAM,CAAC;QAEtE,KAAK;aACH,IAAI,EAAE;aACN,OAAO,CAAC,UAAC,QAAQ;YAEjB,IAAM,QAAQ,GAAG,OAAO,GAAG,GAAG,GAAG,QAAQ,CAAC;YAC1C,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;YAE3B,IAAM,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAE3C,IAAM,CAAC,GAAG;gBAET,OAAO,CAAC,IAAI,GAAG,QAAQ,CAAC,CAAC;YAC1B,CAAC,CAAC;YAEF,kDAAkD;YAClD,EAAE,CAAA,CAAC,OAAK,IAAE,CAAC,IAAI,IAAI,IAAE,IAAI,CAAC;gBAAC,CAAC,EAAE,CAAC;YAC/B,IAAI;gBAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAExB,CAAC,CAAC,CAAC;IACL,CAAC;AAEF,CAAC;AACD,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;AAChC,eAAe,EAAE,CAAC","file":"import-tests.js","sourcesContent":["import * as fs from \"fs\";\r\n\r\nconst root = \"./tests/mocha/\";\r\n\r\nfunction getFilesAt(path:string, ext?:string):string[]\r\n{\r\n\treturn fs\r\n\t\t.readdirSync(path)\r\n\t\t.filter((name)=>\r\n\t\t(!ext || name.lastIndexOf(ext)==name.length - ext.length)\r\n\t\t&& fs.statSync(path + '/' + name).isFile());\r\n}\r\n\r\nfunction getDirectoriesAt(path:string):string[]\r\n{\r\n\treturn fs\r\n\t\t.readdirSync(path)\r\n\t\t.filter((name)=>fs.statSync(path + '/' + name).isDirectory());\r\n}\r\n\r\nfunction importRecursive(path:string = \"\", importFiles:boolean = false, base:string = \"\")\r\n{\r\n\tconst dirPath = base + path;\r\n\tif(importFiles) console.log(dirPath);\r\n\tgetDirectoriesAt(root + dirPath)\r\n\t\t.sort()\r\n\t\t.forEach((dirname)=>\r\n\t\t{\r\n\t\t\tdescribe(dirname + '/', ()=>\r\n\t\t\t{\r\n\t\t\t\timportRecursive(dirname, true, dirPath + '/');\r\n\t\t\t});\r\n\t\t});\r\n\r\n\tif(importFiles)\r\n\t{\r\n\t\tconst files = getFilesAt(root + dirPath, '.js'), count = files.length;\r\n\r\n\t\tfiles\r\n\t\t\t.sort()\r\n\t\t\t.forEach((filename)=>\r\n\t\t\t{\r\n\t\t\t\tconst filePath = dirPath + '/' + filename;\r\n\t\t\t\tconsole.log(\" \", filename);\r\n\r\n\t\t\t\tconst name = filename.replace(/\\.js$/, '');\r\n\r\n\t\t\t\tconst i = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\trequire('./' + filePath);\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Allows for simple default instead of recursive.\r\n\t\t\t\tif(count==1 && name==path) i();\r\n\t\t\t\telse describe(name, i);\r\n\r\n\t\t\t});\r\n\t}\r\n\r\n}\r\nconsole.log(\"Importing Tests:\");\r\nimportRecursive();\r\n"]}