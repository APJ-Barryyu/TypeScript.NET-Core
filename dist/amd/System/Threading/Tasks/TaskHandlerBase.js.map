{"version":3,"sources":["System/Threading/Tasks/TaskHandlerBase.js","System/Threading/Tasks/TaskHandlerBase.ts"],"names":["define","require","exports","DisposableBase_1","extends_1","Object","defineProperty","value","__extends","NAME","TaskHandlerBase","_super","_this","call","this","_timeoutId","_status","prototype","get","enumerable","configurable","start","defer","throwIfDisposed","cancel","isFinite","setTimeout","_handler","runSynchronously","getStatus","d","_onExecute","ex","_onDispose","id","clearTimeout","DisposableBase"],"mappings":";;;;AAIAA,QAAQ,UAAW,UAAW,kCAAmC,oBAAqB,SAAUC,EAASC,EAASC,EAAkBC,GAChI,YACAC,QAAOC,eAAeJ,EAAS,cAAgBK,OAAO,GCI1D,IAAMC,GAAYJ,EAAAA,WAEZK,EAAO,kBAIbC,EAAA,SAAAC,GAIC,QAAAD,KAAA,GAAAE,GAECD,EAAAE,KAAAC,KAAML,IAAKK,IDHD,OCIVF,GAAKG,WAAa,KAClBH,EAAKI,QAAO,EDLKJ,ECoFnB,MAvF8CJ,GAAAE,EAAAC,GAa7CN,OAAAC,eAAII,EAAAO,UAAA,eDPOC,ICOX,WAEC,QAASJ,KAAKC,YDNJI,YAAY,EACZC,cAAc,ICYzBV,EAAAO,UAAAI,MAAA,SAAMC,GAAA,SAAAA,IAAAA,EAAA,GAELR,KAAKS,kBAELT,KAAKU,SACLV,KAAKE,QAAO,EACPM,EAAM,IAAIA,EAAQ,GACpBG,SAAcH,KAChBR,KAAKC,WAAaW,WAAWhB,EAAgBiB,SAAUL,EAAOR,QAGhEJ,EAAAO,UAAAW,iBAAA,WAECd,KAAKS,kBACLb,EAAgBiB,SAASb,OAGhBJ,EAAAO,UAAAY,UAAV,WAEC,MAAOf,MAAKE,SAGbX,OAAAC,eAAII,EAAAO,UAAA,UDVOC,ICUX,WAEC,MAAOJ,MAAKe,aDTFV,YAAY,EACZC,cAAc,ICYVV,EAAAiB,SAAf,SAAwBG,GAEvBA,EAAEN,SACFM,EAAEd,QAAO,CACT,KAECc,EAAEC,aACFD,EAAEd,QAAO,EAEV,MAAMgB,GAELF,EAAEd,QAAO,IAMDN,EAAAO,UAAAgB,WAAV,WAECnB,KAAKU,SACCV,KAAME,QAAU,MAGvBN,EAAAO,UAAAO,OAAA,WAEC,GAAMU,GAAKpB,KAAKC,UAChB,SAAGmB,IAEFC,aAAaD,GACbpB,KAAKC,WAAa,KAClBD,KAAKE,QAAO,GACL,IAMVN,GAvF8CP,EAAAiC,eAAxBlC,GAAAQ,gBAAAA,EAyFtBR,EAAAA,WAAeQ","file":"TaskHandlerBase.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\ndefine([\"require\", \"exports\", \"../../Disposable/DisposableBase\", \"../../../extends\"], function (require, exports, DisposableBase_1, extends_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    // noinspection JSUnusedLocalSymbols\n    var __extends = extends_1.default;\n    var NAME = \"TaskHandlerBase\";\n    /**\n     * A simple class for handling potentially repeated executions either deferred or immediate.\n     */\n    var TaskHandlerBase = /** @class */ (function (_super) {\n        __extends(TaskHandlerBase, _super);\n        function TaskHandlerBase() {\n            var _this = _super.call(this, NAME) || this;\n            _this._timeoutId = null;\n            _this._status = 0 /* Created */;\n            return _this;\n        }\n        Object.defineProperty(TaskHandlerBase.prototype, \"isScheduled\", {\n            get: function () {\n                return !!this._timeoutId;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Schedules/Reschedules triggering the task.\n         * @param defer Optional time to wait until triggering.\n         */\n        TaskHandlerBase.prototype.start = function (defer) {\n            if (defer === void 0) { defer = 0; }\n            this.throwIfDisposed();\n            this.cancel();\n            this._status = 1 /* WaitingToRun */;\n            if (!(defer > 0))\n                defer = 0; // A negation is used to catch edge cases.\n            if (isFinite(defer))\n                this._timeoutId = setTimeout(TaskHandlerBase._handler, defer, this);\n        };\n        TaskHandlerBase.prototype.runSynchronously = function () {\n            this.throwIfDisposed();\n            TaskHandlerBase._handler(this);\n        };\n        TaskHandlerBase.prototype.getStatus = function () {\n            return this._status;\n        };\n        Object.defineProperty(TaskHandlerBase.prototype, \"status\", {\n            get: function () {\n                return this.getStatus();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        // Use a static function here to avoid recreating a new function every time.\n        TaskHandlerBase._handler = function (d) {\n            d.cancel();\n            d._status = 2 /* Running */;\n            try {\n                d._onExecute();\n                d._status = 3 /* RanToCompletion */;\n            }\n            catch (ex) {\n                d._status = 5 /* Faulted */;\n            }\n        };\n        TaskHandlerBase.prototype._onDispose = function () {\n            this.cancel();\n            this._status = null;\n        };\n        TaskHandlerBase.prototype.cancel = function () {\n            var id = this._timeoutId;\n            if (id) {\n                clearTimeout(id);\n                this._timeoutId = null;\n                this._status = 4 /* Cancelled */;\n                return true;\n            }\n            return false;\n        };\n        return TaskHandlerBase;\n    }(DisposableBase_1.DisposableBase));\n    exports.TaskHandlerBase = TaskHandlerBase;\n    exports.default = TaskHandlerBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {DisposableBase} from \"../../Disposable/DisposableBase\";\r\nimport {ICancellable} from \"../ICancellable\";\r\nimport {TaskStatus} from \"./TaskStatus\";\r\nimport __extendsImport from \"../../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst NAME = \"TaskHandlerBase\";\r\n/**\r\n * A simple class for handling potentially repeated executions either deferred or immediate.\r\n */\r\nexport abstract class TaskHandlerBase extends DisposableBase implements ICancellable\r\n{\r\n\tprivate _status:TaskStatus;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(NAME);\r\n\t\tthis._timeoutId = null;\r\n\t\tthis._status = TaskStatus.Created\r\n\t}\r\n\r\n\tprivate _timeoutId:any;\r\n\r\n\tget isScheduled():boolean\r\n\t{\r\n\t\treturn !!this._timeoutId;\r\n\t}\r\n\r\n\t/**\r\n\t * Schedules/Reschedules triggering the task.\r\n\t * @param defer Optional time to wait until triggering.\r\n\t */\r\n\tstart(defer:number = 0):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tthis.cancel();\r\n\t\tthis._status = TaskStatus.WaitingToRun;\r\n\t\tif(!(defer>0)) defer = 0;  // A negation is used to catch edge cases.\r\n\t\tif(isFinite(<any>defer))\r\n\t\t\tthis._timeoutId = setTimeout(TaskHandlerBase._handler, defer, this);\r\n\t}\r\n\r\n\trunSynchronously():void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tTaskHandlerBase._handler(this);\r\n\t}\r\n\r\n\tprotected getStatus():TaskStatus\r\n\t{\r\n\t\treturn this._status;\r\n\t}\r\n\r\n\tget status():TaskStatus\r\n\t{\r\n\t\treturn this.getStatus();\r\n\t}\r\n\r\n\t// Use a static function here to avoid recreating a new function every time.\r\n\tprivate static _handler(d:TaskHandlerBase):void\r\n\t{\r\n\t\td.cancel();\r\n\t\td._status = TaskStatus.Running;\r\n\t\ttry\r\n\t\t{\r\n\t\t\td._onExecute();\r\n\t\t\td._status = TaskStatus.RanToCompletion;\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\td._status = TaskStatus.Faulted;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected abstract _onExecute():void;\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tthis.cancel();\r\n\t\t(<any>this)._status = null;\r\n\t}\r\n\r\n\tcancel():boolean\r\n\t{\r\n\t\tconst id = this._timeoutId;\r\n\t\tif(id)\r\n\t\t{\r\n\t\t\tclearTimeout(id);\r\n\t\t\tthis._timeoutId = null;\r\n\t\t\tthis._status = TaskStatus.Cancelled;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport default TaskHandlerBase;"]}