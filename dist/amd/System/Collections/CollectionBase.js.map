{"version":3,"sources":["System/Collections/CollectionBase.js","System/Collections/CollectionBase.ts"],"names":["define","require","exports","Enumerator_1","Compare_1","ArgumentNullException_1","InvalidOperationException_1","DisposableBase_1","Environment_1","extends_1","Object","defineProperty","value","__extends","NAME","CMDC","CMRO","LINQ_PATH","CollectionBase","_super","source","_equalityComparer","areEqual","_this","call","this","_importEntries","_updateRecursion","_modifiedCount","_version","prototype","get","getCount","enumerable","configurable","getIsReadOnly","assertModifiable","throwIfDisposed","InvalidOperationException","assertVersion","version","_onModified","_signalModification","increment","_","ex","console","error","_incrementModified","handleUpdate","closure","updated","add","entry","_addInternal","remove","max","Infinity","n","NaN","_removeInternal","clear","_clearInternal","_onDispose","l","_linq","dispose","entries","added","_i","entries_1","length","e","forEach","importEntries","filter","predicate","ArgumentNullException","count","result","i","push","any","Boolean","found","some","contains","equals","action","useCopy","wasDisposed","getEnumerator","a","toArray","copyTo","target","index","newLength","moveNext","current","Array","r","eval","from","isRequireJS","linqAsync","callback","linq","isNodeJS","isCommonJS","DisposableBase"],"mappings":";;;;AAIAA,QAAQ,UAAW,UAAW,2BAA4B,aAAc,sCAAuC,0CAA2C,+BAAgC,iBAAkB,iBAAkB,SAAUC,QAASC,QAASC,aAAcC,UAAWC,wBAAyBC,4BAA6BC,iBAAkBC,cAAeC,WACtW,YACAC,QAAOC,eAAeT,QAAS,cAAgBU,OAAO,GCc1D,IAAMC,WAAYJ,UAAAA,WAIjBK,KAAO,iBACPC,KAAO,uCACPC,KAAO,wCAEPC,UAAY,yBAEbC,eAAA,SAAAC,QAIC,QAAAD,gBACCE,EACUC,GAAA,SAAAA,IAAAA,EAA0CjB,UAAAkB,SAFrD,IAAAC,GAICJ,OAAAK,KAAAC,KAAMX,OAAKW,IDhBD,OCcAF,GAAAF,kBAAAA,EAGVE,EAAKG,eAAeN,GACpBG,EAAKI,iBAAmB,EACxBJ,EAAKK,eAAiB,EACtBL,EAAKM,SAAW,EDpBCN,ECudnB,MA9cQV,WAAAK,eAAAC,QAiBPT,OAAAC,eAAIO,eAAAY,UAAA,SDvBOC,ICuBX,WAEC,MAAON,MAAKO,YDtBFC,YAAY,EACZC,cAAc,ICwBfhB,eAAAY,UAAAK,cAAV,WAEC,OAAO,GAIRzB,OAAAC,eAAIO,eAAAY,UAAA,cDvBOC,ICuBX,WAEC,MAAON,MAAKU,iBDtBFF,YAAY,EACZC,cAAc,ICwBfhB,eAAAY,UAAAM,iBAAV,WAGC,GADAX,KAAKY,gBAAgBtB,MAClBU,KAAKU,gBACP,KAAM,IAAI7B,6BAAAgC,0BAA0BtB,KACrC,QAAO,GAMEE,eAAAY,UAAAS,cAAV,SAAwBC,GAEvB,GAAGA,IAAUf,KAAKI,SACjB,KAAM,IAAIvB,6BAAAgC,0BAA0B,2BAErC,QAAO,GAUEpB,eAAAY,UAAAW,YAAV,aAEUvB,eAAAY,UAAAY,oBAAV,SAA8BC,GAE7B,GAAMC,GAAInB,IAEV,IADGkB,GAAWC,EAAEhB,iBACbgB,EAAEhB,iBAAmBH,KAAKE,iBAC7B,CACCiB,EAAEhB,eAAiB,EACnBgB,EAAEf,UACF,KAECe,EAAEH,cAEH,MAAMI,GAGLC,QAAQC,MAAMF,GAEf,OAAO,EAER,OAAO,GAGE3B,eAAAY,UAAAkB,mBAAV,WAAsCvB,KAAKG,kBAG3ClB,OAAAC,eAAIO,eAAAY,UAAA,cD1COC,IC0CX,WAA2B,MAA8B,IAAvBN,KAAKE,kBDzC5BM,YAAY,EACZC,cAAc,ICgDzBhB,eAAAY,UAAAmB,aAAA,SAAaC,GAEZ,IAAIA,EAAS,OAAO,CACpB,IAAMN,GAAInB,IACVmB,GAAER,mBACFQ,EAAEjB,kBACF,IAAIwB,IAAkB,CAEtB,MAEIA,EAAUD,MACZN,EAAEhB,iBDxCM,QC4CTgB,EAAEjB,mBAKH,MAFAiB,GAAEF,sBAEKS,GAcRjC,eAAAY,UAAAsB,IAAA,SAAIC,GAEH,GAAMT,GAAInB,IACVmB,GAAER,mBACFQ,EAAEjB,kBAEF,KACKiB,EAAEU,aAAaD,IAAQT,EAAEhB,iBDhDpB,QCkDRgB,EAAEjB,mBAIJ,MAFAiB,GAAEF,sBAEKE,GAYR1B,eAAAY,UAAAyB,OAAA,SAAOF,EAASG,GAAA,SAAAA,IAAAA,EAAAC,EAAAA,EAEf,IAAMb,GAAInB,IACVmB,GAAER,mBACFQ,EAAEjB,kBAEF,IAAI+B,GAAWC,GACf,MACKD,EAAId,EAAEgB,gBAAgBP,EAAOG,KAAMZ,EAAEhB,iBDnDhC,QCqDRgB,EAAEjB,mBAGJ,MADAiB,GAAEF,sBACKgB,GASRxC,eAAAY,UAAA+B,MAAA,WAEC,GAAMjB,GAAInB,IACVmB,GAAER,mBACFQ,EAAEjB,kBAEF,IAAI+B,GAAWC,GACf,MACKD,EAAId,EAAEkB,mBAAkBlB,EAAEhB,iBDtDrB,QCwDRgB,EAAEjB,mBAIJ,MAFAiB,GAAEF,sBAEKgB,GAGExC,eAAAY,UAAAiC,WAAV,WAEC5C,OAAAW,UAAMiC,WAAUvC,KAAAC,MAChBA,KAAKqC,iBACLrC,KAAKI,SAAW,EAChBJ,KAAKE,iBAAmB,EACxBF,KAAKG,eAAiB,CACtB,IAAMoC,GAAIvC,KAAKwC,KACfxC,MAAKwC,MAAQ,OACVD,GAAGA,EAAEE,WAGChD,eAAAY,UAAAJ,eAAV,SAAyByC,GAAzB,GAAA5C,GAAAE,KAEK2C,EAAQ,CACZ,IAAGD,EAEF,GAAG,YAAqB,OAGvB,IAAa,GAAAE,GAAA,EAAAC,EAAAH,EAAAE,EAAAC,EAAAC,OAAAF,IAAO,CAAhB,GAAIG,GAACF,EAAAD,EAEL5C,MAAK6B,aAAakB,IAAIJ,QAK1BjE,cAAAsE,QAAQN,EAAS,SAAAK,GAEbjD,EAAK+B,aAAakB,IAAIJ,KAI5B,OAAOA,IAQRlD,eAAAY,UAAA4C,cAAA,SAAcP,GAEb,GAAMvB,GAAInB,IACV,KAAI0C,EAAS,MAAO,EACpBvB,GAAER,mBACFQ,EAAEjB,kBAEF,IAAI+B,GAAWC,GACf,MACKD,EAAId,EAAElB,eAAeyC,KAAUvB,EAAEhB,iBD3D5B,QC6DRgB,EAAEjB,mBAGJ,MADAiB,GAAEF,sBACKgB,GAgBRxC,eAAAY,UAAA6C,OAAA,SAAOC,GAEN,IAAIA,EAAW,KAAM,IAAIvE,yBAAAwE,sBAAsB,YAC/C,IAAIC,IAASrD,KAAKO,WACd+C,IASJ,OARGD,IAEFrD,KAAKgD,QAAQ,SAACD,EAAGQ,GAEbJ,EAAUJ,EAAGQ,IACfD,EAAOE,KAAKT,KAGRO,GASR7D,eAAAY,UAAAoD,IAAA,SAAIN,GAEH,GAAIE,GAAQrD,KAAKO,UACjB,KAAI8C,EAAO,OAAO,CAClB,KAAIF,EAAW,MAAOO,SAAQL,EAE9B,IAAIM,IAAgB,CAEpB,OADA3D,MAAKgD,QAAQ,SAACD,EAAGQ,GAAM,QAAEI,EAAQR,EAAUJ,EAAGQ,MACvCI,GASRlE,eAAAY,UAAAuD,KAAA,SAAKT,GAEJ,MAAOnD,MAAKyD,IAAIN,IASjB1D,eAAAY,UAAAwD,SAAA,SAASjC,GAER,GAAMkC,GAAS9D,KAAKJ,iBACpB,OAAOI,MAAKyD,IAAI,SAAAV,GAAK,MAAAe,GAAOlC,EAAOmB,MAWpCtD,eAAAY,UAAA2C,QAAA,SAAQe,EAAmDC,GAE1D,GAAGhE,KAAKiE,YACP,MAAO,EAER,KAAGD,EAcF,MAAOtF,cAAAsE,QAAQhD,KAAKkE,gBAAiBH,EAZrC,IAAMI,GAAInE,KAAKoE,SACf,KAEC,MAAO1F,cAAAsE,QAAQmB,EAAGJ,GDvFN,QC2FZI,EAAErB,OAAS,IAedrD,eAAAY,UAAAgE,OAAA,SACCC,EACAC,GAEA,GAFA,SAAAA,IAAAA,EAAA,IAEID,EAAQ,KAAM,IAAI1F,yBAAAwE,sBAAsB,SAE5C,IAAMC,GAAQrD,KAAKO,UACnB,IAAG8C,EACH,CACC,GAAMmB,GAAYnB,EAAQkB,CACvBD,GAAOxB,OAAO0B,IAAWF,EAAOxB,OAAS0B,EAG5C,KADA,GAAMzB,GAAI/C,KAAKkE,gBACTnB,EAAE0B,YAEPH,EAAOC,KAAgBxB,EAAE2B,QAG3B,MAAOJ,IAOR7E,eAAAY,UAAA+D,QAAA,WAEC,GAAMf,GAAQrD,KAAKO,UACnB,OAAO8C,GACJrD,KAAKqE,OAAOhB,EAAM,MAAQ,GAAIsB,OAAStB,WAU3CpE,OAAAC,eAAIO,eAAAY,UAAA,QDpGOC,ICoGX,WAECN,KAAKY,iBACL,IAAImC,GAAI/C,KAAKwC,KAEb,KAAIO,EACJ,CAEC,GAAI6B,GAAC,MACL,KAAMA,EAAIC,KAAK,WAAc,MAAOzD,KAGpC,GADApB,KAAKwC,MAAQO,EAAI6B,GAAKA,EAAEpF,WAAFoF,WAAqBE,KAAK9E,OAC5C+C,EAEH,KAAMhE,eAAAgG,YACH,iRAGA,iDAIL,MAAOhC,IDxGGvC,YAAY,EACZC,cAAc,ICmHzBhB,eAAAY,UAAA2E,UAAA,SAAUC,UAAV,GAAAnF,OAAAE,IAECA,MAAKY,iBACL,IAAImC,GAAI/C,KAAKwC,KAEb,KAAIO,EAEH,GAAGhE,cAAAgG,YAEFF,KAAK,YAAYrF,WAAY,SAAC0F,GAK7B,GAFAnC,EAAIjD,MAAK0C,MACLO,IAAGjD,MAAK0C,MAAQO,EAAImC,EAAAA,WAAaJ,KAAKhF,SACtCiD,EAAG,KAAM,gDACVkC,WAAUA,SAASlC,GACtBkC,SAAW,aAGR,CAAA,IAAGlG,cAAAoG,WAAYpG,cAAAqG,WAMnB,KAAM,gEAJNrC,GAAI/C,KAAKkF,KAUX,MAFGnC,IAAKkC,UAAUA,SAASlC,GAEpBA,GAETtD,gBA9cQX,iBAAAuG,eADc5G,SAAAgB,eAAAA","file":"CollectionBase.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\ndefine([\"require\", \"exports\", \"./Enumeration/Enumerator\", \"../Compare\", \"../Exceptions/ArgumentNullException\", \"../Exceptions/InvalidOperationException\", \"../Disposable/DisposableBase\", \"../Environment\", \"../../extends\"], function (require, exports, Enumerator_1, Compare_1, ArgumentNullException_1, InvalidOperationException_1, DisposableBase_1, Environment_1, extends_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    //noinspection JSUnusedLocalSymbols\n    var __extends = extends_1.default;\n    //noinspection SpellCheckingInspection\n    var NAME = \"CollectionBase\", CMDC = \"Cannot modify a disposed collection.\", CMRO = \"Cannot modify a read-only collection.\";\n    var LINQ_PATH = \"../../System.Linq/Linq\";\n    var CollectionBase = /** @class */ (function (_super) {\n        __extends(CollectionBase, _super);\n        function CollectionBase(source, _equalityComparer) {\n            if (_equalityComparer === void 0) { _equalityComparer = Compare_1.areEqual; }\n            var _this = _super.call(this, NAME) || this;\n            _this._equalityComparer = _equalityComparer;\n            _this._importEntries(source);\n            _this._updateRecursion = 0;\n            _this._modifiedCount = 0;\n            _this._version = 0;\n            return _this;\n        }\n        Object.defineProperty(CollectionBase.prototype, \"count\", {\n            get: function () {\n                return this.getCount();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CollectionBase.prototype.getIsReadOnly = function () {\n            return false;\n        };\n        Object.defineProperty(CollectionBase.prototype, \"isReadOnly\", {\n            //noinspection JSUnusedGlobalSymbols\n            get: function () {\n                return this.getIsReadOnly();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CollectionBase.prototype.assertModifiable = function () {\n            this.throwIfDisposed(CMDC);\n            if (this.getIsReadOnly())\n                throw new InvalidOperationException_1.InvalidOperationException(CMRO);\n            return true;\n        };\n        CollectionBase.prototype.assertVersion = function (version) {\n            if (version !== this._version)\n                throw new InvalidOperationException_1.InvalidOperationException(\"Collection was modified.\");\n            return true;\n        };\n        CollectionBase.prototype._onModified = function () { };\n        CollectionBase.prototype._signalModification = function (increment) {\n            var _ = this;\n            if (increment)\n                _._modifiedCount++;\n            if (_._modifiedCount && !this._updateRecursion) {\n                _._modifiedCount = 0;\n                _._version++;\n                try {\n                    _._onModified();\n                }\n                catch (ex) {\n                    // Avoid fatal errors which may have been caused by consumer.\n                    console.error(ex);\n                }\n                return true;\n            }\n            return false;\n        };\n        CollectionBase.prototype._incrementModified = function () { this._modifiedCount++; };\n        Object.defineProperty(CollectionBase.prototype, \"isUpdating\", {\n            //noinspection JSUnusedGlobalSymbols\n            get: function () { return this._updateRecursion != 0; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Takes a closure that if returning true will propagate an update signal.\n         * Multiple update operations can be occurring at once or recursively and the onModified signal will only occur once they're done.\n         * @param closure\n         * @returns {boolean}\n         */\n        CollectionBase.prototype.handleUpdate = function (closure) {\n            if (!closure)\n                return false;\n            var _ = this;\n            _.assertModifiable();\n            _._updateRecursion++;\n            var updated = false;\n            try {\n                if (updated = closure())\n                    _._modifiedCount++;\n            }\n            finally {\n                _._updateRecursion--;\n            }\n            _._signalModification();\n            return updated;\n        };\n        /*\n         * Note: for a slight amount more code, we avoid creating functions/closures.\n         * Calling handleUpdate is the correct pattern, but if possible avoid creating another function scope.\n         */\n        /**\n         * Adds an entry to the collection.\n         * @param entry\n         */\n        CollectionBase.prototype.add = function (entry) {\n            var _ = this;\n            _.assertModifiable();\n            _._updateRecursion++;\n            try {\n                if (_._addInternal(entry))\n                    _._modifiedCount++;\n            }\n            finally {\n                _._updateRecursion--;\n            }\n            _._signalModification();\n            return _;\n        };\n        /**\n         * Removes entries from the collection allowing for a limit.\n         * For example if the collection not a distinct set, more than one entry could be removed.\n         * @param entry The entry to remove.\n         * @param max Limit of entries to remove.  Will remove all matches if no max specified.\n         * @returns {number} The number of entries removed.\n         */\n        CollectionBase.prototype.remove = function (entry, max) {\n            if (max === void 0) { max = Infinity; }\n            var _ = this;\n            _.assertModifiable();\n            _._updateRecursion++;\n            var n = NaN;\n            try {\n                if (n = _._removeInternal(entry, max))\n                    _._modifiedCount++;\n            }\n            finally {\n                _._updateRecursion--;\n            }\n            _._signalModification();\n            return n;\n        };\n        /**\n         * Clears the contents of the collection resulting in a count of zero.\n         * @returns {number}\n         */\n        CollectionBase.prototype.clear = function () {\n            var _ = this;\n            _.assertModifiable();\n            _._updateRecursion++;\n            var n = NaN;\n            try {\n                if (n = _._clearInternal())\n                    _._modifiedCount++;\n            }\n            finally {\n                _._updateRecursion--;\n            }\n            _._signalModification();\n            return n;\n        };\n        CollectionBase.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._clearInternal();\n            this._version = 0;\n            this._updateRecursion = 0;\n            this._modifiedCount = 0;\n            var l = this._linq;\n            this._linq = void 0;\n            if (l)\n                l.dispose();\n        };\n        CollectionBase.prototype._importEntries = function (entries) {\n            var _this = this;\n            var added = 0;\n            if (entries) {\n                if ((entries) instanceof (Array)) {\n                    // Optimize for avoiding a new closure.\n                    for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n                        var e = entries_1[_i];\n                        if (this._addInternal(e))\n                            added++;\n                    }\n                }\n                else {\n                    Enumerator_1.forEach(entries, function (e) {\n                        if (_this._addInternal(e))\n                            added++;\n                    });\n                }\n            }\n            return added;\n        };\n        /**\n         * Safely imports any array enumerator, or enumerable.\n         * @param entries\n         * @returns {number}\n         */\n        CollectionBase.prototype.importEntries = function (entries) {\n            var _ = this;\n            if (!entries)\n                return 0;\n            _.assertModifiable();\n            _._updateRecursion++;\n            var n = NaN;\n            try {\n                if (n = _._importEntries(entries))\n                    _._modifiedCount++;\n            }\n            finally {\n                _._updateRecursion--;\n            }\n            _._signalModification();\n            return n;\n        };\n        /**\n         * Returns an array filtered by the provided predicate.\n         * Provided for similarity to JS Array.\n         * @param predicate\n         * @returns {[]}\n         */\n        CollectionBase.prototype.filter = function (predicate) {\n            if (!predicate)\n                throw new ArgumentNullException_1.ArgumentNullException('predicate');\n            var count = !this.getCount();\n            var result = [];\n            if (count) {\n                this.forEach(function (e, i) {\n                    if (predicate(e, i))\n                        result.push(e);\n                });\n            }\n            return result;\n        };\n        /**\n         * Returns true the first time predicate returns true.  Otherwise false.\n         * Useful for searching through a collection.\n         * @param predicate\n         * @returns {any}\n         */\n        CollectionBase.prototype.any = function (predicate) {\n            var count = this.getCount();\n            if (!count)\n                return false;\n            if (!predicate)\n                return Boolean(count);\n            var found = false;\n            this.forEach(function (e, i) { return !(found = predicate(e, i)); });\n            return found;\n        };\n        /**\n         * Returns true the first time predicate returns true.  Otherwise false.\n         * See '.any(predicate)'.  As this method is just just included to have similarity with a JS Array.\n         * @param predicate\n         * @returns {any}\n         */\n        CollectionBase.prototype.some = function (predicate) {\n            return this.any(predicate);\n        };\n        /**\n         * Returns true if the equality comparer resolves true on any element in the collection.\n         * @param entry\n         * @returns {boolean}\n         */\n        CollectionBase.prototype.contains = function (entry) {\n            var equals = this._equalityComparer;\n            return this.any(function (e) { return equals(entry, e); });\n        };\n        CollectionBase.prototype.forEach = function (action, useCopy) {\n            if (this.wasDisposed)\n                return 0;\n            if (useCopy) {\n                var a = this.toArray();\n                try {\n                    return Enumerator_1.forEach(a, action);\n                }\n                finally {\n                    a.length = 0;\n                }\n            }\n            else {\n                return Enumerator_1.forEach(this.getEnumerator(), action);\n            }\n        };\n        /**\n         * Copies all values to numerically indexable object.\n         * @param target\n         * @param index\n         * @returns {TTarget}\n         */\n        CollectionBase.prototype.copyTo = function (target, index) {\n            if (index === void 0) { index = 0; }\n            if (!target)\n                throw new ArgumentNullException_1.ArgumentNullException('target');\n            var count = this.getCount();\n            if (count) {\n                var newLength = count + index;\n                if (target.length < newLength)\n                    target.length = newLength;\n                var e = this.getEnumerator();\n                while (e.moveNext()) {\n                    target[index++] = e.current;\n                }\n            }\n            return target;\n        };\n        /**\n         * Returns an array of the collection contents.\n         * @returns {any[]|Array}\n         */\n        CollectionBase.prototype.toArray = function () {\n            var count = this.getCount();\n            return count\n                ? this.copyTo(count > 65536 ? new Array(count) : [])\n                : [];\n        };\n        Object.defineProperty(CollectionBase.prototype, \"linq\", {\n            /**\n             * .linq will return an LinqEnumerable if .linqAsync() has completed successfully or the default module loader is NodeJS+CommonJS.\n             * @returns {LinqEnumerable}\n             */\n            get: function () {\n                this.throwIfDisposed();\n                var e = this._linq;\n                if (!e) {\n                    var r = void 0;\n                    try {\n                        r = eval('require');\n                    }\n                    catch (ex) { }\n                    this._linq = e = r && r(LINQ_PATH).default.from(this);\n                    if (!e) {\n                        throw Environment_1.isRequireJS\n                            ? \"using .linq to load and initialize a LinqEnumerable is currently only supported within a NodeJS environment.\\nImport System.Linq/Linq and use Enumerable.from(e) instead.\\nYou can also preload the Linq module as a dependency or use .linqAsync(callback) for AMD/RequireJS.\"\n                            : \"There was a problem importing System.Linq/Linq\";\n                    }\n                }\n                return e;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * .linqAsync() is for use with deferred loading.\n         * Ensures an instance of the Linq extensions is available and then passes it to the callback.\n         * Returns an LinqEnumerable if one is already available, otherwise undefined.\n         * Passing no parameters will still initiate loading and initializing the LinqEnumerable which can be useful for pre-loading.\n         * Any call to .linqAsync() where an LinqEnumerable is returned can be assured that any subsequent calls to .linq will return the same instance.\n         * @param callback\n         * @returns {LinqEnumerable}\n         */\n        CollectionBase.prototype.linqAsync = function (callback) {\n            var _this = this;\n            this.throwIfDisposed();\n            var e = this._linq;\n            if (!e) {\n                if (Environment_1.isRequireJS) {\n                    eval(\"require\")([LINQ_PATH], function (linq) {\n                        // Could end up being called more than once, be sure to check for ._linq before setting...\n                        e = _this._linq;\n                        if (!e)\n                            _this._linq = e = linq.default.from(_this);\n                        if (!e)\n                            throw \"There was a problem importing System.Linq/Linq\";\n                        if (callback)\n                            callback(e);\n                        callback = void 0; // In case this is return synchronously..\n                    });\n                }\n                else if (Environment_1.isNodeJS && Environment_1.isCommonJS) {\n                    e = this.linq;\n                }\n                else {\n                    throw \"Cannot find a compatible loader for importing System.Linq/Linq\";\n                }\n            }\n            if (e && callback)\n                callback(e);\n            return e;\n        };\n        return CollectionBase;\n    }(DisposableBase_1.DisposableBase));\n    exports.CollectionBase = CollectionBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {forEach} from \"./Enumeration/Enumerator\";\r\nimport {areEqual} from \"../Compare\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {DisposableBase} from \"../Disposable/DisposableBase\";\r\nimport {ICollection} from \"./ICollection\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {IEnumerateEach} from \"./Enumeration/IEnumerateEach\";\r\nimport {Action, ActionWithIndex, EqualityComparison, PredicateWithIndex} from \"../FunctionTypes\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\nimport {ArrayLikeWritable} from \"./Array/ArrayLikeWritable\";\r\nimport {LinqEnumerable} from \"../../System.Linq/Linq\";\r\nimport {isCommonJS, isNodeJS, isRequireJS} from \"../Environment\";\r\nimport __extendsImport from \"../../extends\";\r\n//noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n//noinspection SpellCheckingInspection\r\nconst\r\n\tNAME = \"CollectionBase\",\r\n\tCMDC = \"Cannot modify a disposed collection.\",\r\n\tCMRO = \"Cannot modify a read-only collection.\";\r\nconst\r\n\tLINQ_PATH = \"../../System.Linq/Linq\";\r\n\r\nexport abstract class CollectionBase<T>\r\nextends DisposableBase implements ICollection<T>, IEnumerateEach<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tsource?:IEnumerableOrArray<T>|IEnumerator<T>,\r\n\t\tprotected _equalityComparer:EqualityComparison<T> = areEqual)\r\n\t{\r\n\t\tsuper(NAME);\r\n\t\tthis._importEntries(source);\r\n\t\tthis._updateRecursion = 0;\r\n\t\tthis._modifiedCount = 0;\r\n\t\tthis._version = 0;\r\n\t}\r\n\r\n\r\n\tprotected abstract getCount():number;\r\n\r\n\tget count():number\r\n\t{\r\n\t\treturn this.getCount();\r\n\t}\r\n\r\n\tprotected getIsReadOnly():boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\tget isReadOnly():boolean\r\n\t{\r\n\t\treturn this.getIsReadOnly();\r\n\t}\r\n\r\n\tprotected assertModifiable():true|never\r\n\t{\r\n\t\tthis.throwIfDisposed(CMDC);\r\n\t\tif(this.getIsReadOnly())\r\n\t\t\tthrow new InvalidOperationException(CMRO);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprotected _version:number; // Provides an easy means of tracking changes and invalidating enumerables.\r\n\r\n\r\n\tprotected assertVersion(version:number):true|never\r\n\t{\r\n\t\tif(version!==this._version)\r\n\t\t\tthrow new InvalidOperationException(\"Collection was modified.\");\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/*\r\n\t * Note: Avoid changing modified count by any means but ++;\r\n\t * If setting modified count by the result of a closure it may be a negative number or NaN and ruin the pattern.\r\n\t */\r\n\tprivate _modifiedCount:number;\r\n\tprivate _updateRecursion:number;\r\n\r\n\tprotected _onModified():void {}\r\n\r\n\tprotected _signalModification(increment?:boolean):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(increment) _._modifiedCount++;\r\n\t\tif(_._modifiedCount && !this._updateRecursion)\r\n\t\t{\r\n\t\t\t_._modifiedCount = 0;\r\n\t\t\t_._version++;\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\t_._onModified();\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t\t// Avoid fatal errors which may have been caused by consumer.\r\n\t\t\t\tconsole.error(ex);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprotected _incrementModified():void { this._modifiedCount++; }\r\n\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\tget isUpdating():boolean { return this._updateRecursion!=0; }\r\n\r\n\t/**\r\n\t * Takes a closure that if returning true will propagate an update signal.\r\n\t * Multiple update operations can be occurring at once or recursively and the onModified signal will only occur once they're done.\r\n\t * @param closure\r\n\t * @returns {boolean}\r\n\t */\r\n\thandleUpdate(closure?:() => boolean):boolean\r\n\t{\r\n\t\tif(!closure) return false;\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._updateRecursion++;\r\n\t\tlet updated:boolean = false;\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif(updated = closure())\r\n\t\t\t\t_._modifiedCount++;\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\t_._updateRecursion--;\r\n\t\t}\r\n\r\n\t\t_._signalModification();\r\n\r\n\t\treturn updated;\r\n\t}\r\n\r\n\tprotected abstract _addInternal(entry:T):boolean;\r\n\r\n\t/*\r\n\t * Note: for a slight amount more code, we avoid creating functions/closures.\r\n\t * Calling handleUpdate is the correct pattern, but if possible avoid creating another function scope.\r\n\t */\r\n\r\n\t/**\r\n\t * Adds an entry to the collection.\r\n\t * @param entry\r\n\t */\r\n\tadd(entry:T):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._updateRecursion++;\r\n\r\n\t\ttry\r\n\t\t{ if(_._addInternal(entry)) _._modifiedCount++; }\r\n\t\tfinally\r\n\t\t{ _._updateRecursion--; }\r\n\r\n\t\t_._signalModification();\r\n\r\n\t\treturn _;\r\n\t}\r\n\r\n\tprotected abstract _removeInternal(entry:T, max?:number):number;\r\n\r\n\t/**\r\n\t * Removes entries from the collection allowing for a limit.\r\n\t * For example if the collection not a distinct set, more than one entry could be removed.\r\n\t * @param entry The entry to remove.\r\n\t * @param max Limit of entries to remove.  Will remove all matches if no max specified.\r\n\t * @returns {number} The number of entries removed.\r\n\t */\r\n\tremove(entry:T, max:number = Infinity):number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._updateRecursion++;\r\n\r\n\t\tlet n:number = NaN;\r\n\t\ttry\r\n\t\t{ if(n = _._removeInternal(entry, max)) _._modifiedCount++; }\r\n\t\tfinally\r\n\t\t{ _._updateRecursion--; }\r\n\r\n\t\t_._signalModification();\r\n\t\treturn n;\r\n\t}\r\n\r\n\tprotected abstract _clearInternal():number;\r\n\r\n\t/**\r\n\t * Clears the contents of the collection resulting in a count of zero.\r\n\t * @returns {number}\r\n\t */\r\n\tclear():number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._updateRecursion++;\r\n\r\n\t\tlet n:number = NaN;\r\n\t\ttry\r\n\t\t{ if(n = _._clearInternal()) _._modifiedCount++; }\r\n\t\tfinally\r\n\t\t{ _._updateRecursion--; }\r\n\r\n\t\t_._signalModification();\r\n\r\n\t\treturn n;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._clearInternal();\r\n\t\tthis._version = 0;\r\n\t\tthis._updateRecursion = 0;\r\n\t\tthis._modifiedCount = 0;\r\n\t\tconst l = this._linq;\r\n\t\tthis._linq = void 0;\r\n\t\tif(l) l.dispose();\r\n\t}\r\n\r\n\tprotected _importEntries(entries:IEnumerableOrArray<T>|IEnumerator<T>|null|undefined):number\r\n\t{\r\n\t\tlet added = 0;\r\n\t\tif(entries)\r\n\t\t{\r\n\t\t\tif((entries) instanceof (Array))\r\n\t\t\t{\r\n\t\t\t\t// Optimize for avoiding a new closure.\r\n\t\t\t\tfor(let e of entries)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this._addInternal(e)) added++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tforEach(entries, e =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this._addInternal(e)) added++;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn added;\r\n\t}\r\n\r\n\t/**\r\n\t * Safely imports any array enumerator, or enumerable.\r\n\t * @param entries\r\n\t * @returns {number}\r\n\t */\r\n\timportEntries(entries:IEnumerableOrArray<T>|IEnumerator<T>):number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(!entries) return 0;\r\n\t\t_.assertModifiable();\r\n\t\t_._updateRecursion++;\r\n\r\n\t\tlet n:number = NaN;\r\n\t\ttry\r\n\t\t{ if(n = _._importEntries(entries)) _._modifiedCount++; }\r\n\t\tfinally\r\n\t\t{ _._updateRecursion--; }\r\n\r\n\t\t_._signalModification();\r\n\t\treturn n;\r\n\t}\r\n\r\n\t// Fundamentally the most important part of the collection.\r\n\r\n\t/**\r\n\t * Returns a enumerator for this collection.\r\n\t */\r\n\tabstract getEnumerator():IEnumerator<T>;\r\n\r\n\t/**\r\n\t * Returns an array filtered by the provided predicate.\r\n\t * Provided for similarity to JS Array.\r\n\t * @param predicate\r\n\t * @returns {[]}\r\n\t */\r\n\tfilter(predicate:PredicateWithIndex<T>):T[]\r\n\t{\r\n\t\tif(!predicate) throw new ArgumentNullException('predicate');\r\n\t\tlet count = !this.getCount();\r\n\t\tlet result:T[] = [];\r\n\t\tif(count)\r\n\t\t{\r\n\t\t\tthis.forEach((e, i) =>\r\n\t\t\t{\r\n\t\t\t\tif(predicate(e, i))\r\n\t\t\t\t\tresult.push(e);\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns true the first time predicate returns true.  Otherwise false.\r\n\t * Useful for searching through a collection.\r\n\t * @param predicate\r\n\t * @returns {any}\r\n\t */\r\n\tany(predicate?:PredicateWithIndex<T>):boolean\r\n\t{\r\n\t\tlet count = this.getCount();\r\n\t\tif(!count) return false;\r\n\t\tif(!predicate) return Boolean(count);\r\n\r\n\t\tlet found:boolean = false;\r\n\t\tthis.forEach((e, i) => !(found = predicate(e, i)));\r\n\t\treturn found;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns true the first time predicate returns true.  Otherwise false.\r\n\t * See '.any(predicate)'.  As this method is just just included to have similarity with a JS Array.\r\n\t * @param predicate\r\n\t * @returns {any}\r\n\t */\r\n\tsome(predicate?:PredicateWithIndex<T>):boolean\r\n\t{\r\n\t\treturn this.any(predicate);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns true if the equality comparer resolves true on any element in the collection.\r\n\t * @param entry\r\n\t * @returns {boolean}\r\n\t */\r\n\tcontains(entry:T):boolean\r\n\t{\r\n\t\tconst equals = this._equalityComparer;\r\n\t\treturn this.any(e => equals(entry, e));\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Special implementation of 'forEach': If the action returns 'false' the enumeration will stop.\r\n\t * @param action\r\n\t * @param useCopy\r\n\t */\r\n\tforEach(action:ActionWithIndex<T>, useCopy?:boolean):number\r\n\tforEach(action:PredicateWithIndex<T>, useCopy?:boolean):number\r\n\tforEach(action:ActionWithIndex<T> | PredicateWithIndex<T>, useCopy?:boolean):number\r\n\t{\r\n\t\tif(this.wasDisposed)\r\n\t\t\treturn 0;\r\n\r\n\t\tif(useCopy)\r\n\t\t{\r\n\t\t\tconst a = this.toArray();\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\treturn forEach(a, action);\r\n\t\t\t}\r\n\t\t\tfinally\r\n\t\t\t{\r\n\t\t\t\ta.length = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn forEach(this.getEnumerator(), action);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all values to numerically indexable object.\r\n\t * @param target\r\n\t * @param index\r\n\t * @returns {TTarget}\r\n\t */\r\n\tcopyTo<TTarget extends ArrayLikeWritable<T>>(\r\n\t\ttarget:TTarget,\r\n\t\tindex:number = 0):TTarget\r\n\t{\r\n\t\tif(!target) throw new ArgumentNullException('target');\r\n\r\n\t\tconst count = this.getCount();\r\n\t\tif(count)\r\n\t\t{\r\n\t\t\tconst newLength = count + index;\r\n\t\t\tif(target.length<newLength) target.length = newLength;\r\n\r\n\t\t\tconst e = this.getEnumerator();\r\n\t\t\twhile(e.moveNext()) // Disposes when finished.\r\n\t\t\t{\r\n\t\t\t\ttarget[index++] = <any>e.current;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn target;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an array of the collection contents.\r\n\t * @returns {any[]|Array}\r\n\t */\r\n\ttoArray():T[]\r\n\t{\r\n\t\tconst count = this.getCount();\r\n\t\treturn count\r\n\t\t\t? this.copyTo(count>65536 ? new Array<T>(count) : [])\r\n\t\t\t: [];\r\n\t}\r\n\r\n\tprivate _linq?:LinqEnumerable<T>;\r\n\r\n\t/**\r\n\t * .linq will return an LinqEnumerable if .linqAsync() has completed successfully or the default module loader is NodeJS+CommonJS.\r\n\t * @returns {LinqEnumerable}\r\n\t */\r\n\tget linq():LinqEnumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tlet e = this._linq;\r\n\r\n\t\tif(!e)\r\n\t\t{\r\n\r\n\t\t\tlet r:any;\r\n\t\t\ttry { r = eval('require'); } catch (ex) {}\r\n\r\n\t\t\tthis._linq = e = r && r(LINQ_PATH).default.from(this);\r\n\t\t\tif(!e)\r\n\t\t\t{\r\n\t\t\t\tthrow isRequireJS\r\n\t\t\t\t\t? `using .linq to load and initialize a LinqEnumerable is currently only supported within a NodeJS environment.\r\nImport System.Linq/Linq and use Enumerable.from(e) instead.\r\nYou can also preload the Linq module as a dependency or use .linqAsync(callback) for AMD/RequireJS.`\r\n\t\t\t\t\t: \"There was a problem importing System.Linq/Linq\"\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn e;\r\n\t}\r\n\r\n\t/**\r\n\t * .linqAsync() is for use with deferred loading.\r\n\t * Ensures an instance of the Linq extensions is available and then passes it to the callback.\r\n\t * Returns an LinqEnumerable if one is already available, otherwise undefined.\r\n\t * Passing no parameters will still initiate loading and initializing the LinqEnumerable which can be useful for pre-loading.\r\n\t * Any call to .linqAsync() where an LinqEnumerable is returned can be assured that any subsequent calls to .linq will return the same instance.\r\n\t * @param callback\r\n\t * @returns {LinqEnumerable}\r\n\t */\r\n\tlinqAsync(callback?:Action<LinqEnumerable<T>>):LinqEnumerable<T>|undefined\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tlet e = this._linq;\r\n\r\n\t\tif(!e)\r\n\t\t{\r\n\t\t\tif(isRequireJS)\r\n\t\t\t{\r\n\t\t\t\teval(\"require\")([LINQ_PATH], (linq:any) =>\r\n\t\t\t\t{\r\n\t\t\t\t\t// Could end up being called more than once, be sure to check for ._linq before setting...\r\n\t\t\t\t\te = this._linq;\r\n\t\t\t\t\tif(!e) this._linq = e = linq.default.from(this);\r\n\t\t\t\t\tif(!e) throw \"There was a problem importing System.Linq/Linq\";\r\n\t\t\t\t\tif(callback) callback(e);\r\n\t\t\t\t\tcallback = void 0; // In case this is return synchronously..\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse if(isNodeJS && isCommonJS)\r\n\t\t\t{\r\n\t\t\t\te = this.linq;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tthrow \"Cannot find a compatible loader for importing System.Linq/Linq\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(e && callback) callback(e);\r\n\r\n\t\treturn e;\r\n\t}\r\n}\r\n"]}