{"version":3,"sources":["System/Collections/ReadOnlyCollectionWrapper.js","System/Collections/ReadOnlyCollectionWrapper.ts"],"names":["define","require","exports","ArgumentNullException_1","ReadOnlyCollectionBase_1","Enumerator_1","Types_1","extends_1","Object","defineProperty","value","__extends","ReadOnlyCollectionWrapper","_super","collection","_this","call","this","ArgumentNullException","Type","isArrayLike","__getCount","length","__getEnumerator","from","count","getEnumerator","prototype","_getCount","throwIfDisposed","_getEnumerator","_onDispose","_","ReadOnlyCollectionBase"],"mappings":";;;;AAIAA,QAAQ,UAAW,UAAW,sCAAuC,2BAA4B,2BAA4B,WAAY,iBAAkB,SAAUC,EAASC,EAASC,EAAyBC,EAA0BC,EAAcC,EAASC,GAC7P,YACAC,QAAOC,eAAeP,EAAS,cAAgBQ,OAAO,GCO1D,IAAMC,GAAYJ,EAAAA,WAElBK,EAAA,SAAAC,GAEC,QAAAD,GAAYE,GAAZ,GAAAC,GAECF,EAAAG,KAAAC,OAAOA,IAEP,KAAIH,EACH,KAAM,IAAIX,GAAAe,sBAAsB,aDGvB,OCCPZ,GAAAa,KAAKC,YAAYN,IAEnBC,EAAKM,WAAa,WAAI,MAAAP,GAAWQ,QACjCP,EAAKQ,gBAAkB,WAAK,MAAAlB,GAAAmB,KAAeV,MAE3CC,EAAKM,WAAa,WAAI,MAAAP,GAAWW,OACjCV,EAAKQ,gBAAkB,WAAK,MAAAT,GAAWY,kBDPvBX,ECmCnB,MA7C0DJ,GAAAC,EAAAC,GAyB/CD,EAAAe,UAAAC,UAAV,WAGC,MADAX,MAAKY,kBACEZ,KAAKI,cAGHT,EAAAe,UAAAG,eAAV,WAGC,MADAb,MAAKY,kBACEZ,KAAKM,mBAGHX,EAAAe,UAAAI,WAAV,WAEClB,EAAAc,UAAMI,WAAUf,KAAAC,KAChB,IAAMe,GAAQf,IACde,GAAEX,WAAa,KACfW,EAAET,gBAAkB,MAGtBX,GA7C0DR,EAAA6B,uBD4BtD/B,GAAAA,WAAkBU","file":"ReadOnlyCollectionWrapper.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\ndefine([\"require\", \"exports\", \"../Exceptions/ArgumentNullException\", \"./ReadOnlyCollectionBase\", \"./Enumeration/Enumerator\", \"../Types\", \"../../extends\"], function (require, exports, ArgumentNullException_1, ReadOnlyCollectionBase_1, Enumerator_1, Types_1, extends_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    // noinspection JSUnusedLocalSymbols\n    var __extends = extends_1.default;\n    var ReadOnlyCollectionWrapper = /** @class */ (function (_super) {\n        __extends(ReadOnlyCollectionWrapper, _super);\n        function ReadOnlyCollectionWrapper(collection) {\n            var _this = _super.call(this) || this;\n            if (!collection)\n                throw new ArgumentNullException_1.ArgumentNullException('collection');\n            var _ = _this;\n            // Attempting to avoid contact with the original collection.\n            if (Types_1.Type.isArrayLike(collection)) {\n                _this.__getCount = function () { return collection.length; };\n                _this.__getEnumerator = function () { return Enumerator_1.from(collection); };\n            }\n            else {\n                _this.__getCount = function () { return collection.count; };\n                _this.__getEnumerator = function () { return collection.getEnumerator(); };\n            }\n            return _this;\n        }\n        ReadOnlyCollectionWrapper.prototype._getCount = function () {\n            this.throwIfDisposed();\n            return this.__getCount();\n        };\n        ReadOnlyCollectionWrapper.prototype._getEnumerator = function () {\n            this.throwIfDisposed();\n            return this.__getEnumerator();\n        };\n        ReadOnlyCollectionWrapper.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            var _ = this;\n            _.__getCount = null;\n            _.__getEnumerator = null;\n        };\n        return ReadOnlyCollectionWrapper;\n    }(ReadOnlyCollectionBase_1.ReadOnlyCollectionBase));\n    exports.default = ReadOnlyCollectionWrapper;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {ReadOnlyCollectionBase} from \"./ReadOnlyCollectionBase\";\r\nimport {ICollection} from \"./ICollection\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {from as enumeratorFrom} from \"./Enumeration/Enumerator\";\r\nimport {Type} from \"../Types\";\r\nimport __extendsImport from \"../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nexport default class ReadOnlyCollectionWrapper<T> extends ReadOnlyCollectionBase<T>\r\n{\r\n\tconstructor(collection:ICollection<T>|ArrayLike<T>)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(!collection)\r\n\t\t\tthrow new ArgumentNullException('collection');\r\n\r\n\t\tconst _ = this;\r\n\t\t// Attempting to avoid contact with the original collection.\r\n\t\tif(Type.isArrayLike(collection))\r\n\t\t{\r\n\t\t\tthis.__getCount = ()=>collection.length;\r\n\t\t\tthis.__getEnumerator = ()=> enumeratorFrom(collection);\r\n\t\t} else {\r\n\t\t\tthis.__getCount = ()=>collection.count;\r\n\t\t\tthis.__getEnumerator = ()=> collection.getEnumerator();\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tprivate readonly __getCount:()=>number;\r\n\tprivate readonly __getEnumerator:()=>IEnumerator<T>;\r\n\r\n\tprotected _getCount():number\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.__getCount();\r\n\t}\r\n\r\n\tprotected _getEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.__getEnumerator();\r\n\t}\r\n\r\n\tprotected _onDispose()\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tconst _:any = this;\r\n\t\t_.__getCount = null;\r\n\t\t_.__getEnumerator = null;\r\n\t}\r\n\r\n}\r\n"]}