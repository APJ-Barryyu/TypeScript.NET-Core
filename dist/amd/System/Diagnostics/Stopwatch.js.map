{"version":3,"sources":["System/Diagnostics/Stopwatch.js","System/Diagnostics/Stopwatch.ts"],"names":["define","require","exports","TimeSpan_1","getTimestampMilliseconds","Date","getTime","Object","defineProperty","value","Stopwatch","this","_elapsed","_startTimeStamp","NaN","_isRunning","prototype","get","enumerable","configurable","startNew","s","start","measure","closure","TimeSpan","_","stop","currentLapMilliseconds","reset","lap","t","e","zero","timeElapsed","elapsedMilliseconds"],"mappings":";;;;AAIAA,QAAQ,UAAW,UAAW,oBAAqB,SAAUC,EAASC,EAASC,GAC3E,YCGJ,SAAAC,KAEC,OAAO,GAAKC,OAAQC,UDJjBC,OAAOC,eAAeN,EAAS,cAAgBO,OAAO,GCO1D,IAAAC,GAAA,WAAA,QAAAA,KASSC,KAAAC,SAAkB,EAClBD,KAAAE,gBAAyBC,IACzBH,KAAAI,YAAqB,EAkG9B,MAzGQL,GAAAN,yBAAP,WAEC,MAAOA,MAQRG,OAAAC,eAAIE,EAAAM,UAAA,aDPOC,ICOX,WAEC,MAAON,MAAKI,YDNFG,YAAY,EACZC,cAAc,ICQlBT,EAAAU,SAAP,WAEC,GAAMC,GAAI,GAAIX,EAEd,OADAW,GAAEC,QACKD,GAGDX,EAAAa,QAAP,SAAeC,GAEd,GAAMF,GAAQlB,GAEd,OADAoB,KACO,GAAIrB,GAAAsB,SAASrB,IAA6BkB,IAGlDZ,EAAAM,UAAAM,MAAA,WAEC,GAAMI,GAAIf,IACNe,GAAEX,aAELW,EAAEb,gBAAkBT,IACpBsB,EAAEX,YAAa,IAIjBL,EAAAM,UAAAW,KAAA,WAEC,GAAMD,GAAIf,IACPe,GAAEX,aAEJW,EAAEd,UAAYc,EAAEE,uBAChBF,EAAEX,YAAa,IAIjBL,EAAAM,UAAAa,MAAA,WAEC,GAAMH,GAAIf,IACVe,GAAEd,SAAW,EACbc,EAAEX,YAAa,EACfW,EAAEb,gBAAkBC,KAKrBJ,EAAAM,UAAAc,IAAA,WAEC,GAAMJ,GAAIf,IACV,IAAGe,EAAEX,WACL,CACC,GAAMgB,GAAI3B,IACJiB,EAAIK,EAAEb,gBACNmB,EAAID,EAAIV,CAGd,OAFAK,GAAEb,gBAAkBkB,EACpBL,EAAEd,UAAYoB,EACP,GAAI7B,GAAAsB,SAASO,GAGpB,MAAO7B,GAAAsB,SAASQ,MAGlB1B,OAAAC,eAAIE,EAAAM,UAAA,0BDpBOC,ICoBX,WAEC,MAAON,MAAKI,WACRX,IAA6BO,KAAKE,gBACnC,GDnBOK,YAAY,EACZC,cAAc,ICqBzBZ,OAAAC,eAAIE,EAAAM,UAAA,cDlBOC,ICkBX,WAEC,MAAON,MAAKI,WACT,GAAIZ,GAAAsB,SAASd,KAAKiB,wBAClBzB,EAAAsB,SAASQ,MDjBFf,YAAY,EACZC,cAAc,ICmBzBZ,OAAAC,eAAIE,EAAAM,UAAA,uBDhBOC,ICgBX,WAEC,GAAMS,GAAIf,KACNuB,EAAcR,EAAEd,QAKpB,OAHGc,GAAEX,aACJmB,GAAeR,EAAEE,wBAEXM,GDjBGhB,YAAY,EACZC,cAAc,ICmBzBZ,OAAAC,eAAIE,EAAAM,UAAA,WDhBOC,ICgBX,WAEC,MAAO,IAAId,GAAAsB,SAASd,KAAKwB,sBDffjB,YAAY,EACZC,cAAc,ICiB1BT,IDbIR,GAAAA,WAAkBQ","file":"Stopwatch.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\ndefine([\"require\", \"exports\", \"../Time/TimeSpan\"], function (require, exports, TimeSpan_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function getTimestampMilliseconds() {\n        return (new Date()).getTime();\n    }\n    var Stopwatch = /** @class */ (function () {\n        function Stopwatch() {\n            this._elapsed = 0;\n            this._startTimeStamp = NaN;\n            this._isRunning = false;\n        }\n        Stopwatch.getTimestampMilliseconds = function () {\n            return getTimestampMilliseconds();\n        };\n        Object.defineProperty(Stopwatch.prototype, \"isRunning\", {\n            get: function () {\n                return this._isRunning;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Stopwatch.startNew = function () {\n            var s = new Stopwatch();\n            s.start();\n            return s;\n        };\n        Stopwatch.measure = function (closure) {\n            var start = getTimestampMilliseconds();\n            closure();\n            return new TimeSpan_1.TimeSpan(getTimestampMilliseconds() - start);\n        };\n        Stopwatch.prototype.start = function () {\n            var _ = this;\n            if (!_._isRunning) {\n                _._startTimeStamp = getTimestampMilliseconds();\n                _._isRunning = true;\n            }\n        };\n        Stopwatch.prototype.stop = function () {\n            var _ = this;\n            if (_._isRunning) {\n                _._elapsed += _.currentLapMilliseconds;\n                _._isRunning = false;\n            }\n        };\n        Stopwatch.prototype.reset = function () {\n            var _ = this;\n            _._elapsed = 0;\n            _._isRunning = false;\n            _._startTimeStamp = NaN;\n        };\n        // Effectively calls a stop start and continues timing...\n        // Can also be called to effectively start a lap before calling it again to get the elapsed lap time.\n        Stopwatch.prototype.lap = function () {\n            var _ = this;\n            if (_._isRunning) {\n                var t = getTimestampMilliseconds();\n                var s = _._startTimeStamp;\n                var e = t - s;\n                _._startTimeStamp = t;\n                _._elapsed += e;\n                return new TimeSpan_1.TimeSpan(e);\n            }\n            else\n                return TimeSpan_1.TimeSpan.zero;\n        };\n        Object.defineProperty(Stopwatch.prototype, \"currentLapMilliseconds\", {\n            get: function () {\n                return this._isRunning\n                    ? (getTimestampMilliseconds() - this._startTimeStamp)\n                    : 0;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Stopwatch.prototype, \"currentLap\", {\n            get: function () {\n                return this._isRunning\n                    ? new TimeSpan_1.TimeSpan(this.currentLapMilliseconds)\n                    : TimeSpan_1.TimeSpan.zero;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Stopwatch.prototype, \"elapsedMilliseconds\", {\n            get: function () {\n                var _ = this;\n                var timeElapsed = _._elapsed;\n                if (_._isRunning)\n                    timeElapsed += _.currentLapMilliseconds;\n                return timeElapsed;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Stopwatch.prototype, \"elapsed\", {\n            get: function () {\n                return new TimeSpan_1.TimeSpan(this.elapsedMilliseconds);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return Stopwatch;\n    }());\n    exports.default = Stopwatch;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {TimeSpan} from \"../Time/TimeSpan\";\r\nimport {ITimer} from \"../Timers/ITimer\";\r\n\r\nfunction getTimestampMilliseconds():number\r\n{\r\n\treturn (new Date()).getTime();\r\n}\r\n\r\nexport default class Stopwatch\r\n\timplements ITimer\r\n{\r\n\r\n\tstatic getTimestampMilliseconds():number\r\n\t{\r\n\t\treturn getTimestampMilliseconds();\r\n\t}\r\n\r\n\tprivate _elapsed:number = 0;\r\n\tprivate _startTimeStamp:number = NaN;\r\n\tprivate _isRunning:boolean = false;\r\n\r\n\r\n\tget isRunning():boolean\r\n\t{\r\n\t\treturn this._isRunning;\r\n\t}\r\n\r\n\tstatic startNew():Stopwatch\r\n\t{\r\n\t\tconst s = new Stopwatch();\r\n\t\ts.start();\r\n\t\treturn s;\r\n\t}\r\n\r\n\tstatic measure(closure:() => void):TimeSpan\r\n\t{\r\n\t\tconst start = getTimestampMilliseconds();\r\n\t\tclosure();\r\n\t\treturn new TimeSpan(getTimestampMilliseconds() - start);\r\n\t}\r\n\r\n\tstart():void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(!_._isRunning)\r\n\t\t{\r\n\t\t\t_._startTimeStamp = getTimestampMilliseconds();\r\n\t\t\t_._isRunning = true;\r\n\t\t}\r\n\t}\r\n\r\n\tstop():void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(_._isRunning)\r\n\t\t{\r\n\t\t\t_._elapsed += _.currentLapMilliseconds;\r\n\t\t\t_._isRunning = false;\r\n\t\t}\r\n\t}\r\n\r\n\treset():void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_._elapsed = 0;\r\n\t\t_._isRunning = false;\r\n\t\t_._startTimeStamp = NaN;\r\n\t}\r\n\r\n\t// Effectively calls a stop start and continues timing...\r\n\t// Can also be called to effectively start a lap before calling it again to get the elapsed lap time.\r\n\tlap():TimeSpan\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(_._isRunning)\r\n\t\t{\r\n\t\t\tconst t = getTimestampMilliseconds();\r\n\t\t\tconst s = _._startTimeStamp;\r\n\t\t\tconst e = t - s;\r\n\t\t\t_._startTimeStamp = t;\r\n\t\t\t_._elapsed += e;\r\n\t\t\treturn new TimeSpan(e);\r\n\t\t}\r\n\t\telse\r\n\t\t\treturn TimeSpan.zero;\r\n\t}\r\n\r\n\tget currentLapMilliseconds():number\r\n\t{\r\n\t\treturn this._isRunning\r\n\t\t\t? (getTimestampMilliseconds() - this._startTimeStamp)\r\n\t\t\t: 0;\r\n\t}\r\n\r\n\tget currentLap():TimeSpan\r\n\t{\r\n\t\treturn this._isRunning\r\n\t\t\t? new TimeSpan(this.currentLapMilliseconds)\r\n\t\t\t: TimeSpan.zero;\r\n\t}\r\n\r\n\tget elapsedMilliseconds():number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tlet timeElapsed = _._elapsed;\r\n\r\n\t\tif(_._isRunning)\r\n\t\t\ttimeElapsed += _.currentLapMilliseconds;\r\n\r\n\t\treturn timeElapsed;\r\n\t}\r\n\r\n\tget elapsed():TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(this.elapsedMilliseconds);\r\n\t}\r\n\r\n}\r\n"]}