{"version":3,"sources":["System/Uri/QueryBuilder.ts"],"names":[],"mappings":"AAAA;;;GAGG;;;;;;;;;;;;;;;;;;;;;;;8BAHH;;;eAGG;YASH,oCAAoC;YAC9B,SAAS,GAAG,iBAAe,CAAC;YAGlC;;;;eAIG;YACH;gBAAkC,gCAAmE;gBAGpG,sBACC,KAA4B,EAC5B,YAA2B;oBAA3B,6BAAA,EAAA,mBAA2B;oBAF5B,YAIC,iBAAO,SAGP;oBADA,KAAI,CAAC,WAAW,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;;gBACvC,CAAC;gBAGM,iBAAI,GAAX,UACC,KAA4B,EAC5B,YAA2B;oBAA3B,6BAAA,EAAA,mBAA2B;oBAE3B,OAAO,IAAI,YAAY,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;gBAC9C,CAAC;gBAED,kCAAW,GAAX,UACC,KAA4B,EAC5B,YAA2B;oBAA3B,6BAAA,EAAA,mBAA2B;oBAG3B,IAAG,YAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EACvB;wBACC,IAAI,CAAC,gBAAgB,CAAS,KAAK,EAAE,YAAY,CAAC,CAAC;qBACnD;yBACI,IAAG,oCAAuB,CAAC,KAAK,CAAC,EACtC;wBACC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;qBAC1B;yBAED;wBACC,IAAI,CAAC,SAAS,CAAmB,KAAK,CAAC,CAAC;qBACxC;oBAED,OAAO,IAAI,CAAC;gBACb,CAAC;gBAED;;;;;;mBAMG;gBACH,uCAAgB,GAAhB,UACC,MAAa,EACb,WAA0B,EAC1B,YAA2B;oBAD3B,4BAAA,EAAA,kBAA0B;oBAC1B,6BAAA,EAAA,mBAA2B;oBAE3B,IAAM,CAAC,GAAG,IAAI,CAAC;oBACf,mBAAK,CAAC,MAAM,EACX,UAAC,GAAG,EAAE,KAAK;wBAEV,IAAG,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,EACrB;4BACC,IAAM,IAAI,GAAG,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;4BAC7B,IAAG,CAAC,IAAI,CAAC,YAAU,CAAC,KAAK,CAAC;gCACzB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;gCAEjB,CAAC,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAqB,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;yBACpD;;4BAEA,CAAC,CAAC,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;oBACzB,CAAC,EACD,WAAW,EACX,YAAY,CAAC,CAAC;oBAEf,OAAO,IAAI,CAAC;gBACb,CAAC;gBAGD;;mBAEG;gBACH,6BAAM,GAAN,UAAO,gBAAyB;oBAE/B,OAAO,oBAAM,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;gBACvC,CAAC;gBAED,+BAAQ,GAAR;oBAEC,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC;gBACtB,CAAC;gBACF,mBAAC;YAAD,CAvFA,AAuFC,CAvFiC,uDAA0B,GAuF3D;;iCAEc,YAAY;QAC3B,CAAC","file":"QueryBuilder.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Type} from \"../Types\";\r\nimport {OrderedStringKeyDictionary} from \"../Collections/Dictionaries/OrderedStringKeyDictionary\";\r\nimport {isEnumerableOrArrayLike} from \"../Collections/Enumeration/Enumerator\";\r\nimport {UriComponent} from \"./UriComponent\";\r\nimport {QueryParam} from \"./QueryParam\";\r\nimport {encode, parse} from \"./QueryParams\";\r\nimport __extendsImport from \"../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n\r\n/**\r\n * Provides a means for parsing and building a set of parameters.\r\n *\r\n * In other languages, dictionaries are not reliable for retaining the order of stored values. So for certainty and flexibility we use an ordered dictionary as a base class.\r\n */\r\nexport class QueryBuilder extends OrderedStringKeyDictionary<UriComponent.Value|UriComponent.Value[]>\r\n{\r\n\r\n\tconstructor(\r\n\t\tquery:QueryParam.Convertible,\r\n\t\tdecodeValues:boolean = true)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis.importQuery(query, decodeValues);\r\n\t}\r\n\r\n\r\n\tstatic init(\r\n\t\tquery:QueryParam.Convertible,\r\n\t\tdecodeValues:boolean = true):QueryBuilder\r\n\t{\r\n\t\treturn new QueryBuilder(query, decodeValues);\r\n\t}\r\n\r\n\timportQuery(\r\n\t\tquery:QueryParam.Convertible,\r\n\t\tdecodeValues:boolean = true):QueryBuilder\r\n\t{\r\n\r\n\t\tif(Type.isString(query))\r\n\t\t{\r\n\t\t\tthis.importFromString(<string>query, decodeValues);\r\n\t\t}\r\n\t\telse if(isEnumerableOrArrayLike(query))\r\n\t\t{\r\n\t\t\tthis.importEntries(query);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.importMap(<UriComponent.Map>query);\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Property parses the components of an URI into their values or array of values.\r\n\t * @param values\r\n\t * @param deserialize\r\n\t * @param decodeValues\r\n\t * @returns {QueryBuilder}\r\n\t */\r\n\timportFromString(\r\n\t\tvalues:string,\r\n\t\tdeserialize:boolean = true,\r\n\t\tdecodeValues:boolean = true):QueryBuilder\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tparse(values,\r\n\t\t\t(key, value)=>\r\n\t\t\t{\r\n\t\t\t\tif(_.containsKey(key))\r\n\t\t\t\t{\r\n\t\t\t\t\tconst prev = _.getValue(key);\r\n\t\t\t\t\tif((prev)instanceof(Array))\r\n\t\t\t\t\t\tprev.push(value);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t_.setValue(key, [<UriComponent.Value>prev, value]);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\t_.setValue(key, value);\r\n\t\t\t},\r\n\t\t\tdeserialize,\r\n\t\t\tdecodeValues);\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns the encoded URI string\r\n\t */\r\n\tencode(prefixIfNotEmpty?:boolean):string\r\n\t{\r\n\t\treturn encode(this, prefixIfNotEmpty);\r\n\t}\r\n\r\n\ttoString():string\r\n\t{\r\n\t\treturn this.encode();\r\n\t}\r\n}\r\n\r\nexport default QueryBuilder;\r\n"]}