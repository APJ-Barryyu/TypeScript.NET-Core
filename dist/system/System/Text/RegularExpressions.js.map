{"version":3,"sources":["System/Text/RegularExpressions.ts"],"names":[],"mappings":"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","file":"RegularExpressions.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Named groups based on: http://trentrichardson.com/2011/08/02/javascript-regexp-match-named-captures/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n// NOTE: Avoid real (types/interfaces only = ok) dependencies so this class can be used cleanly.\r\nimport {IMap} from \"../../IMap\";\r\nimport {Primitive} from \"../Primitive\";\r\nimport {SelectorWithIndex} from \"../FunctionTypes\";\r\nimport __extendsImport from \"../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst EMPTY:string = \"\";\r\n\r\nconst _I = 'i', _G = 'g', _M = 'm', _U = 'u', _W = 'w', _Y = 'y';\r\n\r\n\r\n/**\r\n * https://msdn.microsoft.com/en-us/library/system.text.regularexpressions.regexoptions%28v=vs.110%29.aspx\r\n */\r\nexport module RegexOptions\r\n{\r\n\texport type Global = 'g';\r\n\texport type IgnoreCase = 'i';\r\n\texport type MultiLine = 'm';\r\n\texport type Unicode = 'u';\r\n\texport type Sticky = 'y';\r\n\texport type IgnorePatternWhitespace = \"w\";\r\n\r\n\texport type Literal =\r\n\t\tGlobal\r\n\t\t| IgnoreCase\r\n\t\t| MultiLine\r\n\t\t| Unicode\r\n\t\t| Sticky\r\n\t\t| IgnorePatternWhitespace;\r\n\r\n\r\n\t/**\r\n\t * Specifies case-insensitive matching. For more information, see the \"Case-Insensitive Matching \" section in the Regular Expression Options topic.\r\n\t */\r\n\texport const IGNORE_CASE:IgnoreCase = _I;\r\n\texport const I:IgnoreCase = _I;\r\n\r\n\t/**\r\n\t * Specifies global matching instead of single.\r\n\t */\r\n\texport const GLOBAL:Global = _G;\r\n\texport const G:Global = _G;\r\n\r\n\t/**\r\n\t * treat beginning and end characters (^ and $) as working over multiple lines (i.e., match the beginning or end of each line (delimited by \\n or \\r), not only the very beginning or end of the whole input string)\r\n\t */\r\n\texport const MULTI_LINE:MultiLine = _M;\r\n\texport const M:MultiLine = _M;\r\n\r\n\t/**\r\n\t * treat pattern as a sequence of unicode code points\r\n\t */\r\n\texport const UNICODE:Unicode = _U;\r\n\texport const U:Unicode = _U;\r\n\r\n\t/**\r\n\t * matches only from the index indicated by the lastIndex property of this regular expression in the target string (and does not attempt to match from any later indexes).\r\n\t */\r\n\texport const STICKY:Sticky = _Y;\r\n\texport const Y:Sticky = _Y;\r\n\r\n\t/**\r\n\t * Modifies the pattern to ignore standard whitespace characters.\r\n\t */\r\n\texport const IGNORE_PATTERN_WHITESPACE:IgnorePatternWhitespace = _W;\r\n\texport const W:IgnorePatternWhitespace = _W;\r\n\r\n}\r\n\r\n\r\nexport class Regex\r\n{\r\n\tprivate readonly _re:RegExp;\r\n\tprivate readonly _keys:string[] | undefined;\r\n\r\n\tconstructor(\r\n\t\tpattern:string | RegExp,\r\n\t\toptions?:RegexOptions.Literal | RegexOptions.Literal[],\r\n\t\t...extra:RegexOptions.Literal[])\r\n\t{\r\n\t\tif(!pattern) throw new Error(\"'pattern' cannot be null or empty.\");\r\n\r\n\t\tlet patternString:string,\r\n\t\t    flags:string\r\n\t\t\t    = (options && ((options) instanceof (Array)\r\n\t\t\t    ? options\r\n\t\t\t    : [options]).concat(extra) || extra)\r\n\t\t\t    .join(EMPTY)\r\n\t\t\t    .toLowerCase();\r\n\r\n\t\tif(pattern instanceof RegExp)\r\n\t\t{\r\n\t\t\tlet p = <RegExp>pattern;\r\n\t\t\tif(p.ignoreCase && flags.indexOf(_I)=== -1)\r\n\t\t\t\tflags += _I;\r\n\t\t\tif(p.multiline && flags.indexOf(_M)=== -1)\r\n\t\t\t\tflags += _M;\r\n\t\t\tpatternString = p.source;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tpatternString = pattern;\r\n\t\t}\r\n\t\tconst ignoreWhiteSpace = flags.indexOf(_W)!= -1;\r\n\r\n\t\t// For the majority of expected behavior, we need to eliminate global and whitespace ignore.\r\n\t\tflags = flags.replace(/[gw]/g, EMPTY);\r\n\r\n\t\t// find the keys inside the pattern, and place in mapping array {0:'key1', 1:'key2', ...}\r\n\t\tconst keys:string[] = [];\r\n\t\t{\r\n\t\t\tlet k = patternString.match(/(?!\\(\\?<)(\\w+)(?=>)/g);\r\n\t\t\tif(k)\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0, len = k.length; i<len; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tkeys[i + 1] = k[i];\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// remove keys from regexp leaving standard regexp\r\n\t\t\t\tpatternString = patternString.replace(/\\?<\\w+>/g, EMPTY);\r\n\t\t\t\tthis._keys = keys;\r\n\t\t\t}\r\n\r\n\t\t\tif(ignoreWhiteSpace)\r\n\t\t\t\tpatternString = patternString.replace(/\\s+/g, \"\\\\s*\");\r\n\r\n\t\t\tthis._re = new RegExp(patternString, flags);\r\n\r\n\t\t}\r\n\r\n\t\tObject.freeze(this);\r\n\t}\r\n\r\n\tmatch(input:string, startIndex:number = 0):Match\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tlet r:RegExpExecArray | null;\r\n\t\tif(!input\r\n\t\t\t|| startIndex>=input.length\r\n\t\t\t|| !(r = this._re.exec(input.substring(startIndex))))\r\n\t\t\treturn Match.Empty;\r\n\r\n\t\tif(!(startIndex>0)) startIndex = 0;\r\n\r\n\t\tconst first = startIndex + r.index;\r\n\t\tlet loc = first;\r\n\t\tconst groups:Group[]       = [],\r\n\t\t      groupMap:IMap<Group> = {};\r\n\r\n\t\tfor(let i = 0, len = r.length; i<len; ++i)\r\n\t\t{\r\n\t\t\tlet text = r[i];\r\n\t\t\tlet g = EmptyGroup;\r\n\t\t\tif(text!=null)\r\n\t\t\t{\r\n\t\t\t\t// Empty string might mean \\b match or similar.\r\n\t\t\t\tg = new Group(text, loc);\r\n\t\t\t\tg.freeze();\r\n\t\t\t}\r\n\t\t\tif(i && _._keys && i<_._keys.length) groupMap[_._keys[i]] = g;\r\n\t\t\tgroups.push(g);\r\n\t\t\tif(i!==0) loc += text.length;\r\n\t\t}\r\n\r\n\t\tconst m = new Match(r[0], first, groups, groupMap);\r\n\t\tm.freeze();\r\n\t\treturn m;\r\n\t}\r\n\r\n\tmatches(input:string):Match[] //Readonly<Match[]>\r\n\t{\r\n\t\tconst matches:Match[] = [];\r\n\t\tlet m:Match, p = 0;\r\n\t\tconst end = input && input.length || 0;\r\n\t\twhile(p<end && (m = this.match(input, p)) && m.success)\r\n\t\t{\r\n\t\t\tmatches.push(m);\r\n\t\t\tp = m.index + m.length;\r\n\t\t}\r\n\t\tObject.freeze(matches);\r\n\t\treturn matches;\r\n\t}\r\n\r\n\treplace(\r\n\t\tinput:string,\r\n\t\treplacement:Primitive,\r\n\t\tcount?:number):string;\r\n\r\n\treplace(\r\n\t\tinput:string,\r\n\t\tevaluator:SelectorWithIndex<Match, Primitive>,\r\n\t\tcount?:number):string;\r\n\r\n\treplace(\r\n\t\tinput:string,\r\n\t\tr:any,\r\n\t\tcount:number = Infinity):string\r\n\t{\r\n\t\tif(!input || r==null || !(count>0)) return input;\r\n\t\tconst result:string[] = [];\r\n\t\tlet p = 0;\r\n\t\tconst end = input.length, isEvaluator = typeof r==\"function\";\r\n\r\n\t\tlet m:Match, i:number = 0;\r\n\t\twhile(i<count && p<end && (m = this.match(input, p)) && m.success)\r\n\t\t{\r\n\t\t\tlet {index, length} = m;\r\n\t\t\tif(p!==index) result.push(input.substring(p, index));\r\n\t\t\tresult.push(isEvaluator ? r(m, i++) : r);\r\n\t\t\tp = index + length;\r\n\t\t}\r\n\r\n\t\tif(p<end) result.push(input.substring(p));\r\n\r\n\t\treturn result.join(EMPTY);\r\n\t}\r\n\r\n\tisMatch(input:string):boolean\r\n\t{\r\n\t\treturn this._re.test(input);\r\n\t}\r\n\r\n\tstatic isMatch(\r\n\t\tinput:string,\r\n\t\tpattern:string,\r\n\t\toptions?:RegexOptions.Literal[]):boolean\r\n\t{\r\n\t\tconst r = new Regex(pattern, options);\r\n\t\treturn r.isMatch(input);\r\n\t}\r\n\r\n\tstatic replace(\r\n\t\tinput:string,\r\n\t\tpattern:string,\r\n\t\treplacement:string,\r\n\t\toptions?:RegexOptions.Literal[]):string;\r\n\r\n\tstatic replace(\r\n\t\tinput:string,\r\n\t\tpattern:string,\r\n\t\tevaluator:SelectorWithIndex<Match, Primitive>,\r\n\t\toptions?:RegexOptions.Literal[]):string;\r\n\r\n\tstatic replace(\r\n\t\tinput:string,\r\n\t\tpattern:string,\r\n\t\te:any,\r\n\t\toptions?:RegexOptions.Literal[]):string\r\n\t{\r\n\t\tconst r = new Regex(pattern, options);\r\n\t\treturn r.replace(input, e);\r\n\t}\r\n}\r\n\r\nexport class Capture\r\n{\r\n\r\n\tget length():number\r\n\t{\r\n\t\tconst v = this.value;\r\n\t\treturn v && v.length || 0;\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tpublic readonly value:string = EMPTY,\r\n\t\tpublic readonly index:number = -1)\r\n\t{\r\n\t}\r\n\r\n\tfreeze():void\r\n\t{\r\n\t\tObject.freeze(this);\r\n\t}\r\n}\r\n\r\nexport class Group\r\n\textends Capture\r\n{\r\n\tget success():boolean\r\n\t{\r\n\t\treturn this.index!= -1;\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tvalue:string = EMPTY,\r\n\t\tindex:number = -1)\r\n\t{\r\n\t\tsuper(value, index);\r\n\t}\r\n\r\n\tstatic get Empty():Group\r\n\t{\r\n\t\treturn EmptyGroup;\r\n\t}\r\n\r\n}\r\n\r\nconst EmptyGroup = new Group();\r\nEmptyGroup.freeze();\r\n\r\nexport class Match\r\n\textends Group\r\n{\r\n\r\n\tconstructor(\r\n\t\tvalue:string                            = EMPTY,\r\n\t\tindex:number                            = -1,\r\n\t\tpublic readonly groups:Group[]          = [],\r\n\t\tpublic readonly namedGroups:IMap<Group> = {})\r\n\t{\r\n\t\tsuper(value, index);\r\n\t}\r\n\r\n\tfreeze():void\r\n\t{\r\n\t\tif(!this.groups) throw new Error(\"'groups' cannot be null.\");\r\n\t\tif(!this.namedGroups) throw new Error(\"'groupMap' cannot be null.\");\r\n\t\tObject.freeze(this.groups);\r\n\t\tObject.freeze(this.namedGroups);\r\n\t\tsuper.freeze();\r\n\t}\r\n\r\n\tstatic get Empty():Match\r\n\t{\r\n\t\treturn EmptyMatch;\r\n\t}\r\n}\r\n\r\nconst EmptyMatch = new Match();\r\nEmptyMatch.freeze();\r\n\r\n\r\nexport default Regex;"]}