{"version":3,"sources":["System/Events/EventDispatcherEntry.ts"],"names":[],"mappings":"AAAA;;;GAGG;;;;;;;;;;;;;;;;;;;;;;;;;;8BAHH;;;eAGG;YAWH,oCAAoC;YAC9B,SAAS,GAAG,iBAAe,CAAC;YAE5B,IAAI,GAAG,sBAAsB,CAAC;YACpC;gBACQ,wCAAc;gBAGrB,8BACQ,IAAW,EACX,QAAuB,EACvB,MAAe,EACtB,SAAkB;oBAJnB,YAMC,kBAAM,IAAI,EAAE,SAAS,CAAC,SAWtB;oBAhBO,UAAI,GAAJ,IAAI,CAAO;oBACX,cAAQ,GAAR,QAAQ,CAAe;oBACvB,YAAM,GAAN,MAAM,CAAS;oBAKtB,IAAG,CAAC,QAAQ;wBACX,MAAM,IAAI,6CAAqB,CAAC,UAAU,CAAC,CAAC;oBAC7C,IAAG,YAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,aAAa,EAAE,YAAI,CAAC,QAAQ,CAAC;wBAC1F,MAAM,IAAI,qCAAiB,CAAC,UAAU,EAAE,uEAAuE,CAAC,CAAC;oBAElH,IAAM,CAAC,GAAG,KAAI,CAAC;oBACf,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;oBACd,CAAC,CAAC,QAAQ,GAAG,QAAQ,CAAC;oBACtB,CAAC,CAAC,MAAM,GAAG,MAAM,CAAC;;gBACnB,CAAC;gBAES,yCAAU,GAApB;oBAEC,iBAAM,UAAU,WAAE,CAAC;oBACnB,IAAI,CAAC,QAAQ,GAAQ,IAAI,CAAC;gBAC3B,CAAC;gBAED;;;;mBAIG;gBACH,uCAAQ,GAAR,UAAS,CAAO;oBAEf,IAAM,CAAC,GAAG,IAAI,CAAC;oBACf,IAAG,CAAC,CAAC,WAAW;wBAAE,OAAO,KAAK,CAAC;oBAE/B,IAAM,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,IAAE,CAAC,CAAC,IAAI,CAAC;oBAC9C,IAAG,CAAC,EACJ;wBACC,IAAG,YAAI,CAAC,UAAU,CAAC,CAAC,CAAC;4BACd,CAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,uCAAuC;;4BAEvC,CAAE,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;qBACzC;oBACD,OAAO,CAAC,CAAC;gBACV,CAAC;gBAED;;;;;mBAKG;gBACH,sCAAO,GAAP,UAAQ,IAAW,EAAE,QAAuB;oBAE3C,IAAM,CAAC,GAAG,IAAI,CAAC;oBACf,OAAO,CAAC,CAAC,IAAI,IAAE,IAAI;2BACf,CAAC,CAAC,QAAQ,IAAE,QAAQ,CAAC;gBAC1B,CAAC;gBAED;;;;mBAIG;gBACH,qCAAM,GAAN,UAAO,KAAmC;oBAEzC,IAAM,CAAC,GAAG,IAAI,CAAC;oBACf,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC;2BACxC,uBAAa,CAAC,CAAC,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;gBAClD,CAAC;gBACF,2BAAC;YAAD,CA1EA,AA0EC,CAzEO,+BAAc,GAyErB;;iCAEc,oBAAoB;QAAC,CAAC","file":"EventDispatcherEntry.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Type} from \"../Types\";\r\nimport {DisposableBase} from \"../Disposable/DisposableBase\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {ArgumentException} from \"../Exceptions/ArgumentException\";\r\nimport {areEquivalent} from \"../Compare\";\r\nimport {IEventListener} from \"./IEventListener\";\r\nimport {IEquatable} from \"../IEquatable\";\r\nimport __extendsImport from \"../../extends\";\r\nimport {Closure} from \"../FunctionTypes\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst NAME = \"EventDispatcherEntry\";\r\nexport class EventDispatcherEntry<TParams>\r\nextends DisposableBase implements IEquatable<EventDispatcherEntry<TParams>>\r\n{\r\n\r\n\tconstructor(\r\n\t\tpublic type:string,\r\n\t\tpublic listener:IEventListener,\r\n\t\tpublic params?:TParams,\r\n\t\tfinalizer?:Closure)//, useWeakReference: boolean = false)\r\n\t{\r\n\t\tsuper(NAME, finalizer);\r\n\r\n\t\tif(!listener)\r\n\t\t\tthrow new ArgumentNullException('listener');\r\n\t\tif(Type.isObject(listener) && !Type.hasMemberOfType(listener, \"handleEvent\", Type.FUNCTION))\r\n\t\t\tthrow new ArgumentException('listener', \"is invalid type.  Must be a function or an object with 'handleEvent'.\");\r\n\r\n\t\tconst _ = this;\r\n\t\t_.type = type;\r\n\t\t_.listener = listener;\r\n\t\t_.params = params;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis.listener = <any>null;\r\n\t}\r\n\r\n\t/**\r\n\t * Safely dispatches an event if entry is not disposed and type matches.\r\n\t * @param e\r\n\t * @returns {IEventListener|boolean}\r\n\t */\r\n\tdispatch(e:Event):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(_.wasDisposed) return false;\r\n\r\n\t\tconst l = _.listener, d = l && e.type==_.type;\r\n\t\tif(d)\r\n\t\t{\r\n\t\t\tif(Type.isFunction(l))\r\n\t\t\t\t(<any>_).listener(e); // Use 'this' to ensure call reference.\r\n\t\t\telse\r\n\t\t\t\t(<EventListenerObject>l).handleEvent(e);\r\n\t\t}\r\n\t\treturn d;\r\n\t}\r\n\r\n\t/**\r\n\t * Compares type and listener object only.\r\n\t * @param type\r\n\t * @param listener\r\n\t * @returns {boolean}\r\n\t */\r\n\tmatches(type:string, listener:IEventListener):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\treturn _.type==type\r\n\t\t\t&& _.listener==listener;\r\n\t}\r\n\r\n\t/**\r\n\t * Compares type, listener, and priority.\r\n\t * @param other\r\n\t * @returns {boolean}\r\n\t */\r\n\tequals(other:EventDispatcherEntry<TParams>):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\treturn _.matches(other.type, other.listener)\r\n\t\t\t&& areEquivalent(_.params, other.params, false);\r\n\t}\r\n}\r\n\r\nexport default EventDispatcherEntry;"]}