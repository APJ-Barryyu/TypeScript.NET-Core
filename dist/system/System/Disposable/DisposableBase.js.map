{"version":3,"sources":["System/Disposable/DisposableBase.ts"],"names":[],"mappings":"AAAA;;;GAGG;;;;;;;;;;;8BAHH;;;eAGG;YAMH;gBAGC,wBACoB,qBAA4B,EAC9B,WAAyB;oBADvB,0BAAqB,GAArB,qBAAqB,CAAO;oBAC9B,gBAAW,GAAX,WAAW,CAAc;oBAInC,kBAAa,GAAW,KAAK,CAAC;gBAFtC,CAAC;gBAID,sBAAI,uCAAW;yBAAf;wBAEC,OAAO,IAAI,CAAC,aAAa,CAAC;oBAC3B,CAAC;;;mBAAA;gBAES,wCAAe,GAAzB,UACC,OAAe,EACf,UAA8C;oBAA9C,2BAAA,EAAA,aAAoB,IAAI,CAAC,qBAAqB;oBAE9C,IAAG,IAAI,CAAC,aAAa;wBACpB,MAAM,IAAI,iDAAuB,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;oBACxD,OAAO,IAAI,CAAC;gBACb,CAAC;gBAGD,gCAAO,GAAP;oBAEC,IAAM,CAAC,GAAG,IAAI,CAAC;oBACf,IAAG,CAAC,CAAC,CAAC,aAAa,EACnB;wBACC,uEAAuE;wBACvE,yEAAyE;wBACzE,CAAC,CAAC,aAAa,GAAG,IAAI,CAAC;wBACvB,IACA;4BACC,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC,sBAAsB;yBACtC;gCAED;4BACC,IAAG,CAAC,CAAC,WAAW,EAAE,uBAAuB;6BACzC;gCACC,CAAC,CAAC,WAAW,EAAE,CAAC;gCACV,CAAE,CAAC,WAAW,GAAG,KAAK,CAAC,CAAC;6BAC9B;yBACD;qBACD;gBACF,CAAC;gBAED,6BAA6B;gBACnB,mCAAU,GAApB,cAA8B,CAAC;gBAEhC,qBAAC;YAAD,CApDA,AAoDC,IAAA;;iCAEc,cAAc;QAAC,CAAC","file":"DisposableBase.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {ObjectDisposedException} from \"./ObjectDisposedException\";\r\nimport {IDisposableAware} from \"./IDisposableAware\";\r\nimport {Closure} from \"../FunctionTypes\";\r\n\r\nexport abstract class DisposableBase implements IDisposableAware\r\n{\r\n\r\n\tprotected constructor(\r\n\t\tprotected readonly _disposableObjectName:string,\r\n\t\tprivate readonly __finalizer?:Closure|null)\r\n\t{\r\n\t}\r\n\r\n\tprivate __wasDisposed:boolean = false;\r\n\r\n\tget wasDisposed():boolean\r\n\t{\r\n\t\treturn this.__wasDisposed;\r\n\t}\r\n\r\n\tprotected throwIfDisposed(\r\n\t\tmessage?:string,\r\n\t\tobjectName:string = this._disposableObjectName):true|never\r\n\t{\r\n\t\tif(this.__wasDisposed)\r\n\t\t\tthrow new ObjectDisposedException(objectName, message);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(!_.__wasDisposed)\r\n\t\t{\r\n\t\t\t// Preemptively set wasDisposed in order to prevent repeated disposing.\r\n\t\t\t// NOTE: in true multi-threaded scenarios, this needs to be synchronized.\r\n\t\t\t_.__wasDisposed = true;\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\t_._onDispose(); // Protected override.\r\n\t\t\t}\r\n\t\t\tfinally\r\n\t\t\t{\r\n\t\t\t\tif(_.__finalizer) // Private finalizer...\r\n\t\t\t\t{\r\n\t\t\t\t\t_.__finalizer();\r\n\t\t\t\t\t(<any>_).__finalizer = void 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Placeholder for overrides.\r\n\tprotected _onDispose():void { }\r\n\r\n}\r\n\r\nexport default DisposableBase;"]}