{"version":3,"sources":["System/Collections/CollectionBase.ts"],"names":[],"mappings":"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","file":"CollectionBase.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {forEach} from \"./Enumeration/Enumerator\";\r\nimport {areEqual} from \"../Compare\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {DisposableBase} from \"../Disposable/DisposableBase\";\r\nimport {ICollection} from \"./ICollection\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {IEnumerateEach} from \"./Enumeration/IEnumerateEach\";\r\nimport {Action, ActionWithIndex, EqualityComparison, PredicateWithIndex} from \"../FunctionTypes\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\nimport {ArrayLikeWritable} from \"./Array/ArrayLikeWritable\";\r\nimport {LinqEnumerable} from \"../../System.Linq/Linq\";\r\nimport {isCommonJS, isNodeJS, isRequireJS} from \"../Environment\";\r\nimport __extendsImport from \"../../extends\";\r\n//noinspection JSUnusedLocalSymbols\r\n//noinspection SpellCheckingInspection\r\nconst\r\n\tNAME = \"CollectionBase\",\r\n\tCMDC = \"Cannot modify a disposed collection.\",\r\n\tCMRO = \"Cannot modify a read-only collection.\";\r\nconst\r\n\tLINQ_PATH = \"../../System.Linq/Linq\";\r\n\r\nexport abstract class CollectionBase<T>\r\nextends DisposableBase implements ICollection<T>, IEnumerateEach<T>\r\n{\r\n\r\n\tprotected constructor(\r\n\t\tsource?:IEnumerableOrArray<T>|IEnumerator<T>,\r\n\t\tprotected _equalityComparer:EqualityComparison<T> = areEqual)\r\n\t{\r\n\t\tsuper(NAME);\r\n\t\tthis._importEntries(source);\r\n\t\tthis._updateRecursion = 0;\r\n\t\tthis._modifiedCount = 0;\r\n\t\tthis._version = 0;\r\n\t}\r\n\r\n\r\n\tprotected abstract getCount():number;\r\n\r\n\tget count():number\r\n\t{\r\n\t\treturn this.getCount();\r\n\t}\r\n\r\n\tprotected getIsReadOnly():boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\tget isReadOnly():boolean\r\n\t{\r\n\t\treturn this.getIsReadOnly();\r\n\t}\r\n\r\n\tprotected assertModifiable():true|never\r\n\t{\r\n\t\tthis.throwIfDisposed(CMDC);\r\n\t\tif(this.getIsReadOnly())\r\n\t\t\tthrow new InvalidOperationException(CMRO);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprotected _version:number; // Provides an easy means of tracking changes and invalidating enumerables.\r\n\r\n\r\n\tprotected assertVersion(version:number):true|never\r\n\t{\r\n\t\tif(version!==this._version)\r\n\t\t\tthrow new InvalidOperationException(\"Collection was modified.\");\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/*\r\n\t * Note: Avoid changing modified count by any means but ++;\r\n\t * If setting modified count by the result of a closure it may be a negative number or NaN and ruin the pattern.\r\n\t */\r\n\tprivate _modifiedCount:number;\r\n\tprivate _updateRecursion:number;\r\n\r\n\tprotected _onModified():void {}\r\n\r\n\tprotected _signalModification(increment?:boolean):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(increment) _._modifiedCount++;\r\n\t\tif(_._modifiedCount && !this._updateRecursion)\r\n\t\t{\r\n\t\t\t_._modifiedCount = 0;\r\n\t\t\t_._version++;\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\t_._onModified();\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t\t// Avoid fatal errors which may have been caused by consumer.\r\n\t\t\t\tconsole.error(ex);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprotected _incrementModified():void { this._modifiedCount++; }\r\n\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\tget isUpdating():boolean { return this._updateRecursion!=0; }\r\n\r\n\t/**\r\n\t * Takes a closure that if returning true will propagate an update signal.\r\n\t * Multiple update operations can be occurring at once or recursively and the onModified signal will only occur once they're done.\r\n\t * @param closure\r\n\t * @returns {boolean}\r\n\t */\r\n\thandleUpdate(closure?:() => boolean):boolean\r\n\t{\r\n\t\tif(!closure) return false;\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._updateRecursion++;\r\n\t\tlet updated:boolean = false;\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif(updated = closure())\r\n\t\t\t\t_._modifiedCount++;\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\t_._updateRecursion--;\r\n\t\t}\r\n\r\n\t\t_._signalModification();\r\n\r\n\t\treturn updated;\r\n\t}\r\n\r\n\tprotected abstract _addInternal(entry:T):boolean;\r\n\r\n\t/*\r\n\t * Note: for a slight amount more code, we avoid creating functions/closures.\r\n\t * Calling handleUpdate is the correct pattern, but if possible avoid creating another function scope.\r\n\t */\r\n\r\n\t/**\r\n\t * Adds an entry to the collection.\r\n\t * @param entry\r\n\t */\r\n\tadd(entry:T):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._updateRecursion++;\r\n\r\n\t\ttry\r\n\t\t{ if(_._addInternal(entry)) _._modifiedCount++; }\r\n\t\tfinally\r\n\t\t{ _._updateRecursion--; }\r\n\r\n\t\t_._signalModification();\r\n\r\n\t\treturn _;\r\n\t}\r\n\r\n\tprotected abstract _removeInternal(entry:T, max?:number):number;\r\n\r\n\t/**\r\n\t * Removes entries from the collection allowing for a limit.\r\n\t * For example if the collection not a distinct set, more than one entry could be removed.\r\n\t * @param entry The entry to remove.\r\n\t * @param max Limit of entries to remove.  Will remove all matches if no max specified.\r\n\t * @returns {number} The number of entries removed.\r\n\t */\r\n\tremove(entry:T, max:number = Infinity):number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._updateRecursion++;\r\n\r\n\t\tlet n:number = NaN;\r\n\t\ttry\r\n\t\t{ if(n = _._removeInternal(entry, max)) _._modifiedCount++; }\r\n\t\tfinally\r\n\t\t{ _._updateRecursion--; }\r\n\r\n\t\t_._signalModification();\r\n\t\treturn n;\r\n\t}\r\n\r\n\tprotected abstract _clearInternal():number;\r\n\r\n\t/**\r\n\t * Clears the contents of the collection resulting in a count of zero.\r\n\t * @returns {number}\r\n\t */\r\n\tclear():number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._updateRecursion++;\r\n\r\n\t\tlet n:number = NaN;\r\n\t\ttry\r\n\t\t{ if(n = _._clearInternal()) _._modifiedCount++; }\r\n\t\tfinally\r\n\t\t{ _._updateRecursion--; }\r\n\r\n\t\t_._signalModification();\r\n\r\n\t\treturn n;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._clearInternal();\r\n\t\tthis._version = 0;\r\n\t\tthis._updateRecursion = 0;\r\n\t\tthis._modifiedCount = 0;\r\n\t\tconst l = this._linq;\r\n\t\tthis._linq = void 0;\r\n\t\tif(l) l.dispose();\r\n\t}\r\n\r\n\tprotected _importEntries(entries:IEnumerableOrArray<T>|IEnumerator<T>|null|undefined):number\r\n\t{\r\n\t\tlet added = 0;\r\n\t\tif(entries)\r\n\t\t{\r\n\t\t\tif((entries) instanceof (Array))\r\n\t\t\t{\r\n\t\t\t\t// Optimize for avoiding a new closure.\r\n\t\t\t\tfor(let e of entries)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this._addInternal(e)) added++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tforEach(entries, e =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this._addInternal(e)) added++;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn added;\r\n\t}\r\n\r\n\t/**\r\n\t * Safely imports any array enumerator, or enumerable.\r\n\t * @param entries\r\n\t * @returns {number}\r\n\t */\r\n\timportEntries(entries:IEnumerableOrArray<T>|IEnumerator<T>):number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(!entries) return 0;\r\n\t\t_.assertModifiable();\r\n\t\t_._updateRecursion++;\r\n\r\n\t\tlet n:number = NaN;\r\n\t\ttry\r\n\t\t{ if(n = _._importEntries(entries)) _._modifiedCount++; }\r\n\t\tfinally\r\n\t\t{ _._updateRecursion--; }\r\n\r\n\t\t_._signalModification();\r\n\t\treturn n;\r\n\t}\r\n\r\n\t// Fundamentally the most important part of the collection.\r\n\r\n\t/**\r\n\t * Returns a enumerator for this collection.\r\n\t */\r\n\tabstract getEnumerator():IEnumerator<T>;\r\n\r\n\t/**\r\n\t * Returns an array filtered by the provided predicate.\r\n\t * Provided for similarity to JS Array.\r\n\t * @param predicate\r\n\t * @returns {[]}\r\n\t */\r\n\tfilter(predicate:PredicateWithIndex<T>):T[]\r\n\t{\r\n\t\tif(!predicate) throw new ArgumentNullException('predicate');\r\n\t\tlet count = !this.getCount();\r\n\t\tlet result:T[] = [];\r\n\t\tif(count)\r\n\t\t{\r\n\t\t\tthis.forEach((e, i) =>\r\n\t\t\t{\r\n\t\t\t\tif(predicate(e, i))\r\n\t\t\t\t\tresult.push(e);\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns true the first time predicate returns true.  Otherwise false.\r\n\t * Useful for searching through a collection.\r\n\t * @param predicate\r\n\t * @returns {any}\r\n\t */\r\n\tany(predicate?:PredicateWithIndex<T>):boolean\r\n\t{\r\n\t\tlet count = this.getCount();\r\n\t\tif(!count) return false;\r\n\t\tif(!predicate) return Boolean(count);\r\n\r\n\t\tlet found:boolean = false;\r\n\t\tthis.forEach((e, i) => !(found = predicate(e, i)));\r\n\t\treturn found;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns true the first time predicate returns true.  Otherwise false.\r\n\t * See '.any(predicate)'.  As this method is just just included to have similarity with a JS Array.\r\n\t * @param predicate\r\n\t * @returns {any}\r\n\t */\r\n\tsome(predicate?:PredicateWithIndex<T>):boolean\r\n\t{\r\n\t\treturn this.any(predicate);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns true if the equality comparer resolves true on any element in the collection.\r\n\t * @param entry\r\n\t * @returns {boolean}\r\n\t */\r\n\tcontains(entry:T):boolean\r\n\t{\r\n\t\tconst equals = this._equalityComparer;\r\n\t\treturn this.any(e => equals(entry, e));\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Special implementation of 'forEach': If the action returns 'false' the enumeration will stop.\r\n\t * @param action\r\n\t * @param useCopy\r\n\t */\r\n\tforEach(action:ActionWithIndex<T>, useCopy?:boolean):number\r\n\tforEach(action:PredicateWithIndex<T>, useCopy?:boolean):number\r\n\tforEach(action:ActionWithIndex<T> | PredicateWithIndex<T>, useCopy?:boolean):number\r\n\t{\r\n\t\tif(this.wasDisposed)\r\n\t\t\treturn 0;\r\n\r\n\t\tif(useCopy)\r\n\t\t{\r\n\t\t\tconst a = this.toArray();\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\treturn forEach(a, action);\r\n\t\t\t}\r\n\t\t\tfinally\r\n\t\t\t{\r\n\t\t\t\ta.length = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn forEach(this.getEnumerator(), action);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all values to numerically indexable object.\r\n\t * @param target\r\n\t * @param index\r\n\t * @returns {TTarget}\r\n\t */\r\n\tcopyTo<TTarget extends ArrayLikeWritable<T>>(\r\n\t\ttarget:TTarget,\r\n\t\tindex:number = 0):TTarget\r\n\t{\r\n\t\tif(!target) throw new ArgumentNullException('target');\r\n\r\n\t\tconst count = this.getCount();\r\n\t\tif(count)\r\n\t\t{\r\n\t\t\tconst newLength = count + index;\r\n\t\t\tif(target.length<newLength) target.length = newLength;\r\n\r\n\t\t\tconst e = this.getEnumerator();\r\n\t\t\twhile(e.moveNext()) // Disposes when finished.\r\n\t\t\t{\r\n\t\t\t\ttarget[index++] = <any>e.current;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn target;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an array of the collection contents.\r\n\t * @returns {any[]|Array}\r\n\t */\r\n\ttoArray():T[]\r\n\t{\r\n\t\tconst count = this.getCount();\r\n\t\treturn count\r\n\t\t\t? this.copyTo(count>65536 ? new Array<T>(count) : [])\r\n\t\t\t: [];\r\n\t}\r\n\r\n\tprivate _linq?:LinqEnumerable<T>;\r\n\r\n\t/**\r\n\t * .linq will return an LinqEnumerable if .linqAsync() has completed successfully or the default module loader is NodeJS+CommonJS.\r\n\t * @returns {LinqEnumerable}\r\n\t */\r\n\tget linq():LinqEnumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tlet e = this._linq;\r\n\r\n\t\tif(!e)\r\n\t\t{\r\n\r\n\t\t\tlet r:any;\r\n\t\t\ttry { r = eval('require'); } catch (ex) {}\r\n\r\n\t\t\tthis._linq = e = r && r(LINQ_PATH).default.from(this);\r\n\t\t\tif(!e)\r\n\t\t\t{\r\n\t\t\t\tthrow isRequireJS\r\n\t\t\t\t\t? `using .linq to load and initialize a LinqEnumerable is currently only supported within a NodeJS environment.\r\nImport System.Linq/Linq and use Enumerable.from(e) instead.\r\nYou can also preload the Linq module as a dependency or use .linqAsync(callback) for AMD/RequireJS.`\r\n\t\t\t\t\t: \"There was a problem importing System.Linq/Linq\"\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn e;\r\n\t}\r\n\r\n\t/**\r\n\t * .linqAsync() is for use with deferred loading.\r\n\t * Ensures an instance of the Linq extensions is available and then passes it to the callback.\r\n\t * Returns an LinqEnumerable if one is already available, otherwise undefined.\r\n\t * Passing no parameters will still initiate loading and initializing the LinqEnumerable which can be useful for pre-loading.\r\n\t * Any call to .linqAsync() where an LinqEnumerable is returned can be assured that any subsequent calls to .linq will return the same instance.\r\n\t * @param callback\r\n\t * @returns {LinqEnumerable}\r\n\t */\r\n\tlinqAsync(callback?:Action<LinqEnumerable<T>>):LinqEnumerable<T>|undefined\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tlet e = this._linq;\r\n\r\n\t\tif(!e)\r\n\t\t{\r\n\t\t\tif(isRequireJS)\r\n\t\t\t{\r\n\t\t\t\teval(\"require\")([LINQ_PATH], (linq:any) =>\r\n\t\t\t\t{\r\n\t\t\t\t\t// Could end up being called more than once, be sure to check for ._linq before setting...\r\n\t\t\t\t\te = this._linq;\r\n\t\t\t\t\tif(!e) this._linq = e = linq.default.from(this);\r\n\t\t\t\t\tif(!e) throw \"There was a problem importing System.Linq/Linq\";\r\n\t\t\t\t\tif(callback) callback(e);\r\n\t\t\t\t\tcallback = void 0; // In case this is return synchronously..\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse if(isNodeJS && isCommonJS)\r\n\t\t\t{\r\n\t\t\t\te = this.linq;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tthrow \"Cannot find a compatible loader for importing System.Linq/Linq\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(e && callback) callback(e);\r\n\r\n\t\treturn e;\r\n\t}\r\n}\r\n"]}