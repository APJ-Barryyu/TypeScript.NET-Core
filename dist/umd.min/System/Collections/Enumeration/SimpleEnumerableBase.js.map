{"version":3,"sources":["System/Collections/Enumeration/SimpleEnumerableBase.js","System/Collections/Enumeration/SimpleEnumerableBase.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","IteratorResult_1","VOID0","SimpleEnumerableBase","this","_index","reset","prototype","get","_current","enumerable","configurable","_canMoveNext","tryMoveNext","out","moveNext","incrementIndex","nextValue","next","IteratorResult","Done","end","dispose","getIsEndless"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,oBAAqBN,IAExD,SAAUI,EAASF,GAClB,YACAM,QAAOC,eAAeP,EAAS,cAAgBQ,OAAO,GCR1D,IAAAC,GAAAP,EAAA,oBAIMQ,EAAkB,OAExBC,EAAA,WAMC,QAAAA,KAFUC,KAAAC,UAITD,KAAKE,QAmFP,MAhFCR,QAAAC,eAAII,EAAAI,UAAA,WDAOC,ICAX,WAEC,MAAOJ,MAAKK,UDCFC,YAAY,EACZC,cAAc,ICGzBb,OAAAC,eAAII,EAAAI,UAAA,eDAOC,ICAX,WACC,MAAOJ,MAAKQ,gBDEFF,YAAY,EACZC,cAAc,ICEzBR,EAAAI,UAAAM,YAAA,SAAYC,GACX,QAAGV,KAAKW,aACPD,EAAOV,KAAKK,WACL,IAMCN,EAAAI,UAAAS,eAAV,WAEC,QAASZ,KAAKC,QAGfF,EAAAI,UAAAU,UAAA,WAGC,MADAb,MAAKW,WACEX,KAAKK,UAGbN,EAAAI,UAAAW,KAAA,WAEC,MAAOd,MAAKW,WACT,GAAId,GAAAkB,eAAef,KAAKK,SAAUL,KAAKC,QACvCJ,EAAAkB,eAAeC,MAGnBjB,EAAAI,UAAAc,IAAA,WACCjB,KAAKkB,WAKNnB,EAAAI,UAAA,UAAA,SAASP,GAER,IAEC,MAAOA,KAAQE,GAASE,KAAKQ,eAC1B,GAAIX,GAAAkB,eAAenB,EAAOE,IAAO,IACjCD,EAAAkB,eAAeC,KDXT,QCeThB,KAAKkB,YAIPnB,EAAAI,UAAAD,MAAA,WAECF,KAAKK,SAAWP,EAChBE,KAAKC,WAGNF,EAAAI,UAAAe,QAAA,WAEClB,KAAKE,SAGIH,EAAAI,UAAAgB,aAAV,WAEC,MAAOnB,MAAKQ,gBAGbd,OAAAC,eAAII,EAAAI,UAAA,aDpBOC,ICoBX,WAEC,MAAOJ,MAAKmB,gBDnBFb,YAAY,EACZC,cAAc,ICoB1BR,IA3FsBX,GAAAW,qBAAAA,EA6FtBX,EAAAA,WAAeW","file":"SimpleEnumerableBase.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"./IteratorResult\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var IteratorResult_1 = require(\"./IteratorResult\");\n    var VOID0 = void 0;\n    var SimpleEnumerableBase = /** @class */ (function () {\n        function SimpleEnumerableBase() {\n            this._index = -1;\n            this.reset();\n        }\n        Object.defineProperty(SimpleEnumerableBase.prototype, \"current\", {\n            get: function () {\n                return this._current;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(SimpleEnumerableBase.prototype, \"canMoveNext\", {\n            get: function () {\n                return this._canMoveNext();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        SimpleEnumerableBase.prototype.tryMoveNext = function (out) {\n            if (this.moveNext()) {\n                out(this._current);\n                return true;\n            }\n            return false;\n        };\n        SimpleEnumerableBase.prototype.incrementIndex = function () {\n            return ++this._index;\n        };\n        SimpleEnumerableBase.prototype.nextValue = function () {\n            this.moveNext();\n            return this._current;\n        };\n        SimpleEnumerableBase.prototype.next = function () {\n            return this.moveNext()\n                ? new IteratorResult_1.IteratorResult(this._current, this._index)\n                : IteratorResult_1.IteratorResult.Done;\n        };\n        SimpleEnumerableBase.prototype.end = function () {\n            this.dispose();\n        };\n        SimpleEnumerableBase.prototype['return'] = function (value) {\n            try {\n                return value !== VOID0 && this._canMoveNext()\n                    ? new IteratorResult_1.IteratorResult(value, VOID0, true)\n                    : IteratorResult_1.IteratorResult.Done;\n            }\n            finally {\n                this.dispose();\n            }\n        };\n        SimpleEnumerableBase.prototype.reset = function () {\n            this._current = VOID0;\n            this._index = -1;\n        };\n        SimpleEnumerableBase.prototype.dispose = function () {\n            this.reset();\n        };\n        SimpleEnumerableBase.prototype.getIsEndless = function () {\n            return this._canMoveNext();\n        };\n        Object.defineProperty(SimpleEnumerableBase.prototype, \"isEndless\", {\n            get: function () {\n                return this.getIsEndless();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return SimpleEnumerableBase;\n    }());\n    exports.SimpleEnumerableBase = SimpleEnumerableBase;\n    exports.default = SimpleEnumerableBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {IIteratorResult} from \"./IIterator\";\r\nimport {IteratorResult} from \"./IteratorResult\";\r\nimport {IEnumerator} from \"./IEnumerator\";\r\nimport {Action} from \"../../FunctionTypes\";\r\n\r\nconst VOID0:undefined = void 0;\r\n\r\nexport abstract class SimpleEnumerableBase<T> implements IEnumerator<T>\r\n{\r\n\r\n\tprotected _current:T|undefined;\r\n\tprotected _index:number = -1;\r\n\r\n\tprotected constructor()\r\n\t{\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\tget current():T|undefined\r\n\t{\r\n\t\treturn this._current;\r\n\t}\r\n\r\n\tprotected abstract _canMoveNext():boolean;\r\n\r\n\tget canMoveNext():boolean {\r\n\t\treturn this._canMoveNext();\r\n\t}\r\n\r\n\tabstract moveNext():boolean;\r\n\r\n\ttryMoveNext(out:Action<T>):boolean {\r\n\t\tif(this.moveNext()) {\r\n\t\t\tout(<T>this._current);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tprotected incrementIndex():number\r\n\t{\r\n\t\treturn ++this._index;\r\n\t}\r\n\r\n\tnextValue():T|undefined\r\n\t{\r\n\t\tthis.moveNext();\r\n\t\treturn this._current;\r\n\t}\r\n\r\n\tnext():IIteratorResult<T>\r\n\t{\r\n\t\treturn this.moveNext()\r\n\t\t\t? new IteratorResult(this._current, this._index)\r\n\t\t\t: IteratorResult.Done;\r\n\t}\r\n\r\n\tend():void {\r\n\t\tthis.dispose();\r\n\t}\r\n\r\n\t'return'():IIteratorResult<void>\r\n\t'return'<TReturn>(value:TReturn):IIteratorResult<TReturn>\r\n\t'return'(value?:any):IIteratorResult<any>\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\treturn value!==VOID0 && this._canMoveNext()\r\n\t\t\t\t? new IteratorResult(value, VOID0, true)\r\n\t\t\t\t: IteratorResult.Done;\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\tthis.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\treset():void\r\n\t{\r\n\t\tthis._current = VOID0;\r\n\t\tthis._index = -1;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\tprotected getIsEndless():boolean\r\n\t{\r\n\t\treturn this._canMoveNext();\r\n\t}\r\n\r\n\tget isEndless():boolean|undefined\r\n\t{\r\n\t\treturn this.getIsEndless();\r\n\t}\r\n}\r\n\r\nexport default SimpleEnumerableBase;\r\n"]}