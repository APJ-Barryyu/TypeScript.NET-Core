{"version":3,"sources":["System/Observable/SubscribableBase.js","System/Observable/SubscribableBase.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","LinkedNodeList_1","dispose_1","Subscription_1","DisposableBase_1","extends_1","__extends","NAME","SubscribableBase","_super","call","this","prototype","_getSubscribers","s","__subscriptions","map","node","subscriber","_findEntryNode","find","n","subscribe","_","throwIfDisposed","_s","LinkedNodeList","Subscription","addNode","unsubscribe","removeNode","dispose","_unsubscribeAll","returnSubscribers","u","o","clear","these","noCopy","unsubscribeAll","_onDispose","DisposableBase"],"mappings":";;;;;;CAMA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,gCAAiC,wBAAyB,iBAAkB,+BAAgC,iBAAkBN,IAEjK,SAAUI,EAASF,GAClB,YACAM,QAAOC,eAAeP,EAAS,cAAgBQ,OAAO,GCT1D,IAAAC,GAAAP,EAAA,iCACAQ,EAAAR,EAAA,yBACAS,EAAAT,EAAA,kBAGAU,EAAAV,EAAA,gCACAW,EAAAX,EAAA,iBAEMY,EAAYD,EAAAA,WAEZE,EAAO,mBAEbC,EAAA,SAAAC,GAeC,QAAAD,KDLW,MCOVC,GAAAC,KAAAC,KAAMJ,IAAKI,KA4Eb,MA5FQL,GAAAE,EAAAC,GAMGD,EAAAI,UAAAC,gBAAV,WAEC,GAAMC,GAAIH,KAAKI,eACf,OAAOD,GACJA,EAAEE,IAAI,SAAAC,GAAM,MAAcA,IAAQA,EAAKjB,OAASiB,EAAKjB,MAAMkB,aAC3D,MAQIV,EAAAI,UAAAO,eAAR,SACCD,GAEA,GAAMJ,GAAIH,KAAKI,iBAAmB,IAClC,OAAOD,IAAKA,EAAEM,KAAK,SAAAC,GAAG,QAAEA,EAAErB,OAASqB,EAAErB,MAAMkB,aAAaA,KAIzDV,EAAAI,UAAAU,UAAA,SAAUJ,GAET,GAAMK,GAAIZ,IACVY,GAAEC,iBAEF,IAAMH,GAAIE,EAAEJ,eAAeD,EAC3B,IAAGG,EACF,MAAoBA,GAAErB,KAEvB,IAAIyB,GAAKF,EAAER,eACPU,KAAIF,EAAER,gBAAkBU,EACzB,GAAIxB,GAAAyB,eAEP,IAAMZ,GAAI,GAAIX,GAAAwB,aAAaJ,EAAGL,EAG9B,OAFAO,GAAGG,SAAS5B,MAAOc,IAEZA,GAGRN,EAAAI,UAAAiB,YAAA,SAAYX,GAEX,GAAMK,GAAIZ,KAEJU,EAAIE,EAAEJ,eAAeD,EAC3B,IAAGG,EACH,CACC,GAAM5B,GAAI4B,EAAErB,MACNyB,EAAKF,EAAER,eACVU,IAAIA,EAAGK,WAAWT,GAClB5B,GAAGA,EAAEsC,YAQAvB,EAAAI,UAAAoB,gBAAV,SAA0BC,GAAA,SAAAA,IAAAA,GAAA,EAEzB,IAAMV,GAAIZ,KACNc,EAAKF,EAAER,eACX,KAAIU,EAAI,MAAO,KACf,IAAMX,GAAIW,EAAGT,IAAI,SAAAK,GAAK,MAAAA,GAAErB,QAClBkC,EAAID,EAAoBnB,EAAEE,IAAI,SAAAmB,GAAK,MAAAA,GAAGjB,aAAc,IAK1D,OAJAO,GAAGW,QAEHlC,EAAA6B,QAAQM,MAAMC,OAAOxB,GAEdoB,GAGR1B,EAAAI,UAAA2B,eAAA,WAEC5B,KAAKqB,mBAGIxB,EAAAI,UAAA4B,WAAV,WAEC/B,EAAAG,UAAM4B,WAAU9B,KAAAC,MAChBA,KAAKqB,iBACL,IAAMlB,GAAIH,KAAKI,eACfJ,MAAKI,gBAAuB,KACzBD,GAAGA,EAAEiB,WAGVvB,GA5FQJ,EAAAqC,eADKjD,GAAAgB,iBAAAA,EA+FbhB,EAAAA,WAAegB","file":"SubscribableBase.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Based upon .NET source.\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"../Collections/LinkedNodeList\", \"../Disposable/dispose\", \"./Subscription\", \"../Disposable/DisposableBase\", \"../../extends\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var LinkedNodeList_1 = require(\"../Collections/LinkedNodeList\");\n    var dispose_1 = require(\"../Disposable/dispose\");\n    var Subscription_1 = require(\"./Subscription\");\n    var DisposableBase_1 = require(\"../Disposable/DisposableBase\");\n    var extends_1 = require(\"../../extends\");\n    // noinspection JSUnusedLocalSymbols\n    var __extends = extends_1.default;\n    var NAME = \"SubscribableBase\";\n    // This class is very much akin to a registry or 'Set' but uses an intermediary (Subscription) for releasing the registration.\n    var SubscribableBase = /** @class */ (function (_super) {\n        __extends(SubscribableBase, _super);\n        function SubscribableBase() {\n            return _super.call(this, NAME) || this;\n        }\n        SubscribableBase.prototype._getSubscribers = function () {\n            var s = this.__subscriptions;\n            return s\n                ? s.map(function (node) { return (node && node.value && node.value.subscriber); })\n                : null;\n        };\n        SubscribableBase.prototype._findEntryNode = function (subscriber) {\n            var s = this.__subscriptions || null;\n            return s && s.find(function (n) { return !!n.value && n.value.subscriber === subscriber; });\n        };\n        // It is possible that the same observer could call subscribe more than once and therefore we need to retain a single instance of the subscriber.\n        SubscribableBase.prototype.subscribe = function (subscriber) {\n            var _ = this;\n            _.throwIfDisposed();\n            var n = _._findEntryNode(subscriber);\n            if (n) // Ensure only one instance of the existing subscription exists.\n                return n.value;\n            var _s = _.__subscriptions;\n            if (!_s)\n                _.__subscriptions = _s\n                    = new LinkedNodeList_1.LinkedNodeList();\n            var s = new Subscription_1.Subscription(_, subscriber);\n            _s.addNode({ value: s });\n            return s;\n        };\n        SubscribableBase.prototype.unsubscribe = function (subscriber) {\n            var _ = this;\n            // _.throwIfDisposed(); If it was disposed, then it's still safe to try and unsubscribe.\n            var n = _._findEntryNode(subscriber);\n            if (n) {\n                var v = n.value;\n                var _s = _.__subscriptions;\n                if (_s)\n                    _s.removeNode(n);\n                if (v)\n                    v.dispose(); // Prevent further usage of a dead subscription.\n            }\n        };\n        SubscribableBase.prototype._unsubscribeAll = function (returnSubscribers) {\n            if (returnSubscribers === void 0) { returnSubscribers = false; }\n            var _ = this;\n            var _s = _.__subscriptions;\n            if (!_s)\n                return null;\n            var s = _s.map(function (n) { return n.value; });\n            var u = returnSubscribers ? s.map(function (o) { return o.subscriber; }) : null;\n            _s.clear(); // Reset...\n            dispose_1.dispose.these.noCopy(s);\n            return u;\n        };\n        SubscribableBase.prototype.unsubscribeAll = function () {\n            this._unsubscribeAll();\n        };\n        SubscribableBase.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._unsubscribeAll();\n            var s = this.__subscriptions;\n            this.__subscriptions = null;\n            if (s)\n                s.dispose();\n        };\n        return SubscribableBase;\n    }(DisposableBase_1.DisposableBase));\n    exports.SubscribableBase = SubscribableBase;\n    exports.default = SubscribableBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based upon .NET source.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\r\n */\r\n\r\nimport {LinkedNodeList} from \"../Collections/LinkedNodeList\";\r\nimport {dispose} from \"../Disposable/dispose\";\r\nimport {Subscription} from \"./Subscription\";\r\nimport {ILinkedNodeWithValue} from \"../Collections/ILinkedListNode\";\r\nimport {IDisposable} from \"../Disposable/IDisposable\";\r\nimport {DisposableBase} from \"../Disposable/DisposableBase\";\r\nimport __extendsImport from \"../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst NAME = \"SubscribableBase\";\r\n// This class is very much akin to a registry or 'Set' but uses an intermediary (Subscription) for releasing the registration.\r\nexport class SubscribableBase<TSubscriber>\r\nextends DisposableBase\r\n{\r\n\r\n\t// Use a linked list since it's much easier to remove a subscriber from anywhere in the list.\r\n\tprivate __subscriptions:LinkedNodeList<ILinkedNodeWithValue<Subscription<TSubscriber>>> | undefined;\r\n\r\n\tprotected _getSubscribers():TSubscriber[]|null\r\n\t{\r\n\t\tconst s = this.__subscriptions;\r\n\t\treturn s\r\n\t\t\t? s.map(node=><TSubscriber>(node && node.value && node.value.subscriber))\r\n\t\t\t: null;\r\n\t}\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(NAME);\r\n\t}\r\n\r\n\tprivate _findEntryNode(\r\n\t\tsubscriber:TSubscriber):ILinkedNodeWithValue<Subscription<TSubscriber>>|null\r\n\t{\r\n\t\tconst s = this.__subscriptions || null;\r\n\t\treturn s && s.find(n=>!!n.value && n.value.subscriber===subscriber);\r\n\t}\r\n\r\n\t// It is possible that the same observer could call subscribe more than once and therefore we need to retain a single instance of the subscriber.\r\n\tsubscribe(subscriber:TSubscriber):IDisposable\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tconst n = _._findEntryNode(subscriber);\r\n\t\tif(n) // Ensure only one instance of the existing subscription exists.\r\n\t\t\treturn <IDisposable>n.value;\r\n\r\n\t\tlet _s = _.__subscriptions;\r\n\t\tif(!_s) _.__subscriptions = _s\r\n\t\t\t= new LinkedNodeList<ILinkedNodeWithValue<Subscription<TSubscriber>>>();\r\n\r\n\t\tconst s = new Subscription(_, subscriber);\r\n\t\t_s.addNode({value: s});\r\n\r\n\t\treturn s;\r\n\t}\r\n\r\n\tunsubscribe(subscriber:TSubscriber):void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t// _.throwIfDisposed(); If it was disposed, then it's still safe to try and unsubscribe.\r\n\t\tconst n = _._findEntryNode(subscriber);\r\n\t\tif(n)\r\n\t\t{\r\n\t\t\tconst v = n.value;\r\n\t\t\tconst _s = _.__subscriptions;\r\n\t\t\tif(_s) _s.removeNode(n);\r\n\t\t\tif(v) v.dispose(); // Prevent further usage of a dead subscription.\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _unsubscribeAll():null\r\n\tprotected _unsubscribeAll(returnSubscribers:false):null\r\n\tprotected _unsubscribeAll(returnSubscribers:true):TSubscriber[]|null\r\n\tprotected _unsubscribeAll(returnSubscribers:boolean):TSubscriber[]|null\r\n\tprotected _unsubscribeAll(returnSubscribers:boolean = false):TSubscriber[]|null\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tlet _s = _.__subscriptions;\r\n\t\tif(!_s) return null;\r\n\t\tconst s = _s.map(n => n.value);\r\n\t\tconst u = returnSubscribers ? s.map(o => o!.subscriber) : null;\r\n\t\t_s.clear(); // Reset...\r\n\r\n\t\tdispose.these.noCopy(s);\r\n\r\n\t\treturn u;\r\n\t}\r\n\r\n\tunsubscribeAll():void\r\n\t{\r\n\t\tthis._unsubscribeAll();\r\n\t}\r\n\r\n\tprotected _onDispose()\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._unsubscribeAll();\r\n\t\tconst s = this.__subscriptions;\r\n\t\tthis.__subscriptions = <any>null;\r\n\t\tif(s) s.dispose();\r\n\t}\r\n\r\n}\r\n\r\nexport default SubscribableBase;\r\n"]}