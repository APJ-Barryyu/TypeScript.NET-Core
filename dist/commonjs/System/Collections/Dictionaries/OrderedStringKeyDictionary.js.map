{"version":3,"sources":["System/Collections/Dictionaries/OrderedStringKeyDictionary.ts"],"names":["OrderedStringKeyDictionary","OrderedStringKeyDictionary.constructor","OrderedStringKeyDictionary.indexOfKey","OrderedStringKeyDictionary.getValueByIndex","OrderedStringKeyDictionary.setValue","OrderedStringKeyDictionary.setByIndex","OrderedStringKeyDictionary.importValues","OrderedStringKeyDictionary.setValues","OrderedStringKeyDictionary.removeByIndex","OrderedStringKeyDictionary.getKeys"],"mappings":";;;;;;;;;;;;;;;;;;;;;;4BAK8B,kBAAkB;;IAApC,YAAY;;oCACQ,uBAAuB;;;;qDACf,8CAA8C;;;;AAEtF,IAAM,KAAK,GAAO,KAAK,CAAC,CAAC;;IAEzB,0BAAA;cAAA,0BAAA;;AAQCA,aARD,0BAAA,GAQCA;8BARD,0BAAA;;AAUEC,mCAVF,0BAAA,6CAUUA;AAJDA,YAAAA,CAAAA,MAAMA,GAAYA,EAAEA,CAACA;KAK5BA;;iBAXF,0BAAA;;eAaWD,oBAACA,GAAUA,EAAAA;AAEpBE,mBAAOA,IAAIA,CAACA,MAAMA,CAACA,OAAOA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA;SACnCA;;;eAEcF,yBAACA,KAAYA,EAAAA;AAE3BG,mBAAOA,IAAIA,CAACA,QAAQA,CAACA,IAAIA,CAACA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA;SACzCA;;;eAGOH,kBAACA,GAAUA,EAAEA,KAAYA,EAAEA,SAAkBA,EAAAA;AAEpDI,gBAAIA,CAACA,GAAGA,IAAIA;gBAAEA,MAAMA,GAAGA,CAACA,CAACA,UAAUA,CAACA,GAAGA,CAACA,IAAGA,CAACA,CAACA,CAACA;AAC9CA,gBAAGA,CAACA,MAAMA,KAAKA,KAAKA,KAAGA,KAAKA,IAAIA,SAASA,CAAAA,AAACA,EACzCA,CAACA,CAACA,MAAMA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,KACfA,IAAGA,MAAMA,IAAIA,KAAKA,KAAGA,KAAKA,IAAIA,CAACA,SAASA,EAC5CA,YAAYA,CAACA,MAAMA,CAACA,CAACA,CAACA,MAAMA,EAAEA,GAAGA,CAACA,CAACA;AAEpCA,8CAhCF,0BAAA,0CAgCwBA,GAAGA,EAAEA,KAAKA,EAAEA;SAClCA;;;eAESJ,oBAACA,KAAYA,EAAEA,KAAYA,EAAAA;AAEpCK,gBAAIA,CAACA,GAAGA,IAAIA;gBAAEA,KAAKA,GAAGA,CAACA,CAACA,MAAMA,CAACA;AAC/BA,gBAAGA,KAAKA,GAACA,CAACA,EACTA,MAAMA,uDAAgCA,OAAOA,EAAEA,KAAKA,EAAEA,oBAAoBA,CAACA,CAACA;AAC7EA,gBAAGA,KAAKA,IAAEA,KAAKA,CAACA,MAAMA,EACrBA,MAAMA,uDAAgCA,OAAOA,EAAEA,KAAKA,EAAEA,4BAA4BA,CAACA,CAACA;AACrFA,mBAAOA,CAACA,CAACA,QAAQA,CAACA,KAAKA,CAACA,KAAKA,CAACA,EAAEA,KAAKA,CAACA,CAACA;SACvCA;;;eAGWL,sBAACA,MAAeA,EAAAA;AAE3BM,gBAAIA,CAACA,GAAGA,IAAIA,CAACA;AACbA,mBAAOA,CAACA,CAACA,YAAYA,CACpBA,YAAAA;AAECA,oBAAIA,OAAOA,GAAWA,KAAKA,CAACA;AAC5BA,qBAAIA,IAAIA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAACA,MAAMA,CAACA,MAAMA,EAAEA,CAACA,EAAEA,EACnCA;AACCA,wBAAGA,CAACA,CAACA,UAAUA,CAACA,CAACA,EAAEA,MAAMA,CAACA,CAACA,CAACA,CAACA,EAC5BA,OAAOA,GAAGA,IAAIA,CAACA;iBAChBA;AACDA,uBAAOA,OAAOA,CAACA;aACfA,CACDA,CAACA;SAEFA;;;eAGQN,qBAAmBA;8CAAfA,MAAeA;AAAfA,sBAAeA;;;AAE3BO,mBAAOA,IAAIA,CAACA,YAAYA,CAACA,MAAMA,CAACA,CAACA;SACjCA;;;eAEYP,uBAACA,KAAYA,EAAAA;AAEzBQ,mBAAOA,IAAIA,CAACA,UAAUA,CAACA,KAAKA,EAAEA,SAASA,CAACA,CAACA;SACzCA;;;eAEgBR,mBAAAA;AAEhBS,gBAAIA,CAACA,GAAGA,IAAIA,CAACA;AACbA,mBAAOA,CAACA,CAACA,MAAMA,CAACA,MAAMA,CAACA,UAAAA,GAAGA;uBAAGA,CAACA,CAACA,WAAWA,CAACA,GAAGA,CAACA;aAAAA,CAACA,CAACA;SACjDA;;;WA/EF,0BAAA;;;qBAAA,0BAAA","file":"System/Collections/Dictionaries/OrderedStringKeyDictionary.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport * as ArrayUtility from '../Array/Utility';\r\nimport StringKeyDictionary from './StringKeyDictionary';\r\nimport ArgumentOutOfRangeException from '../../Exceptions/ArgumentOutOfRangeException'\r\n\r\nconst VOID0:any = void 0;\r\n\r\nexport default\r\nclass OrderedStringKeyDictionary<TValue>\r\nextends StringKeyDictionary<TValue> implements IOrderedDictionary<string, TValue>\r\n{\r\n\r\n\t// noinspection JSMismatchedCollectionQueryUpdate\r\n\tprivate _order:string[] = []; // Maintains indexes.\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\tindexOfKey(key:string):number\r\n\t{\r\n\t\treturn this._order.indexOf(key, 0);\r\n\t}\r\n\r\n\tgetValueByIndex(index:number):TValue\r\n\t{\r\n\t\treturn this.getValue(this._order[index]);\r\n\t}\r\n\r\n\t// adding keepIndex allows for clearing a value while still retaining it's index.\r\n\tsetValue(key:string, value:TValue, keepIndex?:boolean):boolean\r\n\t{\r\n\t\tvar _ = this, exists = _.indexOfKey(key)!= -1;\r\n\t\tif(!exists && (value!==VOID0 || keepIndex))\r\n\t\t\t_._order.push(key);\r\n\t\telse if(exists && value===VOID0 && !keepIndex)\r\n\t\t\tArrayUtility.remove(_._order, key);\r\n\r\n\t\treturn super.setValue(key, value);\r\n\t}\r\n\r\n\tsetByIndex(index:number, value:TValue):boolean\r\n\t{\r\n\t\tvar _ = this, order = _._order;\r\n\t\tif(index<0)\r\n\t\t\tthrow new ArgumentOutOfRangeException('index', index, 'Is less than zero.');\r\n\t\tif(index>=order.length)\r\n\t\t\tthrow new ArgumentOutOfRangeException('index', index, 'Is greater than the count.');\r\n\t\treturn _.setValue(order[index], value);\r\n\t}\r\n\r\n\t// importValues([x,y,z]);\r\n\timportValues(values:TValue[]):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn _.handleUpdate(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar changed:boolean = false;\r\n\t\t\t\tfor(let i = 0; i<values.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(_.setByIndex(i, values[i]))\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t\treturn changed;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t}\r\n\r\n\t// setValues(x,y,z);\r\n\tsetValues(...values:TValue[]):boolean\r\n\t{\r\n\t\treturn this.importValues(values);\r\n\t}\r\n\r\n\tremoveByIndex(index:number):boolean\r\n\t{\r\n\t\treturn this.setByIndex(index, undefined);\r\n\t}\r\n\r\n\tprotected getKeys():string[]\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn _._order.filter(key=> _.containsKey(key));\r\n\t}\r\n\r\n}\r\n"]}