{"version":3,"sources":["System/Collections/Dictionaries/StringKeyDictionary.ts"],"names":["StringKeyDictionary","StringKeyDictionary.constructor","StringKeyDictionary.containsKey","StringKeyDictionary.containsValue","StringKeyDictionary.getValue","StringKeyDictionary.setValue","StringKeyDictionary.importMap","StringKeyDictionary.toMap","StringKeyDictionary.getKeys","StringKeyDictionary.getValues","StringKeyDictionary.getCount"],"mappings":"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","file":"System/Collections/Dictionaries/StringKeyDictionary.js","sourcesContent":["///<reference path=\"IDictionary.d.ts\"/>\r\n/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {areEqual} from '../../Compare';\r\nimport DictionaryBase from './DictionaryBase';\r\nimport ArgumentNullException from '../../Exceptions/ArgumentNullException';\r\n\r\nconst VOID0:any = void 0;\r\n\r\nexport default\r\nclass StringKeyDictionary<TValue>\r\nextends DictionaryBase<string, TValue> implements IStringKeyDictionary<TValue>\r\n{\r\n\tprivate _count:number = 0;\r\n\tprivate _map:IMap<TValue> = {};\r\n\r\n\r\n\tcontainsKey(key:string):boolean\r\n\t{\r\n\t\treturn (key)in(this._map);\r\n\t}\r\n\r\n\tcontainsValue(value:TValue):boolean\r\n\t{\r\n\t\tvar map = this._map, equal:(a:any, b:any, strict?:boolean) => boolean = areEqual;\r\n\t\tfor(let key in map)\r\n\t\t{\r\n\t\t\tif(map.hasOwnProperty(key) && equal(map[key], value))\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tgetValue(key:string):TValue\r\n\t{\r\n\t\treturn this._map[key];\r\n\t}\r\n\r\n\tsetValue(key:string, value:TValue):boolean\r\n\t{\r\n\t\tvar _ = this, map = _._map, old = map[key];\r\n\t\tif(old!==value)\r\n\t\t{\r\n\r\n\t\t\tif(value===VOID0)\r\n\t\t\t{\r\n\t\t\t\tif((key)in(map))\r\n\t\t\t\t{\r\n\t\t\t\t\tdelete map[key];\r\n\t\t\t\t\t--_._count;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(!((key)in(map)))\r\n\t\t\t\t\t++_._count;\r\n\t\t\t\tmap[key] = value;\r\n\t\t\t}\r\n\r\n\t\t\t_._onValueUpdate(key, value, old);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Returns true if any value is updated...\r\n\timportMap(values:IMap<TValue>):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn _.handleUpdate(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar changed:boolean = false;\r\n\t\t\t\tfor(let key in values)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(values.hasOwnProperty(key) && _.setValue(key, values[key]))\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t\treturn changed;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\ttoMap(selector?:(key:string, value:TValue) => TValue):IMap<TValue>\r\n\t{\r\n\t\tvar _ = this, result:IMap<TValue> = {};\r\n\t\tfor(let key in _._map)\r\n\t\t{\r\n\t\t\tif(_._map.hasOwnProperty(key)) // This simply satisfies inspection.\r\n\t\t\t{\r\n\t\t\t\tvar value = _._map[key];\r\n\t\t\t\tif(selector)\r\n\t\t\t\t\tvalue = selector(key, value);\r\n\t\t\t\tif(value!==VOID0)\r\n\t\t\t\t\tresult[key] = value;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected getKeys():string[]\r\n\t{\r\n\r\n\t\tvar _ = this, result:string[] = [];\r\n\t\tfor(let key in _._map)\r\n\t\t{\r\n\t\t\tif(_._map.hasOwnProperty(key)) // This simply satisfies inspection.\r\n\t\t\t\tresult.push(key);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\tprotected getValues():TValue[]\r\n\t{\r\n\r\n\t\tvar _ = this, result:TValue[] = [];\r\n\t\tfor(let key in _._map)\r\n\t\t{\r\n\t\t\tif(_._map.hasOwnProperty(key)) // This simply satisfies inspection.\r\n\t\t\t\tresult.push(_._map[key]);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._count;\r\n\t}\r\n\r\n\r\n}\r\n"]}