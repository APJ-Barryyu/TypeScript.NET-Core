{"version":3,"sources":["System/Collections/Sorting/SortContext.ts"],"names":["SortContext","SortContext.constructor","SortContext.generateSortedIndexes","SortContext.compare","SortContext.order"],"mappings":";;;;;;;;;;;;;;;;uBASwB,eAAe;;IAA3B,MAAM;;IAIlB,WAAA;AAWCA,aAXD,WAAA,CAYYA,KAAkBA,EAEYA;YAD9BA,SAASA,yDAAiBA,MAAMA,CAACA,OAAOA;;YACxCA,MAAMA,yDAASA,CAAeA;;8BAd1C,WAAA;;AAYYC,YAAAA,CAAAA,KAAKA,GAALA,KAAKA,CAAaA;AAClBA,YAAAA,CAAAA,SAASA,GAATA,SAASA,CAA+BA;AACxCA,YAAAA,CAAAA,MAAMA,GAANA,MAAMA,CAAwBA;KAExCA;;iBAhBF,WAAA;;eAwBsBD,+BAACA,MAAUA,EAAAA;;;AAE/BE,gBAAGA,MAAMA,IAAEA,IAAIA,EAAEA,OAAOA,EAAEA,CAACA;AAC3BA,gBAAIA,MAAMA,GAAYA,MAAMA,CAACA,GAAGA,CAACA,UAACA,CAACA,EAAEA,CAACA;uBAAGA,CAACA;aAAAA,CAACA,CAACA;AAC5CA,kBAAMA,CAACA,IAAIA,CAACA,UAACA,CAACA,EAAEA,CAACA;uBAAKA,MAAKA,OAAOA,CAACA,MAAMA,CAACA,CAACA,CAACA,EAAEA,MAAMA,CAACA,CAACA,CAACA,CAACA;aAAAA,CAACA,CAACA;AAC1DA,mBAAOA,MAAMA,CAACA;SACdA;;;eAQMF,iBAACA,CAAGA,EAAEA,CAAGA,EAAAA;AAEfG,gBAAIA,CAACA,GAAGA,IAAIA,CAACA;AACbA,gBAAIA,CAACA,GAAGA,CAACA,CAACA,SAASA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;AAC1BA,gBAAGA,CAACA,IAAEA,CAACA,IAAIA,CAACA,CAACA,KAAKA,EAAEA,OAAOA,CAACA,CAACA,KAAKA,CAACA,OAAOA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;AACjDA,mBAAOA,CAACA,CAACA,MAAMA,GAACA,CAACA,CAACA;SAClBA;;;aApCQH,eAAAA;AACPI,mBAAOA,IAAIA,CAACA,MAAMA,CAACA;SAAEA;;;WATxB,WAAA;;;qBAAA,WAAA","file":"System/Collections/Sorting/SortContext.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../../FunctionTypes.d.ts\"/>\r\n///<reference path=\"../../IComparer.d.ts\"/>\r\n///<reference path=\"../Array/IArray.d.ts\"/>\r\n///<reference path=\"Order.d.ts\"/>\r\nimport * as Values from '../../Compare'\r\nimport Integer from '../../Integer'\r\nimport forEach from \"../Enumeration/forEach\"\r\n\r\nexport default\r\nclass SortContext<T> implements IComparer<T>\r\n{\r\n\r\n\t/**\r\n\t * Direction of the comparison.\r\n\t * @type {Order}\r\n\t */\r\n\tget order():Order\r\n\t{ return this._order; }\r\n\r\n\tconstructor(\r\n\t\tprotected _next:IComparer<T>,\r\n\t\tprotected _comparer:Comparison<T> = Values.compare,\r\n\t\tprotected _order:Order = Order.Ascending)\r\n\t{\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Generates an array of indexes from the source in order of their expected sort without modifying the source.\r\n\t * @param source\r\n\t * @returns {number[]}\r\n\t */\r\n\tgenerateSortedIndexes(source:T[]):number[]\r\n\t{\r\n\t\tif(source==null) return [];\r\n\t\tvar result:number[] = source.map((s, i)=>i);\r\n\t\tresult.sort((a, b) => this.compare(source[a], source[b]));\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Compares two values based upon SortContext parameters.\r\n\t * @param a\r\n\t * @param b\r\n\t * @returns {any}\r\n\t */\r\n\tcompare(a:T, b:T):number\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar d = _._comparer(a, b);\r\n\t\tif(d==0 && _._next) return _._next.compare(a, b);\r\n\t\treturn _._order*d;\r\n\t}\r\n}\r\n"]}