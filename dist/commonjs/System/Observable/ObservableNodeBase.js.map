{"version":3,"sources":["System/Observable/ObservableNodeBase.ts"],"names":["ObservableNodeBase","ObservableNodeBase.onNext","ObservableNodeBase.onError","ObservableNodeBase.onCompleted","processAction"],"mappings":";;;;;;;;;;;;;;;;;;;;;;iCAS6B,oBAAoB;;;;IAGjD,kBAAA;cAAA,kBAAA;;aAAA,kBAAA;8BAAA,kBAAA;;mCAAA,kBAAA;;;iBAAA,kBAAA;;eAKOA,gBAACA,KAAOA,EAAAA;AAEbC,yBAAaA,CACZA,IAAIA,CAACA,eAAeA,EAAEA,EACtBA,UAAAA,CAACA,EAAAA;AAAMA,iBAACA,CAACA,MAAMA,IAAIA,CAACA,CAACA,MAAMA,CAACA,KAAKA,CAACA,CAACA;aAAEA,CACrCA,CAACA;SACFA;;;eAEMD,iBAACA,KAAWA,EAAAA;AAElBE,yBAAaA,CACZA,IAAIA,CAACA,eAAeA,EAAEA,EACtBA,UAAAA,CAACA,EAAAA;AAAMA,iBAACA,CAACA,OAAOA,IAAIA,CAACA,CAACA,OAAOA,CAACA,KAAKA,CAACA,CAACA;aAAEA,CACvCA,CAACA;SACFA;;;eAEUF,uBAAAA;AAEVG,yBAAaA,CACZA,IAAIA,CAACA,eAAeA,CAACA,IAAIA,CAACA,EAC1BA,UAAAA,CAACA,EAAAA;AAAMA,iBAACA,CAACA,WAAWA,IAAIA,CAACA,CAACA,WAAWA,EAAEA,CAACA;aAAEA,CAC1CA,CAACA;SACFA;;;WA3BF,kBAAA;;;qBAAA,kBAAA;;AA8BA,IAAM,sBAAsB,GAAU,uEAAuE,CAAC;AAE9G,SAAA,aAAA,CACC,SAAwB,EACxB,OAA8B,EAAA;AAE9BC,QAAIA,eAAeA,GAAoCA,IAAIA,CAACA;;;;;;AAE5DA,6BAAaA,SAASA,8HACtBA;gBADQA,CAACA;;AAERA,gBACAA;AACCA,uBAAOA,CAACA,CAACA,CAACA,CAACA;aAEZA,CAAAA,OAAMA,EAAEA,EACRA;AACCA,+BAAeA,GAAGA,eAAeA,IAAIA,EAAEA,CAACA;AAExCA,+BAAeA,CAACA,IAAIA,CAACA,EAACA,QAAQA,EAAEA,CAACA,EAAEA,EAAEA,EAAEA,EAAEA,EAACA,CAACA,CAACA;aAC5CA;SACDA;;;;;;;;;;;;;;;;AAEDA,aAASA,CAACA,MAAMA,GAAGA,CAACA,CAACA;AAErBA,QAAGA,eAAeA,IAAIA,eAAeA,CAACA,MAAMA,EAC5CA;AACCA,YAAGA,OAAOA,IAAIA,OAAOA,CAACA,KAAKA,EAC1BA,OAAOA,CAACA,KAAKA,CAACA,sBAAsBA,EAAEA,eAAeA,CAACA,CAACA,KACnDA,MAAMA;AACVA,mBAAOA,EAAEA,sBAAsBA;AAC/BA,kBAAMA,EAAEA,eAAeA;SACvBA,CAACA;KACFA;CAEDA","file":"System/Observable/ObservableNodeBase.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based upon .NET source.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\r\n */\r\n\r\n///<reference path=\"IObserver.d.ts\"/>\r\n///<reference path=\"IObservable.d.ts\"/>\r\nimport SubscribableBase from './SubscribableBase';\r\n\r\n// Can be used as a base class, mixin, or simply reference on how to implement the pattern.\r\nexport default\r\nclass ObservableNodeBase<T>\r\nextends SubscribableBase<IObserver<T>> implements IObservable<T>, IObserver<T>\r\n{\r\n\r\n\tonNext(value:T):void\r\n\t{\r\n\t\tprocessAction(\r\n\t\t\tthis._getSubscribers(),\r\n\t\t\ts => { s.onNext && s.onNext(value); }\r\n\t\t);\r\n\t}\r\n\r\n\tonError(error:Error):void\r\n\t{\r\n\t\tprocessAction(\r\n\t\t\tthis._getSubscribers(),\r\n\t\t\ts => { s.onError && s.onError(error); }\r\n\t\t);\r\n\t}\r\n\r\n\tonCompleted():void\r\n\t{\r\n\t\tprocessAction(\r\n\t\t\tthis._unsubscribeAll(true),\r\n\t\t\ts => { s.onCompleted && s.onCompleted(); }\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst OBSERVER_ERROR_MESSAGE:string = 'One or more observers had errors when attempting to pass information.';\r\n\r\nfunction processAction<T>(\r\n\tobservers:IObserver<T>[],\r\n\thandler:(s:IObserver<T>)=>void)\r\n{\r\n\tvar observersErrors:{observer:IObserver<T>,ex:any}[] = null;\r\n\r\n\tfor(let s of observers)\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\thandler(s);\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\tobserversErrors = observersErrors || [];\r\n\t\t\t// Don't let one error prevent others from recieving information.\r\n\t\t\tobserversErrors.push({observer: s, ex: ex});\r\n\t\t}\r\n\t}\r\n\r\n\tobservers.length = 0;\r\n\r\n\tif(observersErrors && observersErrors.length)\r\n\t{\r\n\t\tif(console && console.error)\r\n\t\t\tconsole.error(OBSERVER_ERROR_MESSAGE, observersErrors);\r\n\t\telse throw {\r\n\t\t\tmessage: OBSERVER_ERROR_MESSAGE,\r\n\t\t\terrors: observersErrors\r\n\t\t};\r\n\t}\r\n\r\n}\r\n"]}