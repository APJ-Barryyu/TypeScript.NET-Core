{"version":3,"sources":["System/Compare.ts"],"names":["areEqual","compare"],"mappings":";;;;;;;;;;;;;;qBAQiB,SAAS;;;;AAC1B,IAAO,SAAS,GAAG,mBAAK,SAAS,CAAC;AAElC,IAAM,KAAK,GAAO,KAAK,CAAC,CAAC;;AAIzB,SAAA,QAAA,CAAyB,CAAK,EAAE,CAAK,EAAuB;QAArB,MAAM,yDAAW,IAAI;;AAE3DA,WAAOA,CAACA,KAAGA,CAACA,IAAIA,CAACA,MAAMA,IAAIA,CAACA,IAAEA,CAACA,IAAIA,SAASA,CAACA,CAACA,CAACA,IAAIA,SAASA,CAACA,CAACA,CAACA,CAACA;CAChEA;;AAED,IAAM,UAAU,GAAG,WAAW,CAAC;;AAI/B,SAAA,OAAA,CAAwB,CAAK,EAAE,CAAK,EAAuB;QAArB,MAAM,yDAAW,IAAI;;AAG1DC,QAAGA,QAAQA,CAACA,CAACA,EAAEA,CAACA,EAAEA,MAAMA,CAACA,EACxBA,OAAOA,CAAmBA,CAACA;AAE5BA,QAAGA,CAACA,IAAIA,mBAAKA,SAASA,CAACA,CAACA,EAAEA,UAAUA,CAACA,EACpCA,OAAOA,CAACA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,KAClBA,IAAGA,CAACA,IAAIA,mBAAKA,SAASA,CAACA,CAACA,EAAEA,UAAUA,CAACA,EACzCA,OAAOA,CAACA,CAACA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA;AAIxBA,QAAGA,CAACA,GAACA,CAACA,IAAIA,MAAMA,KAAKA,CAACA,KAAGA,CAACA,IAAIA,CAACA,IAAEA,CAACA,IAAIA,CAACA,KAAGA,IAAIA,IAAIA,CAACA,KAAGA,KAAKA,CAAAA,AAACA,EAC3DA,OAAOA,CAAqBA,CAACA;AAE9BA,QAAGA,CAACA,GAACA,CAACA,IAAIA,MAAMA,KAAKA,CAACA,KAAGA,CAACA,IAAIA,CAACA,IAAEA,CAACA,IAAIA,CAACA,KAAGA,IAAIA,IAAIA,CAACA,KAAGA,KAAKA,CAAAA,AAACA,EAC3DA,OAAOA,CAAAA,CAAkBA,CAACA;AAE3BA,WAAOA,GAAGA,CAACA;CACXA","file":"System/Compare.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"IComparable.d.ts\"/>\r\n///<reference path=\"Primitive.d.ts\"/>\r\n///<reference path=\"CompareResult.d.ts\"/>\r\nimport Type from './Types';\r\nimport isTrueNaN = Type.isTrueNaN;\r\n\r\nconst VOID0:any = void 0;\r\n\r\n\r\n// Used for special equals cases like NaN.\r\nexport function areEqual(a:any, b:any, strict:boolean = true):boolean\r\n{\r\n\treturn a===b || !strict && a==b || isTrueNaN(a) && isTrueNaN(b);\r\n}\r\n\r\nconst COMPARE_TO = \"compareTo\";\r\n\r\nexport function compare<T>(a:IComparable<T>, b:IComparable<T>):number;\r\nexport function compare<T extends Primitive>(a:T, b:T, strict?:boolean):CompareResult;\r\nexport function compare(a:any, b:any, strict:boolean = true):CompareResult\r\n{\r\n\r\n\tif(areEqual(a, b, strict))\r\n\t\treturn CompareResult.Equal;\r\n\r\n\tif(a && Type.hasMember(a, COMPARE_TO))\r\n\t\treturn a.compareTo(b);\r\n\telse if(b && Type.hasMember(b, COMPARE_TO))\r\n\t\treturn -b.compareTo(a);\r\n\r\n\t// Allow for special inequality..\r\n\r\n\tif(a>b || strict && (a===0 && b==0 || a===null && b===VOID0))\r\n\t\treturn CompareResult.Greater;\r\n\r\n\tif(b>a || strict && (b===0 && a==0 || b===null && a===VOID0))\r\n\t\treturn CompareResult.Less;\r\n\r\n\treturn NaN;\r\n}\r\n"]}