{"version":3,"sources":["System/Text/StringBuilder.ts"],"names":["StringBuilder","StringBuilder.constructor","StringBuilder.appendSingle","StringBuilder.appendThese","StringBuilder.append","StringBuilder.appendLine","StringBuilder.appendLines","StringBuilder.toString","StringBuilder.join","StringBuilder.clear","StringBuilder.dispose","StringBuilder.isEmpty"],"mappings":"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","file":"System/Text/StringBuilder.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * .NET Reference: http://referencesource.microsoft.com/#mscorlib/system/text/StringBuilder.cs\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../Disposable/IDisposable.d.ts\"/>\r\nimport Type from '../Types';\r\nimport LinkedList from '../Collections/LinkedList';\r\n\r\nconst VOID0:any = void 0;\r\n\r\n/*****************************\r\n * IMPORTANT NOTES ABOUT PERFORMANCE:\r\n * http://jsperf.com/string-concatenation-looped\r\n * http://jsperf.com/adding-strings-to-an-array\r\n * http://jsperf.com/string-concatenation-versus-array-operations-with-join\r\n *\r\n * It is clearly inefficient to use a StringBuilder or LinkedList to build a string when you have a small set of string portions.\r\n * StringBuilder will really show it's benefit likely somewhere above 1000 items.\r\n *****************************/\r\n\r\n\r\nexport default\r\nclass StringBuilder implements IDisposable\r\n\t// Adding IDisposable allows for use with System.using();\r\n\t// ... and since this may end up being a large array container, might be a good idea to allow for flexible cleanup.\r\n{\r\n\t//noinspection JSMismatchedCollectionQueryUpdate\r\n\tprivate _partArray:any[];\r\n\tprivate _latest:string; // AKA persistentString\r\n\r\n\tconstructor(...initial:any[])\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_._latest = null;\r\n\t\t_._partArray = [];\r\n\t\t_.appendThese(initial);\r\n\t}\r\n\r\n\tprivate appendSingle(item:any):void\r\n\t{\r\n\t\tif(item!==null && item!==VOID0) {\r\n\t\t\tvar _ = this;\r\n\t\t\t_._latest = null;\r\n\t\t\tswitch(typeof item) {\r\n\t\t\t\tcase Type.OBJECT:\r\n\t\t\t\tcase Type.FUNCTION:\r\n\t\t\t\t\titem = item.toString();\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t_._partArray.push(item); // Other primitive types can keep their format since a number or boolean is a smaller footprint than a string.\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tappendThese(items:any[]):StringBuilder\r\n\t{\r\n\t\tvar _ = this;\r\n\t\titems.forEach(s=> _.appendSingle(s));\r\n\t\treturn _;\r\n\t}\r\n\r\n\tappend(...items:any[]):StringBuilder\r\n\t{\r\n\t\tthis.appendThese(items);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tappendLine(...items:any[]):StringBuilder\r\n\t{\r\n\t\tthis.appendLines(items);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tappendLines(items:any[]):StringBuilder\r\n\t{\r\n\t\tvar _ = this;\r\n\t\titems.forEach(\r\n\t\t\t\ti=>\r\n\t\t\t{\r\n\t\t\t\tif(i!==null && i!==VOID0) {\r\n\t\t\t\t\t_.appendSingle(i);\r\n\t\t\t\t\t_._partArray.push(\"\\r\\n\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn _;\r\n\t}\r\n\r\n\t/** /// These methods can only efficiently be added if not using a single array.\r\n\t insert(index: number, value: string, count: number = 1): StringBuilder\r\n\t {\r\n\r\n\t}\r\n\r\n\t remove(startIndex:number, length:number): StringBuilder\r\n\t {\r\n\r\n\t}\r\n\t /**/\r\n\r\n\tget isEmpty()\r\n\t{\r\n\t\treturn this._partArray.length===0;\r\n\t}\r\n\r\n\ttoString()\r\n\t{\r\n\t\tvar latest = this._latest;\r\n\t\tif(!latest===null)\r\n\t\t\tthis._latest = latest = this._partArray.join();\r\n\r\n\t\treturn latest;\r\n\t}\r\n\r\n\tjoin(delimiter:string):string\r\n\t{\r\n\t\treturn this._partArray.join(delimiter);\r\n\t}\r\n\r\n\tclear():void\r\n\t{\r\n\t\tthis._partArray.length = 0;\r\n\t\tthis._latest = null;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tthis.clear();\r\n\t}\r\n\r\n}\r\n"]}