{"version":3,"sources":["System/Time/DateTime.ts"],"names":["DateTime","DateTime.constructor","DateTime.toJsDate","DateTime._setJsDate","DateTime.addMilliseconds","DateTime.addSeconds","DateTime.addMinutes","DateTime.addHours","DateTime.addDays","DateTime.addMonths","DateTime.addYears","DateTime.add","DateTime.subtract","DateTime.timePassedSince","DateTime.toTimeStamp","DateTime.kind","DateTime.year","DateTime.month","DateTime.day","DateTime.dayOfWeek","DateTime.date","DateTime.timeOfDay","DateTime.toUniversalTime","DateTime.between","DateTime.isLeapYear","DateTime.daysInMonth","DateTime.now","DateTime.today","DateTime.tomorrow"],"mappings":"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","file":"System/Time/DateTime.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based on .NET DateTime's interface.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path='ITimeQuantity.d.ts'/>\r\n///<reference path=\"ITimeStamp.d.ts\"/>\r\n///<reference path=\"IDateTime.d.ts\"/>\r\n///<reference path=\"Calendars.d.ts\"/>\r\n///<reference path=\"HowMany.ts\"/>\r\nimport Type from '../Types';\r\nimport ClockTime from './ClockTime';\r\nimport TimeSpan from './TimeSpan';\r\nimport TimeStamp from './TimeStamp';\r\n\r\n\r\nclass DateTime implements ICalendarDate, IDateTime\r\n{\r\n\tprivate _value:Date;\r\n\r\n\ttoJsDate():Date\r\n\t{\r\n\t\treturn new Date(this._value.getTime()); // return a clone.\r\n\t}\r\n\r\n\tprivate _setJsDate(value:Date)\r\n\t{\r\n\t\tthis._time = null;\r\n\t\tthis._value = new Date(value.getTime());\r\n\t}\r\n\r\n\tconstructor();\r\n\tconstructor(dateString:string, kind?:DateTime.Kind);\r\n\tconstructor(milliseconds:number, kind?:DateTime.Kind);\r\n\tconstructor(source:Date, kind?:DateTime.Kind);\r\n\tconstructor(source:DateTime, kind?:DateTime.Kind);\r\n\tconstructor(value:any = new Date(), kind:DateTime.Kind = DateTime.Kind.Local)\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_._kind = kind;\r\n\t\tif(Type.isInstanceOf<DateTime>(value,DateTime))\r\n\t\t\t_._value = value.toJsDate();\r\n\t\telse if(Type.isInstanceOf<Date>(value,Date))\r\n\t\t\t_._setJsDate(value);\r\n\t\telse\r\n\t\t\t_._value = value===void(0)\r\n\t\t\t\t? new Date()\r\n\t\t\t\t: new Date(value);\r\n\t}\r\n\r\n\tprivate _kind:DateTime.Kind;\r\n\tget kind():DateTime.Kind\r\n\t{\r\n\t\treturn this._kind;\r\n\t}\r\n\r\n\tget year():number\r\n\t{\r\n\t\treturn this._value.getFullYear();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Gregorian Month (zero indexed).\r\n\t * @returns {number}\r\n\t */\r\n\tget month():Gregorian.Month\r\n\t{\r\n\t\treturn this._value.getMonth();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the day of the month.  An integer between 1 and 31.\r\n\t * @returns {number}\r\n\t */\r\n\tget day():number\r\n\t{\r\n\t\treturn this._value.getDate();\r\n\t}\r\n\r\n\tget dayOfWeek():Gregorian.DayOfWeek\r\n\t{\r\n\t\treturn this._value.getDay();\r\n\t}\r\n\r\n\r\n\taddMilliseconds(ms:number):DateTime\r\n\t{\r\n\t\tms = ms || 0;\r\n\t\treturn new DateTime(this._value.getTime() + ms, this._kind);\r\n\t}\r\n\r\n\taddSeconds(seconds:number):DateTime\r\n\t{\r\n\t\tseconds = seconds || 0;\r\n\t\treturn this.addMilliseconds(seconds*HowMany.Milliseconds.Per.Second);\r\n\t}\r\n\r\n\taddMinutes(minutes:number):DateTime\r\n\t{\r\n\t\tminutes = minutes || 0;\r\n\t\treturn this.addMilliseconds(minutes*HowMany.Milliseconds.Per.Minute);\r\n\t}\r\n\r\n\taddHours(hours:number):DateTime\r\n\t{\r\n\t\thours = hours || 0;\r\n\t\treturn this.addMilliseconds(hours*HowMany.Milliseconds.Per.Hour);\r\n\t}\r\n\r\n\taddDays(days:number):DateTime\r\n\t{\r\n\t\tdays = days || 0;\r\n\t\treturn this.addMilliseconds(days*HowMany.Milliseconds.Per.Day);\r\n\t}\r\n\r\n\taddMonths(months:number):DateTime\r\n\t{\r\n\t\tmonths = months || 0;\r\n\t\tvar d = this.toJsDate();\r\n\t\td.setMonth(d.getMonth()+months);\r\n\t\treturn new DateTime(d, this._kind);\r\n\t}\r\n\r\n\taddYears(years:number):DateTime\r\n\t{\r\n\t\tyears = years || 0;\r\n\t\tvar d = this.toJsDate();\r\n\t\td.setFullYear(d.getFullYear()+years);\r\n\t\treturn new DateTime(d, this._kind);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Receives an ITimeQuantity value and adds based on the total milliseconds.\r\n\t * @param {ITimeQuantity} time\r\n\t * @returns {DateTime}\r\n\t */\r\n\tadd(time:ITimeQuantity):DateTime\r\n\t{\r\n\t\treturn this.addMilliseconds(time.getTotalMilliseconds());\r\n\t}\r\n\r\n\t/**\r\n\t * Receives an ITimeQuantity value and subtracts based on the total milliseconds.\r\n\t * @param {ITimeQuantity} time\r\n\t * @returns {DateTime}\r\n\t */\r\n\tsubtract(time:ITimeQuantity):DateTime\r\n\t{\r\n\t\treturn this.addMilliseconds(-time.getTotalMilliseconds());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a TimeSpan representing the amount of time between two dates.\r\n\t * @param previous\r\n\t * @returns {TimeSpan}\r\n\t */\r\n\ttimePassedSince(previous:Date|DateTime):TimeSpan\r\n\t{\r\n\t\treturn DateTime.between(previous, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a DateTime object for 00:00 of this date.\r\n\t */\r\n\tget date():DateTime\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn new DateTime(\r\n\t\t\tnew Date(\r\n\t\t\t\t_.year,\r\n\t\t\t\t_.month,\r\n\t\t\t\t_.day\r\n\t\t\t)\r\n\t\t\t, _._kind\r\n\t\t);\r\n\t}\r\n\r\n\tprivate _time:ClockTime;\r\n\r\n\t/**\r\n\t * Returns the time of day represented by a ClockTime object.\r\n\t * @returns {ClockTime}\r\n\t */\r\n\tget timeOfDay():ClockTime\r\n\t{\r\n\t\tvar _ = this, t = _._time;\r\n\t\tif(!t)\r\n\t\t{\r\n\t\t\tvar d = this._value;\r\n\t\t\t_._time = t = new ClockTime(\r\n\t\t\t\td.getHours(),\r\n\t\t\t\td.getMinutes(),\r\n\t\t\t\td.getSeconds(),\r\n\t\t\t\td.getMilliseconds());\r\n\t\t}\r\n\t\treturn t;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a readonly object which contains all the date and time components.\r\n\t */\r\n\ttoTimeStamp():ITimeStamp {\r\n\t\treturn TimeStamp.from(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the now local time.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tstatic get now():DateTime\r\n\t{\r\n\t\treturn new DateTime();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a UTC version of this date if its kind is local.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tget toUniversalTime():DateTime\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(_._kind!=DateTime.Kind.Local)\r\n\t\t\treturn new DateTime(_, _._kind);\r\n\r\n\t\tvar d = _._value;\r\n\t\treturn new DateTime(\r\n\t\t\tnew Date(\r\n\t\t\t\td.getUTCFullYear(),\r\n\t\t\t\td.getUTCMonth(),\r\n\t\t\t\td.getUTCDate(),\r\n\t\t\t\td.getUTCHours(),\r\n\t\t\t\td.getUTCMinutes(),\r\n\t\t\t\td.getUTCSeconds(),\r\n\t\t\t\td.getUTCMilliseconds()\r\n\t\t\t),\r\n\t\t\tDateTime.Kind.Utc\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * The date component for now.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tstatic get today():DateTime\r\n\t{\r\n\t\treturn DateTime.now.date;\r\n\t}\r\n\r\n\t/**\r\n\t * Midnight tomorrow.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tstatic get tomorrow():DateTime\r\n\t{\r\n\t\tvar today:DateTime = DateTime.today;\r\n\t\treturn today.addDays(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the difference between two dates as a TimeSpan.\r\n\t * @param first\r\n\t * @param last\r\n\t */\r\n\tstatic between(first:Date|DateTime, last:Date|DateTime):TimeSpan\r\n\t{\r\n\t\tvar f:Date = Type.isInstanceOf<DateTime>(first,DateTime) ? first._value : <Date>first,\r\n\t\t    l:Date = Type.isInstanceOf<DateTime>(last,DateTime) ? last._value : <Date>last;\r\n\r\n\t\treturn new TimeSpan(f.getTime() - l.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates if the given year is a leap year using the formula:\r\n\t * ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)\r\n\t * @param year\r\n\t * @returns {boolean}\r\n\t */\r\n\tstatic isLeapYear(year:number):boolean {\r\n\t\treturn ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the number of days for the specific year and month.\r\n\t * @param year\r\n\t * @param month\r\n\t * @returns {any}\r\n\t */\r\n\tstatic daysInMonth(year:number, month:Gregorian.Month):number {\r\n\t\t// Basically, add 1 month, subtract a day... What's the date?\r\n\t\treturn (new Date(year,month+1,0)).getDate();\r\n\t}\r\n\r\n\r\n}\r\n\r\n// Extend DateTime's usefulness.\r\nmodule DateTime\r\n{\r\n\texport const enum Kind {\r\n\t\tUnspecified,\r\n\t\tLocal,\r\n\t\tUtc,\r\n\t}\r\n}\r\n\r\nObject.freeze(DateTime);\r\n\r\nexport default DateTime;\r\n"]}