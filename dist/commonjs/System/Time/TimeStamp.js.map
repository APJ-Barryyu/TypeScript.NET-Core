{"version":3,"sources":["System/Time/TimeStamp.ts"],"names":["TimeStamp","TimeStamp.constructor","TimeStamp.toJsDate","TimeStamp.from"],"mappings":";;;;;;;;;;;;;;;;qBASiB,UAAU;;;;IAK3B,SAAA;AAICA,aAJD,SAAA,CAKSA,IAAWA,EACXA,KAAqBA,EAMNA;YALfA,GAAGA,yDAAUA,CAACA;YACdA,IAAIA,yDAAUA,CAACA;YACfA,MAAMA,yDAAUA,CAACA;YACjBA,MAAMA,yDAAUA,CAACA;YACjBA,WAAWA,yDAAUA,CAACA;YACtBA,IAAIA,yDAAUA,CAACA;;8BAZxB,SAAA;;;AAKSC,YAAAA,CAAAA,IAAIA,GAAJA,IAAIA,CAAOA;AACXA,YAAAA,CAAAA,KAAKA,GAALA,KAAKA,CAAgBA;AACrBA,YAAAA,CAAAA,GAAGA,GAAHA,GAAGA,CAAWA;AACdA,YAAAA,CAAAA,IAAIA,GAAJA,IAAIA,CAAWA;AACfA,YAAAA,CAAAA,MAAMA,GAANA,MAAMA,CAAWA;AACjBA,YAAAA,CAAAA,MAAMA,GAANA,MAAMA,CAAWA;AACjBA,YAAAA,CAAAA,WAAWA,GAAXA,WAAWA,CAAWA;AACtBA,YAAAA,CAAAA,IAAIA,GAAJA,IAAIA,CAAWA;AAKtBA,cAAMA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA;KACpBA;;iBAlBF,SAAA;;eAoBSD,oBAAAA;AAEPE,gBAAIA,CAACA,GAAGA,IAAIA,CAACA;AACbA,mBAAOA,IAAIA,IAAIA,CAACA,CAACA,CAACA,IAAIA,EAAEA,CAACA,CAACA,KAAKA,EAAEA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAACA,IAAIA,EAAEA,CAACA,CAACA,MAAMA,EAAEA,CAACA,CAACA,MAAMA,EAAEA,CAACA,CAACA,WAAWA,GAAGA,CAACA,CAACA,IAAIA,GAACA,KAA6BA,CAACA,CAACA;SAC1HA;;;eAEUF,cAACA,CAAgBA,EAAAA;AAE3BG,gBAAIA,CAAEA,mBAAKA,YAAYA,CAAOA,CAACA,EAACA,IAAIA,CAACA,AAACA,IAAIA,mBAAKA,SAASA,CAACA,CAACA,EAACA,UAAUA,CAACA,EACrEA,CAACA,GAAeA,CAAEA,CAACA,QAAQA,EAAEA,CAACA;AAC/BA,gBAAGA,mBAAKA,YAAYA,CAAOA,CAACA,EAACA,IAAIA,CAACA,EAClCA;AACCA,uBAAOA,IAAIA,SAASA,CACnBA,CAACA,CAACA,WAAWA,EAAEA,EACfA,CAACA,CAACA,QAAQA,EAAEA,EACZA,CAACA,CAACA,OAAOA,EAAEA,EACXA,CAACA,CAACA,QAAQA,EAAEA,EACZA,CAACA,CAACA,UAAUA,EAAEA,EACdA,CAACA,CAACA,UAAUA,EAAEA,EACdA,CAACA,CAACA,eAAeA,EAAEA,CACnBA,CAACA;aACFA,MAEDA;AACCA,sBAAMA,KAAKA,CAACA,oBAAoBA,CAACA,CAACA;aAClCA;SACDA;;;WA9CF,SAAA;;;qBAAA,SAAA","file":"System/Time/TimeStamp.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ITimeStamp.d.ts\"/>\r\n///<reference path=\"IDateTime.d.ts\"/>\r\n///<reference path=\"Calendars.d.ts\"/>\r\n///<reference path=\"HowMany.ts\"/>\r\nimport Type from '../Types';\r\n\r\n/**\r\n * An alternative to Date or DateTime.  Is a model representing the exact date and time.\r\n */\r\nexport default\r\nclass TimeStamp implements ITimeStamp, IDateTime\r\n{\r\n\r\n\tconstructor(\r\n\t\tpublic year:number,\r\n\t\tpublic month:Gregorian.Month,\r\n\t\tpublic day:number = 1,\r\n\t\tpublic hour:number = 0,\r\n\t\tpublic minute:number = 0,\r\n\t\tpublic second:number = 0,\r\n\t\tpublic millisecond:number = 0,\r\n\t\tpublic tick:number = 0)\r\n\t{\r\n\r\n\t\t// TODO: Add validation or properly carry out of range values...\r\n\r\n\t\tObject.freeze(this);\r\n\t}\r\n\r\n\ttoJsDate():Date\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn new Date(_.year, _.month, _.day, _.hour, _.minute, _.second, _.millisecond + _.tick/HowMany.Ticks.Per.Millisecond);\r\n\t}\r\n\r\n\tstatic from(d:Date|IDateTime):TimeStamp\r\n\t{\r\n\t\tif (!(Type.isInstanceOf<Date>(d,Date)) && Type.hasMember(d,'toJsDate'))\r\n\t\t\td = (<IDateTime>d).toJsDate();\r\n\t\tif(Type.isInstanceOf<Date>(d,Date))\r\n\t\t{\r\n\t\t\treturn new TimeStamp(\r\n\t\t\t\td.getFullYear(),\r\n\t\t\t\td.getMonth(),\r\n\t\t\t\td.getDate(),\r\n\t\t\t\td.getHours(),\r\n\t\t\t\td.getMinutes(),\r\n\t\t\t\td.getSeconds(),\r\n\t\t\t\td.getMilliseconds()\r\n\t\t\t);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthrow Error('Invalid date type.');\r\n\t\t}\r\n\t}\r\n}\r\n"]}