{"version":3,"sources":["System/Time/TimeSpan.ts"],"names":["TimeSpan","TimeSpan.constructor","TimeSpan.add","TimeSpan.addUnit","TimeSpan.total","TimeSpan.time","TimeSpan.from","TimeSpan.fromDays","TimeSpan.fromHours","TimeSpan.fromMinutes","TimeSpan.fromSeconds","TimeSpan.fromMilliseconds","TimeSpan.fromTicks","TimeSpan.zero"],"mappings":"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","file":"System/Time/TimeSpan.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Originally based upon .NET source but with many additions and improvements.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ITimeMeasurement.d.ts\"/>\r\n///<reference path=\"../IEquatable.d.ts\"/>\r\n///<reference path=\"../IComparable.d.ts\"/>\r\n///<reference path=\"HowMany.ts\"/>\r\nimport {areEqual,compare} from '../Compare';\r\nimport Type from '../Types';\r\nimport TimeUnit from './TimeUnit';\r\nimport ClockTime from './ClockTime';\r\nimport TimeQuantity from './TimeQuantity';\r\n\r\n/**\r\n * TimeSpan expands on TimeQuantity to provide an class that is similar to .NET's TimeSpan including many useful static methods.\r\n */\r\nexport default\r\nclass TimeSpan extends TimeQuantity implements ITimeMeasurement\r\n{\r\n\r\n\tticks: number;\r\n\tmilliseconds: number;\r\n\tseconds: number;\r\n\tminutes: number;\r\n\thours: number;\r\n\tdays: number;\r\n\r\n\t// In .NET the default type is Ticks, but for JavaScript, we will use Milliseconds.\r\n\tconstructor(value:number, units:TimeUnit = TimeUnit.Milliseconds)\r\n\t{\r\n\t\tvar ms = TimeUnit.toMilliseconds(value, units);\r\n\t\tsuper(ms);\r\n\r\n\t\tvar _ = this;\r\n\t\t_.ticks = ms*HowMany.Ticks.Per.Millisecond;\r\n\t\t_.milliseconds = ms;\r\n\t\t_.seconds = ms/HowMany.Milliseconds.Per.Second;\r\n\t\t_.minutes = ms/HowMany.Milliseconds.Per.Minute;\r\n\t\t_.hours = ms/HowMany.Milliseconds.Per.Hour;\r\n\t\t_.days = ms/HowMany.Milliseconds.Per.Day;\r\n\t}\r\n\r\n\t/**\r\n\t * Provides an standard interface for acquiring the total time.\r\n\t * @returns {TimeSpan}\r\n\t */\r\n\tget total():TimeSpan\r\n\t{\r\n\t\treturn this;\r\n\t}\r\n\r\n\tprivate _time:ClockTime;\r\n\t// Instead of the confusing getTotal versus unit name, expose a 'ClockTime' value which reports the individual components.\r\n\tget time():ClockTime\r\n\t{\r\n\t\tvar _ = this, t = _._time;\r\n\t\tif(!t) _._time = t = new ClockTime(_.getTotalMilliseconds());\r\n\t\treturn t;\r\n\t}\r\n\r\n\tadd(other:ITimeQuantity):TimeSpan\r\n\t{\r\n\t\tif(Type.isNumber(other))\r\n\t\t\tthrow new Error(\r\n\t\t\t\t\"Use .addUnit(value:number,units:TimeUnit) to add a numerical value amount.  Default units are milliseconds.\\n\" +\r\n\t\t\t\t\".add only supports quantifiable time values (ITimeTotal).\"\r\n\t\t\t);\r\n\r\n\t\treturn new TimeSpan(this.getTotalMilliseconds() + other.total.milliseconds);\r\n\t}\r\n\r\n\taddUnit(value:number, units:TimeUnit = TimeUnit.Milliseconds):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(this.getTotalMilliseconds() + TimeUnit.toMilliseconds(value, units));\r\n\t}\r\n\r\n\r\n\tstatic from(value:number, units:TimeUnit)\r\n\t{\r\n\t\treturn new TimeSpan(value, units);\r\n\t}\r\n\r\n\tstatic fromDays(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Days);\r\n\t}\r\n\r\n\tstatic fromHours(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Hours);\r\n\t}\r\n\r\n\tstatic fromMinutes(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Minutes);\r\n\t}\r\n\r\n\tstatic fromSeconds(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Seconds);\r\n\t}\r\n\r\n\tstatic fromMilliseconds(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Milliseconds);\r\n\t}\r\n\r\n\tstatic fromTicks(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Ticks);\r\n\t}\r\n\r\n\r\n\tstatic get zero():TimeSpan\r\n\t{\r\n\t\treturn timeSpanZero || (timeSpanZero = new TimeSpan(0));\r\n\t}\r\n}\r\n\r\n\r\nvar timeSpanZero:TimeSpan;\r\n"]}