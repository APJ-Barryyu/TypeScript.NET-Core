{"version":3,"sources":["System/Time/TimeQuantity.ts"],"names":["TimeQuantity","TimeQuantity.constructor","TimeQuantity.getTotalMilliseconds","TimeQuantity.equals","TimeQuantity.compareTo","TimeQuantity.getTotal","TimeQuantity.direction","TimeQuantity.total"],"mappings":";;;;;;;;;;;;;;;;uBAS+B,YAAY;;wBACtB,YAAY;;;;IAKjC,YAAA;AAICA,aAJD,YAAA,GAI2CA;YAApBA,SAASA,yDAAUA,CAACA;;8BAJ3C,YAAA;;AAIuBC,YAAAA,CAAAA,SAASA,GAATA,SAASA,CAAWA;KAEzCA;;iBANF,YAAA;;eASqBD,gCAAAA;AAEnBE,mBAAOA,IAAIA,CAACA,SAASA,CAACA;SACtBA;;;eAgBKF,gBAACA,KAAmBA,EAAAA;AAEzBG,mBAAOA,uBAASA,IAAIA,CAACA,oBAAoBA,EAAEA,EAAEA,KAAKA,IAAIA,KAAKA,CAACA,KAAKA,IAAIA,KAAKA,CAACA,KAAKA,CAACA,YAAYA,CAACA,CAACA;SAC/FA;;;eAOQH,mBAACA,KAAmBA,EAAAA;AAE5BI,mBAAOA,sBAAQA,IAAIA,CAACA,oBAAoBA,EAAEA,EAAEA,KAAKA,IAAIA,KAAKA,CAACA,KAAKA,IAAIA,KAAKA,CAACA,KAAKA,CAACA,YAAYA,CAACA,CAACA;SAC9FA;;;eAkCOJ,kBAACA,KAAcA,EAAAA;AAEtBK,mBAAOA,sBAASA,gBAAgBA,CAACA,IAAIA,CAACA,oBAAoBA,EAAEA,EAAEA,KAAKA,CAACA,CAACA;SACrEA;;;aA5DYL,eAAAA;AAEZM,mBAAOA,sBAAQA,IAAIA,CAACA,oBAAoBA,EAAEA,EAAEA,CAACA,CAACA,CAACA;SAC/CA;;;aA8BQN,eAAAA;AAERO,gBAAIA,CAACA,GAAGA,IAAIA,CAACA,MAAMA,CAACA;AACpBA,gBAAGA,CAACA,CAACA,EACLA;AACCA,oBAAIA,EAAEA,GAAGA,IAAIA,CAACA,oBAAoBA,EAAEA,CAACA;AAErCA,oBAAIA,CAACA,MAAMA,GAAGA,CAACA,GAAqBA,MAAMA,CAACA,MAAMA,CAACA;AACjDA,yBAAKA,EAAEA,EAAEA,GAACA,KAA6BA;AACvCA,gCAAYA,EAAEA,EAAEA;AAChBA,2BAAOA,EAAEA,EAAEA,GAACA,IAA+BA;AAC3CA,2BAAOA,EAAEA,EAAEA,GAACA,KAA+BA;AAC3CA,yBAAKA,EAAEA,EAAEA,GAACA,OAA6BA;AACvCA,wBAAIA,EAAEA,EAAEA,GAACA,QAA4BA;iBACrCA,CAACA,CAACA;aACHA;AACDA,mBAAOA,CAACA,CAACA;SACTA;;;WApEF,YAAA;;;qBAAA,YAAA","file":"System/Time/TimeQuantity.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ITimeQuantity.d.ts\"/>\r\n///<reference path=\"../IEquatable.d.ts\"/>\r\n///<reference path=\"../IComparable.d.ts\"/>\r\n///<reference path=\"HowMany.ts\"/>\r\nimport {areEqual,compare} from '../Compare';\r\nimport TimeUnit from './TimeUnit';\r\n\r\n/**\r\n * This class provides a simple means for storing and calculating time quantities.\r\n */\r\nexport default\r\nclass TimeQuantity implements IEquatable<ITimeQuantity>, IComparable<ITimeQuantity>, ITimeQuantity\r\n{\r\n\r\n\tconstructor(protected _quantity:number = 0)\r\n\t{\r\n\t}\r\n\r\n\t// Provides an overridable mechanism for extending this class.\r\n\tgetTotalMilliseconds():number\r\n\t{\r\n\t\treturn this._quantity;\r\n\t}\r\n\r\n\t/**\r\n\t * +1, 0, or -1 depending on the time direction.\r\n\t * @returns {number}\r\n\t */\r\n\tget direction():number\r\n\t{\r\n\t\treturn compare(this.getTotalMilliseconds(), 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Compares this instance against any other time quantity instance and return true if the amount of time is the same.\r\n\t * @param other\r\n\t * @returns {boolean}\r\n\t */\r\n\tequals(other:ITimeQuantity):boolean\r\n\t{\r\n\t\treturn areEqual(this.getTotalMilliseconds(), other && other.total && other.total.milliseconds);\r\n\t}\r\n\r\n\t/**\r\n\t * Compares this instance against any other time quantity instance.\r\n\t * @param other\r\n\t * @returns {CompareResult}\r\n\t */\r\n\tcompareTo(other:ITimeQuantity):number\r\n\t{\r\n\t\treturn compare(this.getTotalMilliseconds(), other && other.total && other.total.milliseconds);\r\n\t}\r\n\r\n\r\n\t// Clear this value if sub-class values change.\r\n\tprotected _total:ITimeMeasurement;\r\n\r\n\t/**\r\n\t * Returns an object with all units exposed as totals.\r\n\t * @returns {ITimeMeasurement}\r\n\t */\r\n\tget total():ITimeMeasurement\r\n\t{\r\n\t\tvar t = this._total;\r\n\t\tif(!t)\r\n\t\t{\r\n\t\t\tvar ms = this.getTotalMilliseconds();\r\n\r\n\t\t\tthis._total = t = <ITimeMeasurement>Object.freeze({\r\n\t\t\t\tticks: ms*HowMany.Ticks.Per.Millisecond,\r\n\t\t\t\tmilliseconds: ms,\r\n\t\t\t\tseconds: ms/HowMany.Milliseconds.Per.Second,\r\n\t\t\t\tminutes: ms/HowMany.Milliseconds.Per.Minute,\r\n\t\t\t\thours: ms/HowMany.Milliseconds.Per.Hour,\r\n\t\t\t\tdays: ms/HowMany.Milliseconds.Per.Day,\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn t;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the total amount of time measured in the requested TimeUnit.\r\n\t * @param units\r\n\t * @returns {number}\r\n\t */\r\n\tgetTotal(units:TimeUnit):number\r\n\t{\r\n\t\treturn TimeUnit.fromMilliseconds(this.getTotalMilliseconds(), units);\r\n\t}\r\n}\r\n"]}