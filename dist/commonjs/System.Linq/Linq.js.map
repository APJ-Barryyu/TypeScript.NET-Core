{"version":3,"sources":["System.Linq/Linq.ts"],"names":["LinqFunctions","LinqFunctions.Greater","LinqFunctions.Lesser","UnsupportedEnumerableException","UnsupportedEnumerableException.constructor","Enumerable","Enumerable.constructor","Enumerable.getEnumerator","Enumerable._onDispose","Enumerable.forEach","Enumerable.toArray","Enumerable.asEnumerable","Enumerable.toLookup","Enumerable.toMap","Enumerable.toDictionary","Enumerable.toJoinedString","Enumerable.doAction","Enumerable.force","Enumerable.skip","Enumerable.skipWhile","Enumerable.take","Enumerable.takeWhile","Enumerable.takeUntil","Enumerable.takeExceptLast","Enumerable.takeFromLast","Enumerable.traverseBreadthFirst","Enumerable.traverseDepthFirst","Enumerable.flatten","Enumerable.pairwise","Enumerable.scan","Enumerable.select","Enumerable.selectMany","Enumerable.choose","Enumerable.where","Enumerable.ofType","Enumerable.except","Enumerable.distinct","Enumerable.distinctUntilChanged","Enumerable.reverse","Enumerable.shuffle","Enumerable.count","Enumerable.all","Enumerable.every","Enumerable.any","Enumerable.some","Enumerable.isEmpty","Enumerable.contains","Enumerable.indexOf","Enumerable.lastIndexOf","Enumerable.defaultIfEmpty","Enumerable.zip","Enumerable.zipMultiple","Enumerable.join","Enumerable.groupJoin","Enumerable.concatWith","Enumerable.merge","Enumerable.concat","Enumerable.insertAt","Enumerable.alternateMultiple","Enumerable.alternateSingle","Enumerable.alternate","Enumerable.intersect","Enumerable.sequenceEqual","Enumerable.union","Enumerable.orderBy","Enumerable.orderUsing","Enumerable.orderUsingReversed","Enumerable.orderByDescending","Enumerable.groupBy","Enumerable.partitionBy","Enumerable.buffer","Enumerable.aggregate","Enumerable.average","Enumerable.max","Enumerable.min","Enumerable.maxBy","Enumerable.minBy","Enumerable.sum","Enumerable.product","Enumerable.elementAt","Enumerable.elementAtOrDefault","Enumerable.first","Enumerable.firstOrDefault","Enumerable.last","Enumerable.lastOrDefault","Enumerable.single","Enumerable.singleOrDefault","Enumerable.share","Enumerable.memoize","Enumerable.catchError","Enumerable.finallyAction","Enumerable.fromArray","Enumerable.from","Enumerable.choice","Enumerable.cycle","Enumerable.empty","Enumerable.repeat","Enumerable.repeatWithFinalize","Enumerable.make","Enumerable.range","Enumerable.rangeDown","Enumerable.toInfinity","Enumerable.toNegativeInfinity","Enumerable.rangeTo","Enumerable.matches","Enumerable.generate","Enumerable.unfold","Enumerable.defer","Enumerable.map","ArrayEnumerable","ArrayEnumerable.constructor","ArrayEnumerable._onDispose","ArrayEnumerable.toArray","ArrayEnumerable.asEnumerable","ArrayEnumerable.forEach","ArrayEnumerable.any","ArrayEnumerable.count","ArrayEnumerable.elementAt","ArrayEnumerable.elementAtOrDefault","ArrayEnumerable.first","ArrayEnumerable.firstOrDefault","ArrayEnumerable.last","ArrayEnumerable.lastOrDefault","ArrayEnumerable.skip","ArrayEnumerable.takeExceptLast","ArrayEnumerable.takeFromLast","ArrayEnumerable.reverse","ArrayEnumerable.memoize","ArrayEnumerable.sequenceEqual","ArrayEnumerable.toJoinedString","ArrayEnumerable.source","Grouping","Grouping.constructor","Grouping.key","Lookup","Lookup.constructor","Lookup.get","Lookup.contains","Lookup.getEnumerator","Lookup.count","WhereEnumerable","WhereEnumerable.constructor","WhereEnumerable.where","WhereEnumerable.select","WhereEnumerable.getEnumerator","WhereEnumerable._onDispose","WhereSelectEnumerable","WhereSelectEnumerable.constructor","WhereSelectEnumerable.where","WhereSelectEnumerable.select","WhereSelectEnumerable.getEnumerator","WhereSelectEnumerable._onDispose","OrderedEnumerable","OrderedEnumerable.constructor","OrderedEnumerable.createOrderedEnumerable","OrderedEnumerable.thenBy","OrderedEnumerable.thenUsing","OrderedEnumerable.thenByDescending","OrderedEnumerable.thenUsingReversed","OrderedEnumerable.getEnumerator","OrderedEnumerable._onDispose","createSortContext","throwIfDisposed"],"mappings":"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","file":"System.Linq/Linq.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Original: http://linqjs.codeplex.com/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../System/Primitive.d.ts\"/>\r\n///<reference path=\"../System/FunctionTypes.d.ts\"/>\r\n///<reference path=\"../System/Collections/Array/IArray.d.ts\"/>\r\n///<reference path=\"../System/Collections/Enumeration/IEnumerator.d.ts\"/>\r\n///<reference path=\"../System/Collections/Enumeration/IEnumerable.d.ts\"/>\r\n///<reference path=\"../System/Collections/Dictionaries/IDictionary.d.ts\"/>\r\n///<reference path=\"../System/Collections/Sorting/Order.d.ts\"/>\r\nimport * as Values from '../System/Compare';\r\nimport * as Arrays from '../System/Collections/Array/Compare';\r\nimport * as ArrayUtility from '../System/Collections/Array/Utility';\r\nimport {from as enumeratorFrom, forEach as enumeratorForEach, isEnumerable} from '../System/Collections/Enumeration/Enumerator';\r\nimport Type from '../System/Types';\r\nimport Integer from '../System/Integer';\r\nimport BaseFunctions from '../System/Functions';\r\nimport ArrayEnumerator from '../System/Collections/Enumeration/ArrayEnumerator';\r\nimport EnumeratorBase from '../System/Collections/Enumeration/EnumeratorBase';\r\nimport Dictionary from '../System/Collections/Dictionaries/Dictionary';\r\nimport Queue from '../System/Collections/Queue';\r\nimport {dispose, disposeThese, using} from '../System/Disposable/Utility';\r\nimport DisposableBase from '../System/Disposable/DisposableBase';\r\nimport Exception from \"../System/Exception\";\r\nimport ArgumentException from '../System/Exceptions/ArgumentException';\r\nimport ObjectDisposedException from '../System/Disposable/ObjectDisposedException';\r\nimport KeySortedContext from \"../System/Collections/Sorting/KeySortedContext\";\r\ntype Comparable = Primitive|IComparable<any>;\r\n'use strict';\r\n\r\n// #region Local Constants.\r\n\r\nconst VOID0:any = void 0;\r\n\r\n// Leave internal to avoid accidental overwriting.\r\nclass LinqFunctions extends BaseFunctions\r\n{\r\n\tGreater<T>(a:T, b:T)\r\n\t{\r\n\t\treturn a>b ? a : b;\r\n\t}\r\n\r\n\tLesser<T>(a:T, b:T)\r\n\t{\r\n\t\treturn a<b ? a : b;\r\n\t}\r\n}\r\n\r\nvar Functions = new LinqFunctions();\r\nObject.freeze(Functions);\r\n\r\n// #endregion\r\n\r\nclass UnsupportedEnumerableException extends Exception\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(\"Unsupported enumerable.\");\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Defined values for doAction.\r\n */\r\nexport const enum EnumerableAction\r\n{\r\n\tBreak  = 0,\r\n\tReturn = 1,\r\n\tSkip   = 2\r\n}\r\n\r\n/**\r\n * Enumerable<T> is a wrapper class that allows more primitive enumerables to exhibit LINQ behavior.\r\n *\r\n * In C# Enumerable<T> is not an instance but has extensions for IEnumerable<T>.\r\n * In this case, we use Enumerable<T> as the underlying class that is being chained.\r\n */\r\nexport class Enumerable<T>\r\nextends DisposableBase implements IEnumerable<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tprotected _enumeratorFactory:() => IEnumerator<T>,\r\n\t\tfinalizer?:() => void)\r\n\t{\r\n\t\tsuper(finalizer);\r\n\t}\r\n\r\n\t/**\r\n\t * Static shortcut for creating an ArrayEnumerable.\r\n\t */\r\n\tstatic fromArray<T>(array:IArray<T>):Enumerable<T>\r\n\t{\r\n\t\treturn new ArrayEnumerable<T>(array);\r\n\t}\r\n\r\n\t/**\r\n\t * Universal method for converting a primitive enumerables into a LINQ enabled ones.\r\n\t *\r\n\t * Is not limited to TypeScript usages.\r\n\t */\r\n\tstatic from<T>(source:IEnumerable<T> | IArray<T>):Enumerable<T>\r\n\t{\r\n\t\tif(Type.isObject(source))\r\n\t\t{\r\n\t\t\tif(Type.isInstanceOf<Enumerable<T>>(source, Enumerable))\r\n\t\t\t\treturn source;\r\n\r\n\t\t\tif(Array.isArray(source))\r\n\t\t\t\treturn new ArrayEnumerable<T>(source);\r\n\r\n\t\t\tif(isEnumerable<T>(source))\r\n\t\t\t\treturn new Enumerable(()=>source.getEnumerator());\r\n\r\n\t\t\tif(Type.isArrayLike<T>(source))\r\n\t\t\t\treturn new ArrayEnumerable<T>(source);\r\n\t\t}\r\n\r\n\t\tthrow new UnsupportedEnumerableException();\r\n\t}\r\n\r\n\tstatic toArray<T>(source:IEnumerable<T> | IArray<T>):T[]\r\n\t{\r\n\t\tif(Type.isObject(source))\r\n\t\t{\r\n\t\t\tif(Array.isArray(source))\r\n\t\t\t\treturn source.slice();\r\n\r\n\t\t\tif(Type.isArrayLike<T>(source))\r\n\t\t\t\tsource = new ArrayEnumerable<T>(<IArray<T>>source);\r\n\r\n\t\t\tif(Type.isInstanceOf<Enumerable<T>>(source, Enumerable))\r\n\t\t\t\treturn source.toArray();\r\n\r\n\t\t\tif(isEnumerable<T>(source))\r\n\t\t\t{\r\n\t\t\t\tvar result:T[] = [];\r\n\t\t\t\tenumeratorForEach<T>(\r\n\t\t\t\t\tsource.getEnumerator(), (e, i) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult[i] = e;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthrow new UnsupportedEnumerableException();\r\n\t}\r\n\r\n\r\n\t// #region IEnumerable<T> Implementation...\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn this._enumeratorFactory();\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region IDisposable override...\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose(); // Just in case.\r\n\t\tthis._enumeratorFactory = null;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t//////////////////////////////////////////\r\n\t// #region Static Methods...\r\n\tstatic choice<T>(values:IArray<T>):Enumerable<T>\r\n\t{\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() => new EnumeratorBase<T>(\r\n\t\t\t\tnull,\r\n\t\t\t\t(yielder)=>\r\n\t\t\t\t\tyielder.yieldReturn(values[Integer.random(values.length)])\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tstatic cycle<T>(values:IArray<T>):Enumerable<T>\r\n\t{\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar index:number = 0; // Let the compiler know this is an int.\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t}, // Reinitialize the value just in case the enumerator is restarted.\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(index>=values.length) index = 0;\r\n\t\t\t\t\t\treturn yielder.yieldReturn(values[index++]);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic empty<T>():Enumerable<T>\r\n\t{\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() => new EnumeratorBase<T>(\r\n\t\t\t\tnull,\r\n\t\t\t\tFunctions.False\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tstatic repeat<T>(element:T, count:number = Infinity):Enumerable<T>\r\n\t{\r\n\t\tif(isNaN(count) || count<=0)\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\t\t\t? new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar c:number = count;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> (index++<c) && yielder.yieldReturn(element)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t)\r\n\t\t\t: new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t\tnew EnumeratorBase<T>(\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\t(yielder)=> yielder.yieldReturn(element)\r\n\t\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t// Note: this enumeration does not break.\r\n\tstatic repeatWithFinalize<T>(\r\n\t\tinitializer:() => T,\r\n\t\tfinalizer:(element:T) => void):Enumerable<T>\r\n\t{\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar element:T;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\telement = initializer();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> yielder.yieldReturn(element),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfinalizer(element);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic make<T>(element:T):Enumerable<T>\r\n\t{\r\n\t\treturn Enumerable.repeat<T>(element, 1);\r\n\t}\r\n\r\n\t// start and step can be other than integer.\r\n\tstatic range(\r\n\t\tstart:number = 0,\r\n\t\tcount:number = Infinity,\r\n\t\tstep:number = 1):Enumerable<number>\r\n\t{\r\n\r\n\t\tif(!isFinite(start))\r\n\t\t\tthrow new Error(\"Must have a valid 'start' value.\");\r\n\r\n\t\tif(isNaN(count) || count<=0)\r\n\t\t\treturn Enumerable.empty<number>();\r\n\r\n\t\tif(!isFinite(step))\r\n\t\t\tthrow new Error(\"Must have a valid 'step' value.\");\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\t\t\t? new Enumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar value:number;\r\n\t\t\t\tvar c:number = count; // Force integer evaluation.\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar result:boolean =\r\n\t\t\t\t\t\t\t    index++<c\r\n\t\t\t\t\t\t\t    && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\tif(result && index<count)\r\n\t\t\t\t\t\t\tvalue += step;\r\n\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t})\r\n\r\n\t\t\t: new Enumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar value:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar current:number = value;\r\n\t\t\t\t\t\tvalue += step;\r\n\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic rangeDown(\r\n\t\tstart:number = 0,\r\n\t\tcount:number = Infinity,\r\n\t\tstep:number = 1):Enumerable<number>\r\n\t{\r\n\t\tstep = Math.abs(step)* -1;\r\n\r\n\t\treturn Enumerable.range(start, count, step);\r\n\t}\r\n\r\n\t// step = -1 behaves the same as toNegativeInfinity;\r\n\tstatic toInfinity(\r\n\t\tstart:number = 0,\r\n\t\tstep:number = 1):Enumerable<number>\r\n\t{\r\n\t\treturn Enumerable.range(start, Infinity, step);\r\n\t}\r\n\r\n\tstatic toNegativeInfinity(\r\n\t\tstart:number = 0,\r\n\t\tstep:number = 1):Enumerable<number>\r\n\t{\r\n\t\treturn Enumerable.rangeDown(start, Infinity, step);\r\n\t}\r\n\r\n\tstatic rangeTo(\r\n\t\tstart:number = 0,\r\n\t\tto:number = Infinity,\r\n\t\tstep:number = 1):Enumerable<number>\r\n\t{\r\n\t\tif(!isFinite(start))\r\n\t\t\tthrow new Error(\"Must have a valid 'start' value.\");\r\n\r\n\t\tif(isNaN(to))\r\n\t\t\tthrow new Error(\"Must have a valid 'to' value.\");\r\n\r\n\t\tif(!isFinite(step))\r\n\t\t\tthrow new Error(\"Must have a valid 'step' value.\");\r\n\r\n\t\t// This way we adjust for the delta from start and to so the user can say +/- step and it will work as expected.\r\n\t\tstep = Math.abs(step);\r\n\r\n\t\t// Range to infinity has a more efficient mechanism.\r\n\t\tif(!isFinite(to))\r\n\t\t\treturn Enumerable.range(start, Infinity, (start<to) ? (+step) : (-step));\r\n\r\n\t\treturn new Enumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar value:number;\r\n\r\n\t\t\t\treturn start<to\r\n\r\n\t\t\t\t\t? new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar result:boolean = value<=to && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t\tvalue += step;\r\n\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\t: new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar result:boolean = value>=to && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t\tvalue -= step;\r\n\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic matches(input:string, pattern:any, flags:string = \"\"):Enumerable<RegExpExecArray>\r\n\t{\r\n\r\n\t\tvar type = typeof input;\r\n\t\tif(type!=Type.STRING)\r\n\t\t\tthrow new Error(\"Cannot exec RegExp matches of type '\" + type + \"'.\");\r\n\r\n\t\tif(Type.isInstanceOf(pattern, RegExp))\r\n\t\t{\r\n\t\t\tflags += (pattern.ignoreCase) ? \"i\" : \"\";\r\n\t\t\tflags += (pattern.multiline) ? \"m\" : \"\";\r\n\t\t\tpattern = pattern.source;\r\n\t\t}\r\n\r\n\t\tif(flags.indexOf(\"g\")=== -1) flags += \"g\";\r\n\r\n\t\treturn new Enumerable<RegExpExecArray>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar regex:RegExp;\r\n\t\t\t\treturn new EnumeratorBase<RegExpExecArray>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tregex = new RegExp(pattern, flags);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Calling regex.exec consecutively on the same input uses the lastIndex to start the next match.\r\n\t\t\t\t\t\tvar match = regex.exec(input);\r\n\t\t\t\t\t\treturn (match!==null) ? yielder.yieldReturn(match) : false;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic generate<T>(factory:(index?:number) => T, count:number = Infinity):Enumerable<T>\r\n\t{\r\n\r\n\t\tif(isNaN(count) || count<=0)\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\r\n\t\t\t? new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar c:number = count;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar current:number = index++;\r\n\t\t\t\t\t\treturn current<c && yielder.yieldReturn(factory(current));\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t})\r\n\r\n\t\t\t: new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar index:number = 0;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> yielder.yieldReturn(factory(index++))\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t}\r\n\r\n\tstatic unfold<T>(seed:T, valueFactory:Selector<T, T>, skipSeed:Boolean = false):Enumerable<T>\r\n\t{\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar index:number = 0;\r\n\t\t\t\tvar value:T;\r\n\t\t\t\tvar isFirst:boolean;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tvalue = seed;\r\n\t\t\t\t\t\tisFirst = !skipSeed;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar i = index++;\r\n\t\t\t\t\t\tif(isFirst)\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tvalue = valueFactory(value, i);\r\n\t\t\t\t\t\treturn yielder.yieldReturn(value);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic defer<T>(enumerableFactory:() => IEnumerable<T>):Enumerable<T>\r\n\t{\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = enumerableFactory().getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> enumerator.moveNext() && yielder.yieldReturn(enumerator.current),\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic forEach<T>(\r\n\t\tenumerable:IEnumerable<T> | IArray<T>,\r\n\t\taction:(element:T, index?:number) => any):void\r\n\t{\r\n\t\tif(enumerable)\r\n\t\t{\r\n\t\t\tusing(enumeratorFrom(enumerable), e=>\r\n\t\t\t{\r\n\t\t\t\tenumeratorForEach(e, action);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tstatic map<T,TResult>(\r\n\t\tenumerable:IEnumerable<T> | IArray<T>,\r\n\t\tselector:Selector<T,TResult>):TResult[]\r\n\t{\r\n\r\n\t\treturn enumerable && using(enumeratorFrom(enumerable), e=>\r\n\t\t\t{\r\n\t\t\t\tvar result:TResult[] = [];\r\n\t\t\t\tenumeratorForEach(e, (e, i)=>\r\n\t\t\t\t{\r\n\t\t\t\t\tresult[i] = selector(e);\r\n\t\t\t\t});\r\n\t\t\t\treturn result;\r\n\t\t\t});\r\n\r\n\t}\r\n\r\n\t// Slightly optimized versions for numbers.\r\n\tstatic max(values:Enumerable<number>):number\r\n\t{\r\n\t\treturn values\r\n\t\t\t.takeUntil(v=> v== +Infinity, true)\r\n\t\t\t.aggregate(Functions.Greater);\r\n\t}\r\n\r\n\tstatic min(values:Enumerable<number>):number\r\n\t{\r\n\t\treturn values\r\n\t\t\t.takeUntil(v=> v== -Infinity, true)\r\n\t\t\t.aggregate(Functions.Lesser);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t//////////////////////////////////////////\r\n\t// #region Instance methods...\r\n\r\n\tforEach(action:Predicate<T> | Action<T>):void\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar index:number = 0;\r\n\t\t// Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\r\n\t\tusing(\r\n\t\t\t_.getEnumerator(), e=>\r\n\t\t\t{\r\n\t\t\t\t// It is possible that subsequently 'action' could cause the enumeration to dispose, so we have to check each time.\r\n\t\t\t\twhile(_.throwIfDisposed() && e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(<any>action(e.current, index++)===false)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #region Conversion Methods\r\n\ttoArray(predicate?:Predicate<T>):T[]\r\n\t{\r\n\t\tvar result:T[] = [];\r\n\r\n\t\tif(predicate) return this.where(predicate).toArray();\r\n\r\n\t\tthis.forEach((x, i)=>\r\n\t\t{\r\n\t\t\tresult[i] = x\r\n\t\t});\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// Return a default (unfiltered) enumerable.\r\n\tasEnumerable():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn new Enumerable<T>(() => _.getEnumerator());\r\n\t}\r\n\r\n\r\n\ttoLookup<TKey, TValue, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TValue> = Functions.Identity,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):ILookup<TKey, TValue>\r\n\t{\r\n\t\tvar dict:Dictionary<TKey, TValue[]> = new Dictionary<TKey, TValue[]>(compareSelector);\r\n\t\tthis.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tvar key = keySelector(x);\r\n\t\t\t\tvar element = elementSelector(x);\r\n\r\n\t\t\t\tvar array = dict.getValue(key);\r\n\t\t\t\tif(array!==VOID0) array.push(element);\r\n\t\t\t\telse dict.addByKeyValue(key, [element]);\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn new Lookup<TKey, TValue>(dict);\r\n\t}\r\n\r\n\ttoMap<TResult>(\r\n\t\tkeySelector:Selector<T, string>,\r\n\t\telementSelector:Selector<T, TResult>):IMap<TResult>\r\n\t{\r\n\t\tvar obj:IMap<TResult> = {};\r\n\t\tthis.forEach(x=>\r\n\t\t{\r\n\t\t\tobj[keySelector(x)] = elementSelector(x);\r\n\t\t});\r\n\t\treturn obj;\r\n\t}\r\n\r\n\ttoDictionary<TKey, TValue, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TValue>,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):Dictionary<TKey, TValue>\r\n\t{\r\n\t\tvar dict:Dictionary<TKey, TValue> = new Dictionary<TKey, TValue>(compareSelector);\r\n\t\tthis.forEach(x=> dict.addByKeyValue(keySelector(x), elementSelector(x)));\r\n\t\treturn dict;\r\n\t}\r\n\r\n\ttoJoinedString(separator:string = \"\", selector:Selector<T, string> = Functions.Identity)\r\n\t{\r\n\t\treturn this.select(selector).toArray().join(separator);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\r\n\t/**\r\n\t * Similar to forEach, but executes an action for each time a value is enumerated.\r\n\t * If the action explicitly returns false or 0 (EnumerationAction.Break), the enumeration will complete.\r\n\t * If it returns a 2 (EnumerationAction.Skip) it will move on to the next item.\r\n\t * This also automatically handles disposing the enumerator.\r\n\t */\r\n\tdoAction(\r\n\t\taction:Action<T> | Predicate<T> | Selector<T, number> | Selector<T, EnumerableAction>):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar actionResult = <any>action(enumerator.current, index++);\r\n\r\n\t\t\t\t\t\t\tif(actionResult===false || actionResult===EnumerableAction.Break)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tif(actionResult!==EnumerableAction.Skip) // || !== 2\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\r\n\t\t\t\t\t\t\t// If actionResult===2, then a signal for skip is received.\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\r\n\t\t\t},\r\n\t\t\t// Using a finalizer value reduces the chance of a circular reference\r\n\t\t\t// since we could simply reference the enumeration and check e.wasDisposed.\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tforce(defaultAction:EnumerableAction = EnumerableAction.Break):void\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tthis.doAction(element => defaultAction);\r\n\t}\r\n\r\n\t// #region Indexing/Paging methods.\r\n\tskip(count:number):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!count || isNaN(count) || count<0) // Out of bounds? Simply return this.\r\n\t\t\treturn _;\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals skip all so return empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\tvar c:number = count;\r\n\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t\tindex<c\r\n\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t: EnumerableAction.Return\r\n\t\t);\r\n\t}\r\n\r\n\tskipWhile(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tvar skipping:boolean = true;\r\n\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(skipping)\r\n\t\t\t\t\tskipping = predicate(element, index);\r\n\r\n\t\t\t\treturn skipping\r\n\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t: EnumerableAction.Return;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\ttake(count:number):Enumerable<T>\r\n\t{\r\n\t\tif(!count || isNaN(count) || count<0) // Out of bounds? Empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals no limit.\r\n\t\t\treturn _;\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\t\tvar c = count;\r\n\r\n\t\t// Once action returns false, the enumeration will stop.\r\n\t\treturn _.doAction((element:T, index?:number) => index<c);\r\n\t}\r\n\r\n\ttakeWhile(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t? EnumerableAction.Return\r\n\t\t\t\t\t: EnumerableAction.Break\r\n\t\t);\r\n\t}\r\n\r\n\t// Is like the inverse of take While with the ability to return the value identified by the predicate.\r\n\ttakeUntil(predicate:Predicate<T>, includeUntilValue?:boolean):Enumerable<T>\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tif(!includeUntilValue)\r\n\t\t\treturn this.doAction(\r\n\t\t\t\t(element:T, index?:number) =>\r\n\t\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t\t? EnumerableAction.Break\r\n\t\t\t\t\t\t: EnumerableAction.Return\r\n\t\t\t);\r\n\r\n\t\tvar found:boolean = false;\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(found)\r\n\t\t\t\t\treturn EnumerableAction.Break;\r\n\r\n\t\t\t\tfound = predicate(element, index);\r\n\r\n\t\t\t\treturn EnumerableAction.Return;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\ttakeExceptLast(count:number = 1):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!count || isNaN(count) || count<=0) // Out of bounds? Empty.\r\n\t\t\treturn _;\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals skip all so return empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\t\tvar c = count;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar q:Queue<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tq = new Queue<T>();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Add the next one to the queue.\r\n\t\t\t\t\t\t\tq.enqueue(enumerator.current);\r\n\r\n\t\t\t\t\t\t\t// Did we reach our quota?\r\n\t\t\t\t\t\t\tif(q.count>c)\r\n\t\t\t\t\t\t\t// Okay then, start returning results.\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(q.dequeue());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, q);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\ttakeFromLast(count:number):Enumerable<T>\r\n\t{\r\n\t\tif(!count || isNaN(count) || count<=0) // Out of bounds? Empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!isFinite(count)) // Infinity means return all in reverse.\r\n\t\t\treturn _.reverse();\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\treturn _.reverse().take(count);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region Projection and Filtering Methods\r\n\r\n\ttraverseBreadthFirst(\r\n\t\tfunc:(element:any) => IEnumerable<any>,\r\n\t\tresultSelector?:(element:any, nestLevel?:number) => any):Enumerable<any>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<any>;\r\n\t\t\t\tvar nestLevel:number = 0;\r\n\t\t\t\tvar buffer:any[], len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<any>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnestLevel = 0;\r\n\t\t\t\t\t\tbuffer = [];\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tbuffer[len++] = enumerator.current;\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(resultSelector(enumerator.current, nestLevel));\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(!len)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tvar next = Enumerable\r\n\t\t\t\t\t\t\t\t.fromArray<T>(buffer)\r\n\t\t\t\t\t\t\t\t.selectMany(func);\r\n\r\n\t\t\t\t\t\t\tif(!next.any())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tnestLevel++;\r\n\t\t\t\t\t\t\t\tbuffer = [];\r\n\t\t\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\t\tenumerator = next.getEnumerator();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\ttraverseDepthFirst(\r\n\t\tfunc:(element:any) => IEnumerable<any>,\r\n\t\tresultSelector?:(element:any, nestLevel?:number) => any):Enumerable<any>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\t// Dev Note: May want to consider using an actual stack and not an array.\r\n\t\t\t\tvar enumeratorStack:IEnumerator<any>[] = [];\r\n\t\t\t\tvar enumerator:IEnumerator<any>;\r\n\t\t\t\tvar len:number;  // Avoid using push/pop since they query .length every time and can be slower.\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar value = resultSelector(enumerator.current, len);\r\n\t\t\t\t\t\t\t\tenumeratorStack[len++] = enumerator;\r\n\t\t\t\t\t\t\t\tenumerator = func(enumerator.current).getEnumerator();\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(value);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(len==0) return false;\r\n\r\n\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\tenumerator = enumeratorStack[--len];\r\n\t\t\t\t\t\t\tenumeratorStack.length = len;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfinally\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdisposeThese(enumeratorStack);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tflatten():Enumerable<any>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<any>;\r\n\t\t\t\tvar middleEnumerator:IEnumerator<any> = null;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(middleEnumerator!=null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(middleEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(middleEnumerator.current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator = null;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar c = enumerator.current;\r\n\t\t\t\t\t\t\t\tif(Array.isArray(c))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator.dispose();\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator = Enumerable.fromArray<any>(c)\r\n\t\t\t\t\t\t\t\t\t\t.selectMany(Functions.Identity)\r\n\t\t\t\t\t\t\t\t\t\t.flatten()\r\n\t\t\t\t\t\t\t\t\t\t.getEnumerator();\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, middleEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tpairwise<TSelect>(selector:(prev:T, current:T) => TSelect):Enumerable<TSelect>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<TSelect>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TSelect>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tenumerator.moveNext();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar prev = enumerator.current;\r\n\t\t\t\t\t\treturn enumerator.moveNext()\r\n\t\t\t\t\t\t\t&& yielder.yieldReturn(selector(prev, enumerator.current));\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tscan(func:(a:T, b:T) => T, seed?:T):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar isUseSeed = seed!==VOID0; // For now...\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar value:T;\r\n\t\t\t\tvar isFirst:boolean;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tisFirst = true;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(isFirst)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\t//noinspection JSUnusedAssignment\r\n\t\t\t\t\t\t\treturn isUseSeed\r\n\t\t\t\t\t\t\t\t? yielder.yieldReturn(value = seed)\r\n\t\t\t\t\t\t\t\t: enumerator.moveNext() && yielder.yieldReturn(value\r\n\t\t\t\t\t\t\t\t= enumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(value = func(value, enumerator.current))\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\r\n\tselect<TResult>(selector:Selector<T, TResult>):Enumerable<TResult>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\tif(selector.length<2)\r\n\t\t\treturn new WhereSelectEnumerable(_, null, selector);\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\treturn enumerator.moveNext()\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(selector(enumerator.current, index++))\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tselectMany<TResult>(collectionSelector:Selector<T, IEnumerable<TResult | IArray<TResult>>>):Enumerable<TResult>;\r\n\r\n\tselectMany<TElement, TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerable<TElement> | IArray<TResult>> | Selector<T, IArray<TElement>>,\r\n\t\tresultSelector?:(collection:T, element:TElement) => TResult):Enumerable<TResult>;\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:Selector<T, any>,\r\n\t\tresultSelector?:(collection:any, middle:any) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(!resultSelector)\r\n\t\t\tresultSelector = (a, b) => b;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar middleEnumerator:IEnumerator<any>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tmiddleEnumerator = undefined;\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t// Just started, and nothing to enumerate? End.\r\n\t\t\t\t\t\tif(middleEnumerator===VOID0 && !enumerator.moveNext())\r\n\t\t\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t\t\t// moveNext has been called at least once...\r\n\t\t\t\t\t\tdo\r\n\t\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t\t// Initialize middle if there isn't one.\r\n\t\t\t\t\t\t\tif(!middleEnumerator)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar middleSeq = collectionSelector(enumerator.current, index++);\r\n\r\n\t\t\t\t\t\t\t\t// Collection is null?  Skip it...\r\n\t\t\t\t\t\t\t\tif(!middleSeq)\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t\t\tmiddleEnumerator = enumeratorFrom(middleSeq);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(middleEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(\r\n\t\t\t\t\t\t\t\t\tresultSelector(\r\n\t\t\t\t\t\t\t\t\t\tenumerator.current, middleEnumerator.current\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t// else no more in this middle?  Then clear and reset for next...\r\n\r\n\t\t\t\t\t\t\tmiddleEnumerator.dispose();\r\n\t\t\t\t\t\t\tmiddleEnumerator = null;\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(enumerator.moveNext());\r\n\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, middleEnumerator);\r\n\t\t\t\t\t\tenumerator = null;\r\n\t\t\t\t\t\tmiddleEnumerator = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tchoose<TResult>(selector:Selector<T, TResult>):Enumerable<TResult>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar result = selector(enumerator.current, index++);\r\n\t\t\t\t\t\t\tif(result!==null && result!==VOID0)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\twhere(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\tif(predicate.length<2)\r\n\t\t\treturn new WhereEnumerable(_, predicate);\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(predicate(enumerator.current, index++))\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t}\r\n\r\n\tofType<TType>(type:{ new (): TType }):Enumerable<TType>;\r\n\tofType<TType>(type:any):Enumerable<TType>\r\n\t{\r\n\t\tvar typeName:string;\r\n\t\tswitch(<any>type)\r\n\t\t{\r\n\t\t\tcase Number:\r\n\t\t\t\ttypeName = Type.NUMBER;\r\n\t\t\t\tbreak;\r\n\t\t\tcase String:\r\n\t\t\t\ttypeName = Type.STRING;\r\n\t\t\t\tbreak;\r\n\t\t\tcase Boolean:\r\n\t\t\t\ttypeName = Type.BOOLEAN;\r\n\t\t\t\tbreak;\r\n\t\t\tcase Function:\r\n\t\t\t\ttypeName = Type.FUNCTION;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn <Enumerable<any>>this\r\n\t\t\t\t\t.where(x=>Type.isInstanceOf(x, type));\r\n\t\t}\r\n\t\treturn <Enumerable<any>>this\r\n\t\t\t.where(x=>typeof x===typeName);\r\n\t}\r\n\r\n\texcept<TCompare>(\r\n\t\tsecond:IEnumerable<T>,\r\n\t\tcompareSelector?:Selector<T, TCompare>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar keys:Dictionary<T, boolean>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tkeys = new Dictionary<T, boolean>(compareSelector);\r\n\t\t\t\t\t\tif(second)\r\n\t\t\t\t\t\t\tEnumerable.forEach(second, key => keys.addByKeyValue(key, true));\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar current = enumerator.current;\r\n\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, true);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tkeys.clear();\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tdistinct(compareSelector?:(value:T) => T):Enumerable<T>\r\n\t{\r\n\t\treturn this.except(null, compareSelector);\r\n\t}\r\n\r\n\t// [0,0,0,1,1,1,2,2,2,0,0,0] results in [0,1,2,0];\r\n\tdistinctUntilChanged<TCompare>(compareSelector?:Selector<T, TCompare>):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar compareKey:TCompare;\r\n\t\t\t\tvar initial:boolean = true;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar key = compareSelector(enumerator.current);\r\n\r\n\t\t\t\t\t\t\tif(initial)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tinitial = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if(compareKey===key)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tcompareKey = key;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\treverse():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar buffer:T[];\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tbuffer = _.toArray();\r\n\t\t\t\t\t\tindex = buffer.length;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\tindex>0\r\n\t\t\t\t\t&& yielder.yieldReturn(buffer[--index]),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tshuffle():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar buffer:T[];\r\n\t\t\t\tvar capacity:number;\r\n\t\t\t\tvar len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tbuffer = _.toArray();\r\n\t\t\t\t\t\tcapacity = len = buffer.length;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Avoid using major array operations like .slice();\r\n\t\t\t\t\t\tif(!len)\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\tvar selectedIndex = Integer.random(len);\r\n\t\t\t\t\t\tvar selectedValue = buffer[selectedIndex];\r\n\r\n\t\t\t\t\t\tbuffer[selectedIndex] = buffer[--len]; // Take the last one and put it here.\r\n\t\t\t\t\t\tbuffer[len] = null; // clear possible reference.\r\n\r\n\t\t\t\t\t\tif(len%32==0) // Shrink?\r\n\t\t\t\t\t\t\tbuffer.length = len;\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(selectedValue);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tcount(predicate?:Predicate<T>):number\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar count:number = 0;\r\n\t\tif(predicate)\r\n\t\t{\r\n\t\t\t_.forEach((x, i) =>\r\n\t\t\t{\r\n\t\t\t\tif(predicate(x, i))++count;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t_.forEach(() =>\r\n\t\t\t{\r\n\t\t\t\t++count;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn count;\r\n\t}\r\n\r\n\t// Akin to '.every' on an array.\r\n\tall(predicate:Predicate<T>):boolean\r\n\t{\r\n\t\tvar result = true;\r\n\t\tthis.forEach(x =>\r\n\t\t{\r\n\t\t\tif(!predicate(x))\r\n\t\t\t{\r\n\t\t\t\tresult = false;\r\n\t\t\t\treturn false; // break\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// 'every' has been added here for parity/compatibility with an array.\r\n\tevery(predicate:Predicate<T>):boolean\r\n\t{\r\n\t\treturn this.all(predicate);\r\n\t}\r\n\r\n\t// Akin to '.some' on an array.\r\n\tany(predicate?:Predicate<T>):boolean\r\n\t{\r\n\t\tvar result = false;\r\n\r\n\t\t// Splitting the forEach up this way reduces iterative processing.\r\n\t\t// forEach handles the generation and disposal of the enumerator.\r\n\t\tif(predicate)\r\n\t\t{\r\n\t\t\tthis.forEach(x =>\r\n\t\t\t{\r\n\t\t\t\tresult = predicate(x); // false = not found and therefore it should continue.  true = found and break;\r\n\t\t\t\treturn !result;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.forEach(() =>\r\n\t\t\t{\r\n\t\t\t\tresult = true;\r\n\t\t\t\treturn false;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t// 'some' has been added here for parity/compatibility with an array.\r\n\tsome(predicate:Predicate<T>):boolean\r\n\t{\r\n\t\treturn this.any(predicate);\r\n\t}\r\n\r\n\tisEmpty():boolean\r\n\t{\r\n\t\treturn !this.any();\r\n\t}\r\n\r\n\tcontains<TCompare>(value:T, compareSelector?:Selector<T, TCompare>):boolean\r\n\t{\r\n\t\treturn compareSelector\r\n\t\t\t? this.any(v=> compareSelector(v)===compareSelector(value))\r\n\t\t\t: this.any(v=> v===value);\r\n\t}\r\n\r\n\t// Originally has an overload for a predicate,\r\n\t// but that's a bad idea since this could be an enumeration of functions and therefore fail the intent.\r\n\t// Better to chain a where statement first to be more explicit.\r\n\tindexOf<TCompare>(value:T, compareSelector?:Selector<T, TCompare>):number\r\n\t{\r\n\t\tvar found:number = -1;\r\n\r\n\t\tif(compareSelector)\r\n\t\t\tthis.forEach((element:T, i?:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(Values.areEqual(compareSelector(element), compareSelector(value), true))\r\n\t\t\t\t{\r\n\t\t\t\t\tfound = i;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\telse\r\n\t\t\tthis.forEach((element:T, i?:number) =>\r\n\t\t\t{\r\n\t\t\t\t// Why?  Because NaN doesn't equal NaN. :P\r\n\t\t\t\tif(Values.areEqual(element, value, true))\r\n\t\t\t\t{\r\n\t\t\t\t\tfound = i;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\treturn found;\r\n\t}\r\n\r\n\tlastIndexOf<TCompare>(value:T, compareSelector?:Selector<T, TCompare>):number\r\n\t{\r\n\t\tvar result:number = -1;\r\n\r\n\t\tif(compareSelector)\r\n\t\t\tthis.forEach((element:T, i?:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(Values.areEqual(compareSelector(element), compareSelector(value), true)) result\r\n\t\t\t\t\t= i;\r\n\t\t\t});\r\n\t\telse\r\n\t\t\tthis.forEach((element:T, i?:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(Values.areEqual(element, value, true)) result = i;\r\n\t\t\t});\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tdefaultIfEmpty(defaultValue:T = null):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed:boolean = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar isFirst:boolean;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tisFirst = true;\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(isFirst)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(defaultValue);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tzip<TSecond, TResult>(\r\n\t\tsecond:IEnumerable<TSecond> | IArray<TSecond>,\r\n\t\tresultSelector:(first:T, second:TSecond, index?:number) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<TSecond>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<TSecond>(second);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\tfirstEnumerator.moveNext() && secondEnumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(resultSelector(firstEnumerator.current, secondEnumerator.current, index++)),\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tzipMultiple<TSecond, TResult>(\r\n\t\tsecond:IArray<IEnumerable<TSecond> | IArray<TSecond>>,\r\n\t\tresultSelector:(first:T, second:TSecond, index?:number) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!second.length)\r\n\t\t\treturn Enumerable.empty<TResult>();\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar secondTemp:Queue<any>;\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<TSecond>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsecondTemp = new Queue<any>(second);\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = null;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\twhile(!secondEnumerator)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(secondTemp.count)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tvar next = secondTemp.dequeue();\r\n\t\t\t\t\t\t\t\t\t\tif(next) // In case by chance next is null, then try again.\r\n\t\t\t\t\t\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<TSecond>(next);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(\r\n\t\t\t\t\t\t\t\t\t\tresultSelector(firstEnumerator.current, secondEnumerator.current, index++)\r\n\t\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t\tsecondEnumerator.dispose();\r\n\t\t\t\t\t\t\t\tsecondEnumerator = null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondTemp);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #region Join Methods\r\n\r\n\tjoin<TInner, TKey, TResult, TCompare>(\r\n\t\tinner:IEnumerable<TInner> | IArray<TInner>,\r\n\t\touterKeySelector:Selector<T, TKey>,\r\n\t\tinnerKeySelector:Selector<TInner, TKey>,\r\n\t\tresultSelector:(outer:T, inner:TInner) => TResult,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):Enumerable<TResult>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar outerEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar lookup:ILookup<TKey,TInner>;\r\n\t\t\t\tvar innerElements:TInner[] = null;\r\n\t\t\t\tvar innerCount:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\touterEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlookup = Enumerable.from<TInner>(inner)\r\n\t\t\t\t\t\t\t.toLookup(innerKeySelector, Functions.Identity, compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(innerElements!=null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar innerElement = innerElements[innerCount++];\r\n\t\t\t\t\t\t\t\tif(innerElement!==VOID0)\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(resultSelector(outerEnumerator.current, innerElement));\r\n\r\n\t\t\t\t\t\t\t\tinnerElement = null;\r\n\t\t\t\t\t\t\t\tinnerCount = 0;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(outerEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar key = outerKeySelector(outerEnumerator.current);\r\n\t\t\t\t\t\t\t\tinnerElements = lookup.get(key);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(outerEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tgroupJoin<TInner, TKey, TResult, TCompare>(\r\n\t\tinner:IEnumerable<TInner> | IArray<TInner>,\r\n\t\touterKeySelector:Selector<T, TKey>,\r\n\t\tinnerKeySelector:Selector<TInner, TKey>,\r\n\t\tresultSelector:(outer:T, inner:TInner[]) => TResult,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar lookup:ILookup<TKey, TInner> = null;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlookup = Enumerable.from<TInner>(inner)\r\n\t\t\t\t\t\t\t.toLookup(innerKeySelector, Functions.Identity, compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\tenumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(\r\n\t\t\t\t\t\tresultSelector(\r\n\t\t\t\t\t\t\tenumerator.current,\r\n\t\t\t\t\t\t\tlookup.get(outerKeySelector(enumerator.current))\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tconcatWith(other:IEnumerable<T> | IArray<T>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(firstEnumerator!=null)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(firstEnumerator.moveNext()) return yielder.yieldReturn(firstEnumerator.current);\r\n\t\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<T>(other);\r\n\t\t\t\t\t\t\tfirstEnumerator.dispose();\r\n\t\t\t\t\t\t\tfirstEnumerator = null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(secondEnumerator.moveNext()) return yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tmerge(enumerables:IArray<IEnumerable<T> | IArray<T>>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!enumerables.length)\r\n\t\t\treturn _;\r\n\r\n\t\tif(enumerables.length==1)\r\n\t\t\treturn _.concatWith(enumerables[0]);\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar queue:Queue<IEnumerable<T> | IArray<T>>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// 1) First get our values...\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tqueue = new Queue<IEnumerable<T> | IArray<T>>(enumerables);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t\twhile(!enumerator && queue.count)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tenumerator = enumeratorFrom<T>(queue.dequeue()); // 4) Keep going and on to step 2.  Else fall through to yieldBreak().\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(enumerator && enumerator.moveNext()) // 2) Keep returning until done.\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\r\n\t\t\t\t\t\t\tif(enumerator) // 3) Dispose and reset for next.\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\t\tenumerator = null;\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, queue); // Just in case this gets disposed early.\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tconcat(...enumerables:Array<IEnumerable<T> | IArray<T>>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(enumerables.length==0)\r\n\t\t\treturn _;\r\n\r\n\t\tif(enumerables.length==1)\r\n\t\t\treturn _.concatWith(enumerables[0]);\r\n\r\n\t\treturn _.merge(enumerables);\r\n\t}\r\n\r\n\r\n\tinsertAt(index:number, other:IEnumerable<T> | IArray<T>):Enumerable<T>\r\n\t{\r\n\t\tif(isNaN(index) || index<0 || !isFinite(index))\r\n\t\t\tthrow new Error(\"'index' is invalid or out of bounds.\");\r\n\r\n\t\tInteger.assert(index, \"index\");\r\n\t\tvar n:number = index;\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\tvar count:number = 0;\r\n\t\t\t\tvar isEnumerated:boolean = false;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcount = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<T>(other);\r\n\t\t\t\t\t\tisEnumerated = false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(count==n)\r\n\t\t\t\t\t\t{ // Inserting?\r\n\t\t\t\t\t\t\tisEnumerated = true;\r\n\t\t\t\t\t\t\tif(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(firstEnumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn !isEnumerated\r\n\t\t\t\t\t\t\t&& secondEnumerator.moveNext()\r\n\t\t\t\t\t\t\t&& yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\talternateMultiple(sequence:IEnumerable<T> | IArray<T>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar buffer:T,\r\n\t\t\t\t    mode:EnumerableAction,\r\n\t\t\t\t    enumerator:IEnumerator<T>,\r\n\t\t\t\t    alternateEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Instead of recalling getEnumerator every time, just reset the existing one.\r\n\t\t\t\t\t\talternateEnumerator = new ArrayEnumerator(\r\n\t\t\t\t\t\t\tEnumerable.toArray<T>(sequence)\r\n\t\t\t\t\t\t); // Freeze\r\n\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\r\n\t\t\t\t\t\tvar hasAtLeastOne = enumerator.moveNext();\r\n\t\t\t\t\t\tmode = hasAtLeastOne\r\n\t\t\t\t\t\t\t? EnumerableAction.Return\r\n\t\t\t\t\t\t\t: EnumerableAction.Break;\r\n\r\n\t\t\t\t\t\tif(hasAtLeastOne)\r\n\t\t\t\t\t\t\tbuffer = enumerator.current;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tswitch(mode)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase EnumerableAction.Break: // We're done?\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tcase EnumerableAction.Skip:\r\n\t\t\t\t\t\t\t\tif(alternateEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(alternateEnumerator.current);\r\n\t\t\t\t\t\t\t\talternateEnumerator.reset();\r\n\t\t\t\t\t\t\t\tmode = EnumerableAction.Return;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar latest = buffer;\r\n\r\n\t\t\t\t\t\t// Set up the next round...\r\n\r\n\t\t\t\t\t\t// Is there another one?  Set the buffer and setup instruct for the next one to be the alternate.\r\n\t\t\t\t\t\tvar another = enumerator.moveNext();\r\n\t\t\t\t\t\tmode = another\r\n\t\t\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t\t\t: EnumerableAction.Break;\r\n\r\n\t\t\t\t\t\tif(another)\r\n\t\t\t\t\t\t\tbuffer = enumerator.current;\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(latest);\r\n\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, alternateEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\talternateSingle(value:T):Enumerable<T>\r\n\t{\r\n\t\treturn this.alternateMultiple(Enumerable.make(value));\r\n\t}\r\n\r\n\talternate(...sequence:T[]):Enumerable<T>\r\n\t{\r\n\t\treturn this.alternateMultiple(sequence);\r\n\t}\r\n\r\n\r\n\tintersect<TCompare>(\r\n\t\tsecond:IEnumerable<T> | IArray<T>,\r\n\t\tcompareSelector?:Selector<T, TCompare>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar keys:Dictionary<T,boolean>;\r\n\t\t\t\tvar outs:Dictionary<T,boolean>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\r\n\t\t\t\t\t\tkeys = new Dictionary<T, boolean>(compareSelector);\r\n\t\t\t\t\t\touts = new Dictionary<T, boolean>(compareSelector);\r\n\r\n\t\t\t\t\t\tEnumerable.from<T>(second)\r\n\t\t\t\t\t\t\t.forEach(key=>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(key, true);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar current = enumerator.current;\r\n\t\t\t\t\t\t\tif(!outs.containsKey(current) && keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\touts.addByKeyValue(current, true);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);  // Should Dictionary be IDisposable?\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tsequenceEqual(\r\n\t\tsecond:IEnumerable<T> | IArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n\t{\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te1=> using(\r\n\t\t\t\tEnumerable.from<T>(second).getEnumerator(),\r\n\t\t\t\te2=>\r\n\t\t\t\t{\r\n\t\t\t\t\twhile(e1.moveNext())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(!e2.moveNext() || !equalityComparer(e1.current, e2.current))\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn !e2.moveNext();\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t//isEquivalent(second:IEnumerable<T> | IArray<T>,\r\n\t//\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n\t//{\r\n\t//\treturn this\r\n\t//\t\t.orderBy(keySelector)\r\n\t//\t\t.sequenceEqual(Enumerable.from(second).orderBy(keySelector))\r\n\t//}\r\n\r\n\tunion<TCompare>(\r\n\t\tsecond:IEnumerable<T> | IArray<T>,\r\n\t\tcompareSelector:Selector<T, TCompare> = Functions.Identity):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar keys:Dictionary<T, any>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tkeys = new Dictionary<T, any>(compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar current:T;\r\n\t\t\t\t\t\tif(secondEnumerator===VOID0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcurrent = firstEnumerator.current;\r\n\t\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, null);\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsecondEnumerator = Enumerable.from<T>(second).getEnumerator();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcurrent = secondEnumerator.current;\r\n\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, null);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region Ordering Methods\r\n\r\n\torderBy<TKey extends Comparable>(keySelector:Selector<T, TKey> = Functions.Identity):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,TKey>(this, keySelector, Order.Ascending);\r\n\t}\r\n\r\n\torderUsing(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this, null, Order.Ascending, null, comparison);\r\n\t}\r\n\r\n\torderUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this, null, Order.Descending, null, comparison);\r\n\t}\r\n\r\n\torderByDescending<TKey extends Comparable>(keySelector:Selector<T, TKey> = Functions.Identity):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,TKey>(this, keySelector, Order.Descending);\r\n\t}\r\n\r\n\t/*\r\n\t\t weightedSample(weightSelector) {\r\n\t\t weightSelector = Utils.createLambda(weightSelector);\r\n\t\t var source = this;\r\n\r\n\t\t return new Enumerable<T>(() => {\r\n\t\t var sortedByBound;\r\n\t\t var totalWeight = 0;\r\n\r\n\t\t return new EnumeratorBase<T>(\r\n\t\t () => {\r\n\t\t sortedByBound = source\r\n\t\t .choose(function (x) {\r\n\t\t var weight = weightSelector(x);\r\n\t\t if (weight <= 0) return null; // ignore 0\r\n\r\n\t\t totalWeight += weight;\r\n\t\t return { value: x, bound: totalWeight }\r\n\t\t })\r\n\t\t .toArray();\r\n\t\t },\r\n\t\t () => {\r\n\t\t if (sortedByBound.length > 0) {\r\n\t\t var draw = (Math.random() * totalWeight) + 1;\r\n\r\n\t\t var lower = -1;\r\n\t\t var upper = sortedByBound.length;\r\n\t\t while (upper - lower > 1) {\r\n\t\t var index = ((lower + upper) / 2);\r\n\t\t if (sortedByBound[index].bound >= draw) {\r\n\t\t upper = index;\r\n\t\t }\r\n\t\t else {\r\n\t\t lower = index;\r\n\t\t }\r\n\t\t }\r\n\r\n\t\t return (<any>this).yieldReturn(sortedByBound[upper].value);\r\n\t\t }\r\n\r\n\t\t return (<any>this).yieldBreak();\r\n\t\t },\r\n\t\t Functions.Blank);\r\n\t\t });\r\n\t\t }\r\n\t\t */\r\n\t// #endregion\r\n\r\n\t// #region Grouping Methods\r\n\r\n\t// Originally contained a result selector (not common use), but this could be done simply by a select statement after.\r\n\r\n\r\n\tgroupBy<TKey>(keySelector:Selector<T, TKey>):Enumerable<IGrouping<TKey, T>>;\r\n\tgroupBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TElement>,\r\n\t\tcompareSelector?:Selector<TKey, TCompare>):Enumerable<IGrouping<TKey, TElement>>;\r\n\tgroupBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector?:Selector<T, TElement>,\r\n\t\tcompareSelector?:Selector<TKey, TCompare>):Enumerable<IGrouping<TKey, T>>|Enumerable<IGrouping<TKey, TElement>>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(!elementSelector) elementSelector = Functions.Identity; // Allow for 'null' and not just undefined.\r\n\t\treturn new Enumerable<IGrouping<TKey, TElement>>(\r\n\t\t\t() => _.toLookup(keySelector, elementSelector, compareSelector)\r\n\t\t\t\t.getEnumerator()\r\n\t\t);\r\n\t}\r\n\r\n\tpartitionBy<TKey>(keySelector:Selector<T, TKey>):Enumerable<IGrouping<TKey, T>>;\r\n\tpartitionBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TElement>,\r\n\t\tresultSelector?:(key:TKey, element:TElement[]) => IGrouping<TKey, TElement>,\r\n\t\tcompareSelector?:Selector<TKey, TCompare>):Enumerable<IGrouping<TKey, TElement>>;\r\n\tpartitionBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector?:Selector<T, TElement>,\r\n\t\tresultSelector:(key:TKey, element:TElement[]) => IGrouping<TKey, TElement>\r\n\t\t\t= (key:TKey, elements:TElement[]) => new Grouping<TKey, TElement>(key, elements),\r\n\t\tcompareSelector:Selector<TKey, TCompare>\r\n\t\t\t= Functions.Identity):Enumerable<IGrouping<TKey, T>>|Enumerable<IGrouping<TKey, TElement>>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\tif(!elementSelector) elementSelector = Functions.Identity; // Allow for 'null' and not just undefined.\r\n\t\treturn new Enumerable<IGrouping<TKey, TElement>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar key:TKey;\r\n\t\t\t\tvar compareKey:TCompare;\r\n\t\t\t\tvar group:TElement[];\r\n\t\t\t\tvar len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<IGrouping<TKey, TElement>>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tkey = keySelector(enumerator.current);\r\n\t\t\t\t\t\t\tcompareKey = compareSelector(key);\r\n\t\t\t\t\t\t\tgroup = [elementSelector(enumerator.current)];\r\n\t\t\t\t\t\t\tlen = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(!group)\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\tvar hasNext:boolean, c:T;\r\n\t\t\t\t\t\twhile((hasNext = enumerator.moveNext()))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tc = enumerator.current;\r\n\t\t\t\t\t\t\tif(compareKey===compareSelector(keySelector(c)))\r\n\t\t\t\t\t\t\t\tgroup[len++] = elementSelector(c);\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar result:IGrouping<TKey, TElement>\r\n\t\t\t\t\t\t\t    = resultSelector(key, group);\r\n\r\n\t\t\t\t\t\tif(hasNext)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tc = enumerator.current;\r\n\t\t\t\t\t\t\tkey = keySelector(c);\r\n\t\t\t\t\t\t\tcompareKey = compareSelector(key);\r\n\t\t\t\t\t\t\tgroup = [elementSelector(c)];\r\n\t\t\t\t\t\t\tlen = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tbuffer(size:number):IEnumerable<T[]>\r\n\t{\r\n\t\tif(size<1 || !isFinite(size))\r\n\t\t\tthrow new Error(\"Invalid buffer size.\");\r\n\r\n\t\tInteger.assert(size, \"size\");\r\n\r\n\t\tvar _ = this, len:number;\r\n\r\n\t\treturn new Enumerable<T[]>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\treturn new EnumeratorBase<T[]>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar array:T[] = ArrayUtility.initialize<T>(size);\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\twhile(len<size && enumerator.moveNext)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tarray[len++] = enumerator.current;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tarray.length = len;\r\n\t\t\t\t\t\treturn len && yielder.yieldReturn(array);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #region Aggregate Methods\r\n\r\n\taggregate(\r\n\t\tfunc:(a:T, b:T) => T,\r\n\t\tseed?:T):T\r\n\t{\r\n\t\treturn this.scan(func, seed).lastOrDefault();\r\n\t}\r\n\r\n\taverage(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar sum = 0;\r\n\t\t// This allows for infinity math that doesn't destroy the other values.\r\n\t\tvar sumInfinite = 0; // Needs more investigation since we are really trying to retain signs.\r\n\r\n\t\tvar count = 0; // No need to make integer if the result could be a float.\r\n\r\n\t\tthis.forEach(\r\n\t\t\tfunction(x)\r\n\t\t\t{\r\n\t\t\t\tvar value = selector(x);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tsum = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif(isFinite(value))\r\n\t\t\t\t\tsum += value;\r\n\t\t\t\telse\r\n\t\t\t\t\tsumInfinite += value>0 ? (+1) : (-1);\r\n\t\t\t\t++count;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(sumInfinite) // Not zero?\r\n\t\t\treturn sumInfinite*Infinity;\r\n\r\n\t\treturn (isNaN(sum) || !count)\r\n\t\t\t? NaN\r\n\t\t\t: (sum/count);\r\n\t}\r\n\r\n\t// If using numbers, it may be useful to call .takeUntil(v=>v==Infinity,true) before calling max. See static versions for numbers.\r\n\tmax():T\r\n\t{\r\n\t\treturn this.aggregate(Functions.Greater);\r\n\t}\r\n\r\n\tmin():T\r\n\t{\r\n\t\treturn this.aggregate(Functions.Lesser);\r\n\t}\r\n\r\n\tmaxBy<TCompare>(keySelector:Selector<T, TCompare> = Functions.Identity):T\r\n\t{\r\n\t\treturn this.aggregate((a:T, b:T) => (keySelector(a)>keySelector(b)) ? a : b);\r\n\t}\r\n\r\n\tminBy<TCompare>(keySelector:Selector<T, TCompare> = Functions.Identity):T\r\n\t{\r\n\t\treturn this.aggregate((a:T, b:T) => (keySelector(a)<keySelector(b)) ? a : b);\r\n\t}\r\n\r\n\t// Addition...  Only works with numerical enumerations.\r\n\tsum(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar sum = 0;\r\n\r\n\t\t// This allows for infinity math that doesn't destroy the other values.\r\n\t\tvar sumInfinite = 0; // Needs more investigation since we are really trying to retain signs.\r\n\r\n\t\tthis.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tvar value = selector(x);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tsum = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif(isFinite(value))\r\n\t\t\t\t\tsum += value;\r\n\t\t\t\telse\r\n\t\t\t\t\tsumInfinite += value>0 ? (+1) : (-1);\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn isNaN(sum) ? NaN : (sumInfinite ? (sumInfinite*Infinity) : sum);\r\n\t}\r\n\r\n\t// Multiplication...\r\n\tproduct(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar result = 1, exists:boolean = false;\r\n\r\n\t\tthis.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\texists = true;\r\n\t\t\t\tvar value = selector(x);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(value==0)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = 0; // Multiplying by zero will always end in zero.\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Multiplication can never recover from infinity and simply must retain signs.\r\n\t\t\t\t// You could cancel out infinity with 1/infinity but no available representation exists.\r\n\t\t\t\tresult *= value;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn (exists && isNaN(result)) ? NaN : result;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region Single Value Return...\r\n\r\n\telementAt(index:number):T\r\n\t{\r\n\t\tif(isNaN(index) || index<0 || !isFinite(index))\r\n\t\t\tthrow new Error(\"'index' is invalid or out of bounds.\");\r\n\r\n\t\tInteger.assert(index, \"index\");\r\n\t\tvar n:number = index;\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found = false;\r\n\t\t_.forEach(\r\n\t\t\t(x:T, i:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(i==n)\r\n\t\t\t\t{\r\n\t\t\t\t\tvalue = x;\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(!found) throw new Error(\"index is less than 0 or greater than or equal to the number of elements in source.\");\r\n\t\treturn value;\r\n\t}\r\n\r\n\telementAtOrDefault(index:number, defaultValue:T = null):T\r\n\t{\r\n\r\n\t\tif(isNaN(index) || index<0 || !isFinite(index))\r\n\t\t\tthrow new Error(\"'index' is invalid or out of bounds.\");\r\n\r\n\t\tInteger.assert(index, \"index\");\r\n\t\tvar n:number = index;\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found = false;\r\n\t\t_.forEach(\r\n\t\t\t(x:T, i:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(i==n)\r\n\t\t\t\t{\r\n\t\t\t\t\tvalue = x;\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn (!found) ? defaultValue : value;\r\n\t}\r\n\r\n\t/* Note: Unlike previous implementations, you could pass a predicate into these methods.\r\n\t * But since under the hood it ends up calling .where(predicate) anyway,\r\n\t * it may be better to remove this to allow for a cleaner signature/override.\r\n\t * JavaScript/TypeScript does not easily allow for a strict method interface like C#.\r\n\t * Having to write extra override logic is error prone and confusing to the consumer.\r\n\t * Removing the predicate here may also cause the consumer of this method to think more about how they structure their query.\r\n\t * The end all difference is that the user must declare .where(predicate) before .first(), .single(), or .last().\r\n\t * */\r\n\r\n\tfirst():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx =>\r\n\t\t\t{\r\n\t\t\t\tvalue = x;\r\n\t\t\t\tfound = true;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(!found) throw new Error(\"first:No element satisfies the condition.\");\r\n\t\treturn value;\r\n\t}\r\n\r\n\tfirstOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found = false;\r\n\t\t_.forEach(\r\n\t\t\tx =>\r\n\t\t\t{\r\n\t\t\t\tvalue = x;\r\n\t\t\t\tfound = true;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn (!found) ? defaultValue : value;\r\n\t}\r\n\r\n\tlast():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx =>\r\n\t\t\t{\r\n\t\t\t\tfound = true;\r\n\t\t\t\tvalue = x;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(!found) throw new Error(\"last:No element satisfies the condition.\");\r\n\t\treturn value;\r\n\t}\r\n\r\n\tlastOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tfound = true;\r\n\t\t\t\tvalue = x;\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn (!found) ? defaultValue : value;\r\n\t}\r\n\r\n\tsingle():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tif(!found)\r\n\t\t\t\t{\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\tvalue = x;\r\n\t\t\t\t}\r\n\t\t\t\telse throw new Error(\"single:sequence contains more than one element.\");\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(!found) throw new Error(\"single:No element satisfies the condition.\");\r\n\t\treturn value;\r\n\t}\r\n\r\n\tsingleOrDefault(defaultValue:T = null):T\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tif(!found)\r\n\t\t\t\t{\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\tvalue = x;\r\n\t\t\t\t}\r\n\t\t\t\telse throw new Error(\"single:sequence contains more than one element.\");\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn (!found) ? defaultValue : value;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tshare():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar sharedEnumerator:IEnumerator<T>;\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// assertIsNotDisposed(disposed);  This doesn't need an assertion since disposing the underlying enumerable disposes the enumerator.\r\n\r\n\t\t\t\t\t\tif(!sharedEnumerator)\r\n\t\t\t\t\t\t\tsharedEnumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\tsharedEnumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(sharedEnumerator.current)\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(sharedEnumerator);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tmemoize():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed:boolean = !_.throwIfDisposed();\r\n\r\n\t\tvar cache:T[];\r\n\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tif(!enumerator)\r\n\t\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tif(!cache)\r\n\t\t\t\t\t\t\tcache = [];\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tvar i = index++;\r\n\r\n\t\t\t\t\t\tif(i>=cache.length)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t\t? yielder.yieldReturn(cache[i] = enumerator.current)\r\n\t\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(cache[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t\tif(cache)\r\n\t\t\t\t\tcache.length = 0;\r\n\t\t\t\tcache = null;\r\n\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t\tenumerator = null;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #region Error Handling\r\n\tcatchError(handler:(e:Error) => void):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Don't init...\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\thandler(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tfinallyAction(action:() => void):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(enumerator.current)\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfinally\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\taction();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\n\r\nclass ArrayEnumerable<T>\r\nextends Enumerable<T>\r\n{\r\n\tprivate _source:IArray<T>;\r\n\r\n\tconstructor(source:IArray<T>)\r\n\t{\r\n\t\tsuper(() =>\r\n\t\t{\r\n\t\t\t_.throwIfDisposed();\r\n\t\t\treturn new ArrayEnumerator<T>(() =>\r\n\t\t\t{\r\n\t\t\t\t_.throwIfDisposed(\"The underlying ArrayEnumerable was disposed.\", \"ArrayEnumerator\");\r\n\r\n\t\t\t\treturn _._source; // Could possibly be null, but ArrayEnumerable if not disposed simply treats null as empty array.\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tvar _ = this;\r\n\t\t_._disposableObjectName = \"ArrayEnumerable\";\r\n\t\t_._source = source;\r\n\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._source = <any>null;\r\n\t}\r\n\r\n\tget source():IArray<T>\r\n\t{\r\n\t\treturn this._source;\r\n\t}\r\n\r\n\ttoArray():T[]\r\n\t{\r\n\t\tvar s = this.source;\r\n\t\tif(!s)\r\n\t\t\treturn [];\r\n\r\n\t\tif(Array.isArray(s))\r\n\t\t\treturn (<any>s).slice();\r\n\r\n\t\tvar len = s.length, result:T[] = ArrayUtility.initialize<T>(len);\r\n\t\tfor(let i = 0; i<len; ++i)\r\n\t\t{\r\n\t\t\tresult[i] = s[i];\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tasEnumerable():ArrayEnumerable<T>\r\n\t{\r\n\t\treturn new ArrayEnumerable<T>(this._source);\r\n\t}\r\n\r\n\t// Optimize forEach so that subsequent usage is optimized.\r\n\tforEach(action:Predicate<T> | Action<T>):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source;\r\n\t\tif(source)\r\n\t\t{\r\n\r\n\t\t\t// Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\r\n\t\t\tfor(let i = 0; i<source.length; ++i)\r\n\t\t\t{\r\n\t\t\t\t// _.assertIsNotDisposed(); // Assertion here is unnecessary since we already have a reference to the source array.\r\n\t\t\t\tif(<any>action(source[i], i)===false)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// These methods should ALWAYS check for array length before attempting anything.\r\n\r\n\tany(predicate?:Predicate<T>):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source ? source.length : 0;\r\n\t\treturn len && (!predicate || super.any(predicate));\r\n\t}\r\n\r\n\tcount(predicate?:Predicate<T>):number\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source ? source.length : 0;\r\n\t\treturn len && (predicate ? super.count(predicate) : len);\r\n\t}\r\n\r\n\telementAt(index:number):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source;\r\n\t\treturn (index<source.length && index>=0)\r\n\t\t\t? source[index]\r\n\t\t\t: super.elementAt(index);\r\n\t}\r\n\r\n\telementAtOrDefault(index:number, defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source;\r\n\t\treturn (index<source.length && index>=0)\r\n\t\t\t? source[index]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tfirst():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source;\r\n\t\treturn (source && source.length)\r\n\t\t\t? source[0]\r\n\t\t\t: super.first();\r\n\t}\r\n\r\n\tfirstOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source;\r\n\t\treturn (source && source.length)\r\n\t\t\t? source[0]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tlast():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source.length;\r\n\t\treturn (len)\r\n\t\t\t? source[len - 1]\r\n\t\t\t: super.last();\r\n\t}\r\n\r\n\tlastOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source.length;\r\n\t\treturn len\r\n\t\t\t? source[len - 1]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tskip(count:number):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!count || count<0) // Out of bounds? Simply return a unfiltered enumerable.\r\n\t\t\treturn _.asEnumerable();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() => new ArrayEnumerator<T>(() => _._source, count)\r\n\t\t);\r\n\t}\r\n\r\n\ttakeExceptLast(count:number = 1):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, len = _._source ? _._source.length : 0;\r\n\t\treturn _.take(len - count);\r\n\t}\r\n\r\n\ttakeFromLast(count:number):Enumerable<T>\r\n\t{\r\n\t\tif(!count || count<0) return Enumerable.empty<T>();\r\n\r\n\t\tvar _   = this,\r\n\t\t    len = _._source\r\n\t\t\t    ? _._source.length\r\n\t\t\t    : 0;\r\n\r\n\t\treturn _.skip(len - count);\r\n\t}\r\n\r\n\treverse():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() => new ArrayEnumerator<T>(\r\n\t\t\t\t() => _._source, _._source\r\n\t\t\t\t\t? (_._source.length - 1)\r\n\t\t\t\t\t: 0, -1\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tmemoize():ArrayEnumerable<T>\r\n\t{\r\n\t\treturn new ArrayEnumerable<T>(this._source);\r\n\t}\r\n\r\n\tsequenceEqual(\r\n\t\tsecond:IEnumerable<T> | IArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n\t{\r\n\t\tif(Array.isArray(second))\r\n\t\t\treturn Arrays.areEqual(this.source, <IArray<T>>second, true, equalityComparer);\r\n\r\n\t\tif(Type.isInstanceOf(second, ArrayEnumerable))\r\n\t\t\treturn (<ArrayEnumerable<T>>second).sequenceEqual(this.source, equalityComparer);\r\n\r\n\t\treturn super.sequenceEqual(second, equalityComparer);\r\n\t}\r\n\r\n\r\n\ttoJoinedString(separator:string = \"\", selector:Selector<T, string> = Functions.Identity)\r\n\t{\r\n\t\tvar s = this._source;\r\n\t\treturn !selector && Array.isArray(s)\r\n\t\t\t? (<Array<T>>s).join(separator)\r\n\t\t\t: super.toJoinedString(separator, selector);\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport interface IGrouping<TKey, TElement>\r\nextends Enumerable<TElement>\r\n{\r\n\tkey: TKey;\r\n}\r\n\r\nclass Grouping<TKey, TElement>\r\nextends ArrayEnumerable<TElement> implements IGrouping<TKey, TElement>\r\n{\r\n\r\n\tconstructor(private _groupKey:TKey, elements:TElement[])\r\n\t{\r\n\t\tsuper(elements);\r\n\t}\r\n\r\n\tget key():TKey\r\n\t{\r\n\t\treturn this._groupKey;\r\n\t}\r\n}\r\n\r\n\r\nexport interface ILookup<TKey, TElement>\r\nextends IEnumerable<IGrouping<TKey, TElement>>\r\n{\r\n\tcount: number;\r\n\tget(key:TKey): TElement[];\r\n\tcontains(key:TKey): boolean;\r\n}\r\n\r\nclass Lookup<TKey, TElement>\r\nimplements ILookup<TKey, TElement>\r\n{\r\n\r\n\tconstructor(private _dictionary:Dictionary<TKey, TElement[]>)\r\n\t{\r\n\t}\r\n\r\n\tget count():number\r\n\t{\r\n\t\treturn this._dictionary.count;\r\n\t}\r\n\r\n\tget(key:TKey):TElement[]\r\n\t{\r\n\t\treturn this._dictionary.getValue(key);\r\n\t}\r\n\r\n\tcontains(key:TKey):boolean\r\n\t{\r\n\t\treturn this._dictionary.containsKey(key);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<Grouping<TKey, TElement>>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\tvar enumerator:IEnumerator<IKeyValuePair<TKey, TElement[]>>;\r\n\r\n\t\treturn new EnumeratorBase<Grouping<TKey, TElement>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tenumerator = _._dictionary.getEnumerator();\r\n\t\t\t},\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\r\n\t\t\t\tif(!enumerator.moveNext())\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\tvar current = enumerator.current;\r\n\r\n\t\t\t\treturn yielder.yieldReturn(new Grouping<TKey, TElement>(current.key, current.value));\r\n\t\t\t},\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\n\r\nclass WhereEnumerable<T>\r\nextends Enumerable<T>\r\n{\r\n\tconstructor(\r\n\t\tprivate prevSource:IEnumerable<T>,\r\n\t\tprivate prevPredicate:Predicate<T>  // predicate.length always <= 1\r\n\t)\r\n\t{\r\n\t\tsuper(null);\r\n\t}\r\n\r\n\twhere(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\r\n\t\tif(predicate.length>1)\r\n\t\t\treturn super.where(predicate);\r\n\r\n\t\tvar prevPredicate = this.prevPredicate;\r\n\t\tvar composedPredicate = (x:T) => prevPredicate(x) && predicate(x);\r\n\t\treturn new WhereEnumerable<T>(this.prevSource, composedPredicate);\r\n\t}\r\n\r\n\tselect<TSelect>(selector:Selector<T, TSelect>):Enumerable<TSelect>\r\n\t{\r\n\r\n\t\tif(selector.length>1)\r\n\t\t\treturn super.select(selector);\r\n\r\n\t\treturn new WhereSelectEnumerable<T, TSelect>(\r\n\t\t\tthis.prevSource,\r\n\t\t\tthis.prevPredicate,\r\n\t\t\tselector\r\n\t\t);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tvar predicate = this.prevPredicate;\r\n\t\tvar source = this.prevSource;\r\n\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tenumerator = source.getEnumerator();\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(predicate(enumerator.current))\r\n\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis.prevPredicate = null;\r\n\t\tthis.prevSource = null;\r\n\t}\r\n}\r\n\r\nclass WhereSelectEnumerable<TSource, T>\r\nextends Enumerable<T>\r\n{\r\n\tconstructor(\r\n\t\tprivate prevSource:IEnumerable<TSource>,\r\n\t\tprivate prevPredicate:Predicate<TSource>,  // predicate.length always <= 1\r\n\t\tprivate prevSelector:Selector<TSource, T> // selector.length always <= 1\r\n\t)\r\n\t{\r\n\t\tsuper(null);\r\n\t}\r\n\r\n\twhere(predicate:(value:T, index?:number) => boolean):Enumerable<T>\r\n\t{\r\n\t\tif(predicate.length>1)\r\n\t\t\treturn super.where(predicate);\r\n\r\n\t\treturn new WhereEnumerable<T>(this, predicate);\r\n\t}\r\n\r\n\tselect<TSelect>(selector:Selector<T, TSelect>):Enumerable<TSelect>\r\n\t{\r\n\r\n\t\tif(selector.length>1)\r\n\t\t// if selector use index, can't compose\r\n\t\t\treturn super.select(selector);\r\n\r\n\t\tvar _ = this;\r\n\t\tvar prevSelector = _.prevSelector;\r\n\t\tvar composedSelector = (x:TSource) => selector(prevSelector(x));\r\n\t\treturn new WhereSelectEnumerable(_.prevSource, _.prevPredicate, composedSelector);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tvar _                             = this,\r\n\t\t    predicate                     = _.prevPredicate,\r\n\t\t    source                        = _.prevSource,\r\n\t\t    selector:Selector<TSource, T> = _.prevSelector, // Type definition needed for correct inference.\r\n\t\t    enumerator:IEnumerator<TSource>;\r\n\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tenumerator = source.getEnumerator();\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tvar c = enumerator.current;\r\n\t\t\t\t\tif(predicate==null || predicate(c))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn yielder.yieldReturn(selector(c));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tsuper._onDispose();\r\n\t\t_.prevPredicate = null;\r\n\t\t_.prevSource = null;\r\n\t\t_.prevSelector = null;\r\n\t}\r\n}\r\n\r\nexport interface IOrderedEnumerable<T>\r\nextends Enumerable<T>\r\n{\r\n\tthenBy(keySelector:(value:T) => any):IOrderedEnumerable<T>;\r\n\tthenByDescending(keySelector:(value:T) => any):IOrderedEnumerable<T>;\r\n\tthenUsing(comparison:Comparison<T>):IOrderedEnumerable<T>;\r\n\tthenUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n}\r\n\r\nclass OrderedEnumerable<T,TOrderBy extends Comparable>\r\nextends Enumerable<T> implements IOrderedEnumerable<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tprivate source:IEnumerable<T>,\r\n\t\tpublic keySelector:(value:T) => TOrderBy,\r\n\t\tpublic order:Order,\r\n\t\tpublic parent?:OrderedEnumerable<T,any>,\r\n\t\tpublic comparer:Comparison<T> = Values.compare)\r\n\t{\r\n\t\tsuper(null);\r\n\t}\r\n\r\n\tprivate createOrderedEnumerable(\r\n\t\tkeySelector:(value:T) => TOrderBy,\r\n\t\torder:Order):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,TOrderBy>(this.source, keySelector, order, this);\r\n\t}\r\n\r\n\tthenBy(keySelector:(value:T) => TOrderBy):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn this.createOrderedEnumerable(keySelector, Order.Ascending);\r\n\t}\r\n\r\n\tthenUsing(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this.source, null, Order.Ascending, this, comparison);\r\n\t}\r\n\r\n\tthenByDescending(keySelector:(value:T) => TOrderBy):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn this.createOrderedEnumerable(keySelector, Order.Descending);\r\n\t}\r\n\r\n\tthenUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this.source, null, Order.Descending, this, comparison);\r\n\t}\r\n\r\n\tgetEnumerator():EnumeratorBase<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar buffer:T[];\r\n\t\tvar indexes:number[];\r\n\t\tvar index:number = 0;\r\n\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tindex = 0;\r\n\t\t\t\tbuffer = Enumerable.toArray(_.source);\r\n\t\t\t\tindexes = createSortContext(_).generateSortedIndexes(buffer);\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\treturn (index<indexes.length)\r\n\t\t\t\t\t? yielder.yieldReturn(buffer[indexes[index++]])\r\n\t\t\t\t\t: false;\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tif(buffer)\r\n\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\tbuffer = null;\r\n\t\t\t\tif(indexes)\r\n\t\t\t\t\tindexes.length = 0;\r\n\t\t\t\tindexes = null;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis.source = null;\r\n\t\tthis.keySelector = null;\r\n\t\tthis.order = null;\r\n\t\tthis.parent = null;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Recursively builds a SortContext chain.\r\n * @param orderedEnumerable\r\n * @param currentContext\r\n * @returns {any}\r\n */\r\nfunction createSortContext<T, TOrderBy extends Comparable>(\r\n\torderedEnumerable:OrderedEnumerable<T,TOrderBy>,\r\n\tcurrentContext:IComparer<T> = null):KeySortedContext<T, TOrderBy>\r\n{\r\n\r\n\tvar context = new KeySortedContext<T, TOrderBy>(\r\n\t\tcurrentContext,\r\n\t\torderedEnumerable.keySelector,\r\n\t\torderedEnumerable.order,\r\n\t\torderedEnumerable.comparer);\r\n\r\n\tif(orderedEnumerable.parent)\r\n\t\treturn createSortContext(orderedEnumerable.parent, context);\r\n\r\n\treturn context;\r\n}\r\n\r\n// #region Helper Functions...\r\n// This allows for the use of a boolean instead of calling this.throwIfDisposed()\r\n// since there is a strong chance of introducing a circular reference.\r\nfunction throwIfDisposed(disposed:boolean, className:string = \"Enumerable\"):void\r\n{\r\n\tif(disposed) throw new ObjectDisposedException(className);\r\n}\r\n// #endregion\r\n\r\nexport default Enumerable;\r\n"]}